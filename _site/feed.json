{
  "version": "https://jsonfeed.org/version/1",
  "title": "",
  "description": "Front-end architect. Speaker &amp; writer.<br />Sass, CSS animation, RWD &amp; WP.",
  "home_page_url": "http://localhost:4000/",
  "feed_url": "http://localhost:4000/feed.json",
  
  "expired": false,
  "items": [
  
    {
      "id": "/css/animating-gradients",
      "title": "Animating Background Gradients to Make Your PWA More Native",
      "content_html": "<p>Read my article “<a href=\"https://dockyard.com/blog/2017/10/17/animating-background-gradients-pwa\" title=\"Animating Background Gradients to Make Your PWA More Native\" target=\"_blank\">Animating Background Gradients to Make Your PWA More Native</a>” at DockYard.com.</p>\n",
      "url": "http://localhost:4000/css/animating-gradients/",
      "summary": "<p>Read my article “<a href=\"https://dockyard.com/blog/2017/10/17/animating-background-gradients-pwa\" title=\"Animating Background Gradients to Make Your PWA More Native\" target=\"_blank\">Animating Background Gradients to Make Your PWA More Native</a>” at DockYard.com.</p>",
      "date_published": "2017-10-16 00:00:00 -0600"
      
    },
  
    {
      "id": "/misc/distributed-mentoring",
      "title": "Distributed Mentoring",
      "content_html": "<p>When most people think about mentoring, they picture someone more experienced investing time in a close relationship with someone less experienced. Maybe you thought about someone who’d done that for you - a co-worker, parent, or teacher. In my web development career, I’ve had a different kind of mentoring experience than that standard one. Instead of having an experienced developer invest lots of time in me and my career, I’ve benefited from little bits of help from lots of people over the years. <strong>I like to call this “distributed” mentorship: remote learning from people around the world.</strong></p>\n\n<h2 id=\"getting-started\">Getting Started</h2>\n\n<p>About 10 years ago, I got started in web development as a hobby. I was in grad school (studying an entirely unrelated field) and managed to have “free time” one semester. My dad had built a few sites back in the 90s and I liked computers so I thought it would be fun to learn how to build a site. My roommate was studying computer science and I asked him how to build a site. He was working on software development, so he just laughed and showed me w3schools. (Yeah, I know NOW not to go there, but hey, I learned a few things from it back then!) I got more direction from a friend David (who was a sysadmin). He wasn’t an “expert” at front-end development, but he was more familiar with it. He gave me a piece of fantastic advice: “most websites are built with tables, but CSS is the new thing that cutting-edge sites are using, so start there and forget tables.”</p>\n\n<p>I remember the new things back then: learning HTML, figuring out that PHP let me have variables and logic, installing IIS &amp; then Apache on my XP laptop, exploring CSS, being mystified that Chrome and Firefox had different default margins on text elements. Most of those ups &amp; downs were part of the standard learning curve for front-end devs back then. Through this time, I didn’t really have a “mentor” like we usually think of them. David and I had plenty more conversations - he ended up being my hosting service for years and I learned a lot from him. I remember sitting across the table from him at a bagel place while he drew DNS / hosting diagrams on a napkin. I still really enjoy digging into server admin stuff so I’m grateful for what I learned from him.</p>\n\n<p>Within a year or so of getting experienced with front-end dev, I realized people would probably pay me money for this “hobby.” So I started telling friends what I could do and built a few small paid sites on the side.</p>\n\n<h2 id=\"the-weird-lull\">The Weird Lull</h2>\n\n<p>After I graduated I got a job maintaining a website for a small non-profit (and running activities for their events every month and a host of other things: it was very much an “everyone helps with everything” kind of organization). I was given a privately developed CMS with no documentation and little to no positive help from the guy who’d built it. I learned a lot that year, but it was more visual design from the organization’s graphic design team - I was pretty isolated as the only “web person.” A year later, I moved on having learned very little: a bit of JavaScript and “never try to edit an undocumented code base.”</p>\n\n<h2 id=\"a-real-job-almost\">A Real Job, Almost</h2>\n\n<p>After that, I moved back to my college town for more grad school (nope, still not studying dev/tech <code class=\"highlighter-rouge\">¯\\_(ツ)_/¯</code>) and got a job as a graduate assistant running a ZenCart site. I’d been getting more familiar with PHP by using WordPress so that much of the code wasn’t too difficult. What was more challenging was the dozen or so custom MySQL queries I used to handle reporting every quarter. The site was a small MP3 store, so we reported sales to the original artists and paid their licensing fees to the license holders on any tracks they covered from another artist. The worst queries took up more than a page in Word (yep, that’s where everything was stored when I arrived). Since then, I’ve forgotten most of that, but that was also a great year for me - I sold my first few Wordpress sites to some clients and settled solidly on WP as a starting point for client work. There were some fun customizations: mp3 storage &amp; playback (before MediaElement.JS was part of WP) and PayPal integration (price &amp; SKU custom fields, no plugins), but nothing that I’d consider “advanced” today.</p>\n\n<p>During this time, I didn’t have a “mentor” <em>per se</em>. I learned a lot from the developer who handed off that ZenCart installation to me - he was kind enough to stay close for support questions for a few months. By now, though, I was relying on a growing network of <strong>distributed mentors</strong>: devs I followed on Twitter and trustworthy publisher. I’d become an avid follower of <a href=\"https://css-tricks.com/\">CSS-Tricks</a>, <a href=\"https://alistapart.com/\">A List Apart</a>, and <a href=\"http://www.smashingmagazine.com/\">Smashing Mag</a>. I didn’t personally meet people like Chris Coyier, Eric Meyer, Jeffrey Zeldman, Andrew Clarke, or Vitaly Freidman, but I read their posts &amp; books and “got mentored” by them from a distance.</p>\n\n<p>During this time I started to realize that not every mentorship is an in-person relationship over a long period of time. There are times I’ve looked back and wondered, “who was my mentor during this phase?” and come up blank - until I stop to remember how much I owe to the developers who write and publish and share their knowledge across the web.</p>\n\n<h2 id=\"a-real-job-for-real\">A Real Job, For Real</h2>\n\n<p>A few more years of freelance work went by while I finished up that degree. Then after graduating again, I got hired at my first <em>real</em> developer job. Not “a small part of my workload” development or “part-time for a college,” but real-live, full-time, development-only work.</p>\n\n<p>By this time, Ethan Marcotte and his magical media queries had changed my CSS world, and shortly into this job, I swallowed my pride (“but my CSS is good enough already!”) and learned Sass. I got pretty proficient at jQuery and was picking up bits of the plain JS that lived beneath it. I was cranking out custom WordPress themes every month or so and loving it. I was the only developer there (it was a <em>small</em> agency), so there wasn’t much “in-person” mentoring. However that year I got to attend CSSDevConf (my first dev conference!) and came away amazed. I got to meet some of the devs who had been my “publishing mentors” to that point (hey, Chris &amp; Estelle!) and I met several more devs whose work I started following &amp; learning from immediately (lookin’ at you, Rachel, Micah, &amp; Winston). I discovered CSS animation that weekend and immediately started adding pizzazz to the sites I was working on.</p>\n\n<p>Conference mentors are another useful kind of distributed mentor too. I didn’t know them at all before then, but Micah Godbolt and Winston Hearn took time to answer my questions about their talks. I got to sit by Chris Coyier, Tab Atkins, and Estelle Weyl one meal, and chat with Jonathan Snook over appetizers one evening. These brief interactions may not seem like very much on their own, but for me, they were really powerful. To realize that these experts were normal people who provide helpful advice and have friendly conversations with a newbie developer was tremendously encouraging.</p>\n\n<h2 id=\"a-big-job\">A Big Job</h2>\n\n<p>I’ve talked to a lot of developers whose careers have started similarly: learn/freelance, take a real job, then learn so much in your first year that your next job is a massive jump up. That’s what happened. I got an offer to join a team of a dozen developers at a larger agency. This was my first experience working with a significant in-person team. It was exciting to see how our individual strengths and weaknesses quickly moved us into collaborative mentorships. I inherited several bloated CSS-framework-based sites and helped the team move forward into lighter, more customizable Sass workflows. I learned the basics of Angular and Ember from devs with more JS experience than I had.</p>\n\n<h2 id=\"staying-home\">Staying Home</h2>\n\n<p>A year later, I took a job with a remote company. The challenges of learning remote work were balanced by a lot of positives: the team had an established workflow, people were already communicating well in Slack &amp; the PM app, and the dev team was internal (so we worked with our own marketing and design departments, instead of reporting to external clients). The same collaborative pattern was at work there too: we had a dev who was our PHP expert, one who was the JS guru, one who knew the company history and business model well, and a CSS/Sass expert (me). We learned from each other well. Again, it didn’t feel like “traditional” mentorship. Depending on the topic and context, each of us played the role of mentor or mentee at one time or another. And again, since the whole team was remote, this was another form of distributed mentorship. It was a fantastic team to be part of for 2 years.</p>\n\n<h2 id=\"flying-solo-for-now\">Flying Solo (for now)</h2>\n\n<p>This spring, I shifted positions again: it took a few months for things to settle, but I’m a contractor/consultant right now. I’ve been working as a team lead with a company that manages a flexible crew of contractors for web/software development and that’s been exciting. Having great onboarding/training conversations, constructive code reviews, and teaching moments with junior and intermediate developers has been enjoyable and fulfilling. I’m currently working with a friend to build a company that incorporates both top-notch web app development and training / apprenticeship opportunities for new devs.</p>\n\n<h2 id=\"take-aways\">Take-Aways</h2>\n\n<p>I’ve benefited a lot from “distributed mentoring.” Twitter people, online publishers, conference speakers &amp; friends, co-workers and peers - they’ve all played important roles in my career, even though it hasn’t looked like a stereotypical mentorship.</p>\n\n<p>If you’re starting your journey as a developer, start building a good network of people whose tweets/posts/blogs/work you can follow online and learn from remotely. Also, it can be a tough investment to swing, but attending conferences is a huge help, especially in your first couple years of “full-time” development work.</p>\n\n<p>If you’ve gotten enough experience to start specializing in a particular language, stack, or framework, use that expertise to grow collaboratively with others. Don’t get stuck behind fear that you’re “not expert enough yet” - if you know just a couple things that a friend or peer doesn’t, you can help them along. And of course, stay friends with people who know at least a little more than you about some topics so they can help you along.</p>\n",
      "url": "http://localhost:4000/misc/distributed-mentoring/",
      "summary": "Not all mentoring looks like a senior investing personally in a junior - it often happens online, remotely, or through peer-relationships.",
      "date_published": "2017-06-24 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/rwd-sass-animation",
      "title": "Keeping RWD Simple &amp; Sassy – Animation",
      "content_html": "<p>This is the fifth &amp; final post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques for managing responsive animations with Sass.</p>\n\n<h2 id=\"responsive-animations\">Responsive Animations</h2>\n\n<p>Complex animations may need to move differently at different breakpoints. The only way to use different animations at different breakpoints is to define multiple <code class=\"highlighter-rouge\">@keyframes</code> animations and use a media query on the animated selector to change the <code class=\"highlighter-rouge\">animation-name</code> at the appropriate breakpoints.</p>\n\n<p>Before we get into some useful Sass techniques to help manage responsive animations, let’s talk about a few things you should <strong>not</strong> be doing with Sass.</p>\n\n<p>Do not use Sass mixins for browser prefixes. I know, you can still find dozens of articles claiming that browser prefixes are a “must-use” Sass technique. Use <a href=\"http://jds.li/autoprefix\">Autoprefixer instead</a>. If you’re using Sass, there’s a pretty high likelihood you’re using a task runner (Gulp, Grunt, Brocolli, npm scripts) to automate your workflow. Add Autoprefixer to it and just write spec CSS. It will add all the prefixes you need.</p>\n\n<p>Also, try to avoid using Sass maps to store CSS property-value pairs. Sure, you <em>can</em> do that, but Sass mixins provide a much better way to store reusable property-value pairs. As I see it, writing big nested Sass maps that hold all your keyframes data in them isn’t ideal. Unless you need to manipulate the values, putting repeated CSS in a mixin is better than in a map as key-value pairs.</p>\n\n<p>So how can Sass help with responsive animations? There are two kinds of animations and two ways Sass can make them more maintainable.</p>\n\n<h3 id=\"unique-animations\">Unique Animations</h3>\n\n<p>If your animations are detailed and unique (not reusable), you can use a Sass mixin to nest your animation code right inside the selector that uses that animation.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@mixin</span> <span class=\"nf\">animate</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n  <span class=\"nv\">$name</span><span class=\"p\">:</span> <span class=\"nf\">unique-id</span><span class=\"p\">();</span>\n  <span class=\"nl\">animation-name</span><span class=\"p\">:</span> <span class=\"nv\">$name</span><span class=\"p\">;</span>\n\n  <span class=\"k\">@at-root</span> <span class=\"p\">{</span>\n    <span class=\"k\">@keyframes</span> <span class=\"si\">#{</span><span class=\"nv\">$name</span><span class=\"si\">}</span> <span class=\"p\">{</span>\n      <span class=\"k\">@content</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.animated-thing</span> <span class=\"p\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">animate</span> <span class=\"p\">{</span>\n    <span class=\"nt\">0</span><span class=\"nv\">%</span><span class=\"o\">,</span> <span class=\"nt\">100</span><span class=\"nv\">%</span> <span class=\"p\">{</span>\n      <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n    <span class=\"nt\">50</span><span class=\"nv\">%</span> <span class=\"p\">{</span>\n      <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"m\">100%</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">breakpoint</span><span class=\"p\">(</span><span class=\"nb\">large</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">@include</span> <span class=\"nd\">animate</span> <span class=\"p\">{</span>\n      <span class=\"nt\">0</span><span class=\"nv\">%</span><span class=\"o\">,</span> <span class=\"nt\">100</span><span class=\"nv\">%</span> <span class=\"p\">{</span>\n        <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"nt\">50</span><span class=\"nv\">%</span> <span class=\"p\">{</span>\n        <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">translateX</span><span class=\"p\">(</span><span class=\"m\">-100%</span><span class=\"p\">);</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>For one-off animations, this mixin keeps everything you need in the selector’s normal partial and saves you the trouble of thinking up animation names!</p>\n\n<h3 id=\"reusable-animations\">Reusable Animations</h3>\n\n<p>On the other hand, some animations are reusable. If you’ve used Dan Eden’s <a href=\"http://jds.li/animcss\"><code class=\"highlighter-rouge\">animate.css</code></a>, you’ve experienced a supply of animations designed to be reusable. If you want to see how Sass can organize something like that, checkout the <a href=\"http://jds.li/animsass\"><code class=\"highlighter-rouge\">animate.scss</code> project</a>.</p>\n\n<h3 id=\"animation-consistency\">Animation Consistency</h3>\n\n<p>You can also use Sass to solve CSS animation’s speed problem. As you may know, you can only define 2 speed-related properties in CSS animations: duration (with the <code class=\"highlighter-rouge\">animation-duration</code> property) and distance (in the <code class=\"highlighter-rouge\">@keyframes</code> themselves). What you can’t do is define an actual speed: pixels per second. But you can use Sass to calculate duration or distance based on a desired speed.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$default-speed</span><span class=\"p\">:</span> <span class=\"m\">300px</span> <span class=\"m\">1s</span><span class=\"p\">;</span>\n\n<span class=\"k\">@function</span> <span class=\"nf\">calc-distance</span><span class=\"p\">(</span><span class=\"nv\">$duration</span><span class=\"o\">,</span> <span class=\"nv\">$speed</span><span class=\"o\">:</span> <span class=\"nv\">$default-speed</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return</span> <span class=\"nv\">$duration</span> <span class=\"o\">/</span> <span class=\"nf\">nth</span><span class=\"p\">(</span><span class=\"nv\">$speed</span><span class=\"o\">,</span> <span class=\"m\">2</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nf\">nth</span><span class=\"p\">(</span><span class=\"nv\">$speed</span><span class=\"o\">,</span> <span class=\"m\">1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@function</span> <span class=\"nf\">calc-duration</span><span class=\"p\">(</span><span class=\"nv\">$distance</span><span class=\"o\">,</span> <span class=\"nv\">$speed</span><span class=\"o\">:</span> <span class=\"nv\">$default-speed</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return</span> <span class=\"nv\">$distance</span> <span class=\"o\">/</span> <span class=\"nf\">nth</span><span class=\"p\">(</span><span class=\"nv\">$speed</span><span class=\"o\">,</span> <span class=\"m\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"nf\">nth</span><span class=\"p\">(</span><span class=\"nv\">$speed</span><span class=\"o\">,</span> <span class=\"m\">2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>This isn’t purely responsive, but if you are aiming for consistent speed for your animation at various breakpoints, this saves you a lot of math.</p>\n\n<p>The last way I’ve found Sass helpful for animations is for creating a style guide of consistent motion possibilities. You can set up a map of transition / animation distances and a map of transition / animation durations. (Or just one of those maps &amp; the functions from above!) Then, with a helper function, you can quickly get the right value for your current animation.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$transition-durations</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"n\">short</span><span class=\"o\">:</span> <span class=\"mi\">.16s</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"mi\">.26s</span><span class=\"o\">,</span>\n  <span class=\"n\">long</span><span class=\"o\">:</span> <span class=\"mi\">.42s</span>\n<span class=\"p\">);</span>\n\n<span class=\"nv\">$transition-distances</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"n\">short</span><span class=\"o\">:</span> <span class=\"mi\">.6rem</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">2</span><span class=\"mi\">.6rem</span><span class=\"o\">,</span>\n  <span class=\"n\">long</span><span class=\"o\">:</span> <span class=\"m\">6</span><span class=\"mi\">.8rem</span>\n<span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p>Here are the functions we can use to retrieve those values. I’ve written 1 function to house the validation and warning, and two alias functions to make it easier to use.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@function</span> <span class=\"nf\">get-transition-value</span><span class=\"p\">(</span><span class=\"nv\">$map</span><span class=\"o\">,</span> <span class=\"nv\">$key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"nf\">map-has-key</span><span class=\"p\">(</span><span class=\"nv\">$map</span><span class=\"o\">,</span> <span class=\"nv\">$key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">@return</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$map</span><span class=\"o\">,</span> <span class=\"nv\">$key</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s1\">'Current $map does not contain key: </span><span class=\"si\">#{</span><span class=\"nv\">$key</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@function</span> <span class=\"nf\">duration</span><span class=\"p\">(</span><span class=\"nv\">$key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return</span> <span class=\"nf\">get-transition-value</span><span class=\"p\">(</span><span class=\"nv\">$transition-durations</span><span class=\"o\">,</span> <span class=\"nv\">$key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@function</span> <span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"nv\">$key</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return</span> <span class=\"nf\">get-transition-value</span><span class=\"p\">(</span><span class=\"nv\">$transition-distances</span><span class=\"o\">,</span> <span class=\"nv\">$key</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>And here’s what it looks like in use:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.slow-element</span> <span class=\"p\">{</span>\n  <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"n\">transform</span> <span class=\"nf\">duration</span><span class=\"p\">(</span><span class=\"n\">long</span><span class=\"p\">)</span> <span class=\"n\">ease-in-out</span><span class=\"p\">;</span>\n\n  <span class=\"k\">&amp;</span><span class=\"nc\">.moved</span> <span class=\"p\">{</span>\n    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"nf\">translateY</span><span class=\"p\">(</span><span class=\"nf\">distance</span><span class=\"p\">(</span><span class=\"n\">short</span><span class=\"p\">));</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n",
      "url": "http://localhost:4000/sass/rwd-sass-animation/",
      "summary": "Using Sass for animation to keep responsive Sass code clean and maintainable.",
      "date_published": "2016-04-14 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/rwd-sass-grids",
      "title": "Keeping RWD Simple &amp; Sassy – Grids &amp; Columns",
      "content_html": "<p>This is the fourth post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques for managing grid/column layouts with Sass.</p>\n\n<h2 id=\"grids-and-columns\">Grids and Columns</h2>\n\n<p>Another big piece of responsive desig is grids. Well, columns. Always cracks me up at CSS/Sass “grid systems” that only create columns and become painfully complex when you try to use them for an actual “grid.” (Shout out to Susy for Sass with its <code class=\"highlighter-rouge\">gallery()</code> mixin!) But I digress. We almost always have some kind of column-based layout that changes proportions. What’s the best way to handle that?</p>\n\n<p>Let’s quickly nix a bad way to handle that: writing some Sass to generate every possible grid proportion for your project to a set of utility classes. Basically a Sass partial that makes your own “Bootstrap” class system.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@for</span> <span class=\"nv\">$child-columns</span> <span class=\"ow\">from</span> <span class=\"m\">1</span> <span class=\"ow\">through</span> <span class=\"m\">12</span> <span class=\"p\">{</span>\n  <span class=\"k\">@for</span> <span class=\"nv\">$parent-columns</span> <span class=\"ow\">from</span> <span class=\"m\">1</span> <span class=\"ow\">through</span> <span class=\"m\">12</span> <span class=\"p\">{</span>\n    <span class=\"k\">@if</span> <span class=\"nv\">$parent-columns</span> <span class=\"o\">&gt;=</span> <span class=\"nv\">$child-columns</span> <span class=\"p\">{</span>\n      <span class=\"nc\">.col-</span><span class=\"si\">#{</span><span class=\"nv\">$child-columns</span><span class=\"si\">}</span><span class=\"nc\">-of-</span><span class=\"si\">#{</span><span class=\"nv\">$parent-columns</span><span class=\"si\">}</span> <span class=\"p\">{</span>\n        <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">100%</span> <span class=\"o\">/</span> <span class=\"nv\">$parent-columns</span> <span class=\"o\">*</span> <span class=\"nv\">$child-columns</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"o\">[</span><span class=\"nt\">class</span><span class=\"o\">^=</span><span class=\"s2\">\"col-\"</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n  <span class=\"nl\">float</span><span class=\"p\">:</span> <span class=\"nb\">left</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Those loops are really short and give us handy set of classes that are (almost) instantly ready to plug-in to our markup, but they also generate almost 80 selector blocks (300+ lines of unminified markup). And we haven’t even added breakpoints, gutters, or offsets yet!</p>\n\n<p>A much better solution is to use a set of mixins that create the right column widths and margins for you. This set of mixins should generate CSS based on grid math <em>only when their mixins are used.</em> This prevents the problem of making your users download the CSS needed for every possible grid position. It gives you all the benefits of highly configurable grids measurements, but only generates the CSS needed for the elements you actually want to style. All the possibilities, none of the bloat.</p>\n\n<h3 id=\"responsive-grids-sass-libraries\">Responsive Grids Sass Libraries</h3>\n\n<p>There are 3 major Sass libraries that do nearly everything you need: Susy, Singularity, and Neat (with its Bourbon dependency).</p>\n\n<p><strong>Neat (and Bourbon)</strong>: Neat is probably the most basic of the three. It does grid (with gutter) proportions and has a media query mixin. It’s dependent on Bourbon (a mixin library). If you already use Bourbon, that makes Neat a natural choice, but if not, the dependency doesn’t matter. <a href=\"http://jds.li/neat\">Download Neat</a>.</p>\n\n<p><strong>Susy</strong>: Susy’s best bonus feature (in my opinion) is its <code class=\"highlighter-rouge\">gallery()</code> mixin. Most grid systems just do columns, but <code class=\"highlighter-rouge\">gallery()</code> lets you generate an actual grid (column <strong>and</strong> rows!) of items. It also has solid support for asymmetric grids (not all column proportions have to fit on a 12-col / 16-col / etc layout). <a href=\"http://jds.li/susy\">Download Susy</a>.</p>\n\n<p><strong>Singularity</strong>: Singularity supports asymmetric grids like Susy, but not a simple “gallery” mixin. It also has an add-on mixin that uses <code class=\"highlighter-rouge\">calc()</code> to mix fluid and fixed width columns. <a href=\"http://jds.li/singularity\">Download Singularity</a>.</p>\n",
      "url": "http://localhost:4000/sass/rwd-sass-grids/",
      "summary": "Using Sass for grids to keep responsive Sass code clean and maintainable.",
      "date_published": "2016-04-12 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/rwd-sass-typography",
      "title": "Keeping RWD Simple &amp; Sassy – Responsive Typography",
      "content_html": "<p>This is the third post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques for managing responsive typography with Sass.</p>\n\n<h2 id=\"responsive-sass-typography\">Responsive Sass Typography</h2>\n\n<p>You might recall our <code class=\"highlighter-rouge\">$breakpoints</code> map from <a href=\"/sass/rwd-sass-media-queries/\">the last post</a>. Let’s combine that with 2 other maps to automate some responsive typography.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoints</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nb\">default</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">25em</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span> <span class=\"m\">50em</span>\n<span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$font-sizes</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nb\">default</span><span class=\"o\">:</span> <span class=\"m\">1rem</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span>  <span class=\"m\">1</span><span class=\"mi\">.2rem</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span>   <span class=\"m\">1</span><span class=\"mi\">.4rem</span>\n<span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$line-heights</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nb\">default</span><span class=\"o\">:</span> <span class=\"m\">1</span><span class=\"mi\">.5</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span>  <span class=\"m\">1</span><span class=\"mi\">.6</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span>   <span class=\"m\">1</span><span class=\"mi\">.6</span>\n<span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p>Again, we’ll use the function <code class=\"highlighter-rouge\">map-get()</code> to retrieve values from these map.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoint-medium</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nb\">medium</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$font-size-default</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$font-sizes</span><span class=\"o\">,</span> <span class=\"nb\">default</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$line-height-large</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$line-heights</span><span class=\"o\">,</span> <span class=\"nb\">large</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p>I mentioned earlier we’d be able to loop through a map (an advantage over a series of variables). Here’s a practical example. Let’s create some quick responsive typography with the three maps we just made a moment ago. For each breakpoint (<code class=\"highlighter-rouge\">default</code>, <code class=\"highlighter-rouge\">medium</code>, <code class=\"highlighter-rouge\">large</code>), we’re going to set the base <code class=\"highlighter-rouge\">font-size</code> &amp; <code class=\"highlighter-rouge\">line-height</code> on the <code class=\"highlighter-rouge\">body</code> element.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"k\">@each</span> <span class=\"nv\">$label</span><span class=\"o\">,</span> <span class=\"nv\">$min-width</span> <span class=\"n\">in</span> <span class=\"nv\">$breakpoints</span> <span class=\"p\">{</span>\n    <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$label</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$font-sizes</span><span class=\"o\">,</span> <span class=\"nv\">$label</span><span class=\"p\">);</span>\n      <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$line-heights</span><span class=\"o\">,</span> <span class=\"nv\">$label</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>And now we get responsive base typography:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">body</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1rem</span><span class=\"p\">;</span>\n  <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1.5</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"p\">:</span> <span class=\"m\">25em</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nt\">body</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.2rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1.6</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"p\">:</span> <span class=\"m\">50em</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nt\">body</span> <span class=\"p\">{</span>\n    <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"m\">1.4rem</span><span class=\"p\">;</span>\n    <span class=\"nl\">line-height</span><span class=\"p\">:</span> <span class=\"m\">1.6</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"responsive-typography-sass-libraries\">Responsive Typography Sass Libraries</h2>\n\n<ul>\n  <li>Modular Scale: <a href=\"http://jds.li/mscale\">jds.li/mscale</a></li>\n  <li>TypeTuner: <a href=\"http://jds.li/typetuner\">jds.li/typetuner</a></li>\n  <li>Sassline: <a href=\"http://jds.li/sassline\">jds.li/sassline</a></li>\n  <li>Typi: <a href=\"http://jds.li/typi\">jds.li/typi</a></li>\n  <li>Typographic: <a href=\"http://jds.li/typographic\">jds.li/typographic</a></li>\n</ul>\n",
      "url": "http://localhost:4000/sass/rwd-sass-typography/",
      "summary": "Using Sass for typography to keep responsive Sass code clean and maintainable.",
      "date_published": "2016-04-08 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/rwd-sass-media-queries",
      "title": "Keeping RWD Simple &amp; Sassy – Media Queries",
      "content_html": "<p>This is the second post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some useful techniques to manage media queries with Sass to keep your responsive Sass code base clean and maintainable.</p>\n\n<h2 id=\"media-query-variables\">Media Query Variables</h2>\n\n<p>I know, we’re working with some bedrock basics: managing repeated values with variables. Assign any repeated value to a variable. The biggest improvements are: 1) you don’t have to look up that value every time you want to use it again and 2) you can change that value across the entire codebase by editing the variable just once. This is a practical way to apply the programming principle of having a “single source of truth” for these values.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoint-medium</span><span class=\"p\">:</span> <span class=\"m\">25em</span><span class=\"p\">;</span>\n<span class=\"nv\">$breakpoint-large</span><span class=\"p\">:</span>  <span class=\"m\">50em</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n\n<p>Now if you want to write a media query in Sass, you can stick with your defined breakpoints like this:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.element</span> <span class=\"p\">{</span>\n  <span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$breakpoint-medium</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Let’s improve that a bit, shall we? Sass variables aren’t limited to simple string storage: they can also be maps (or associative arrays):</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoints</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"nb\">default</span><span class=\"o\">:</span> <span class=\"n\">null</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">25em</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span> <span class=\"m\">50em</span>\n<span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p>Or if you’ve put your breakpoints in a map, you’ll use <code class=\"highlighter-rouge\">map-get()</code> to retreive the value for that breakpoint. This is the Sass equivalent of <code class=\"highlighter-rouge\">array['key']</code> / <code class=\"highlighter-rouge\">array.key</code> in JS or <code class=\"highlighter-rouge\">$array['key']</code>in PHP:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.element</span> <span class=\"p\">{</span>\n  <span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nb\">medium</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"media-query-mixin\">Media Query Mixin</h3>\n\n<p>Now, that’s still a lot to type, so let’s create a mixin to make the whole MQ syntax fast and reusable:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@mixin</span> <span class=\"nf\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$label</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nv\">$min-width</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nv\">$label</span><span class=\"p\">);</span>\n  <span class=\"k\">@if</span> <span class=\"nv\">$min-width</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$min-width</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">@content</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@content</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.element</span> <span class=\"p\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nb\">medium</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><em>Note: That mixin will fail silently. If you pass it a key that doesn’t exist in <code class=\"highlighter-rouge\">$breakpoints</code>, it’ll just output the <code class=\"highlighter-rouge\">@content</code> CSS with no media query. Read <a href=\"http://jds.li/validsass\">my article on Sass validation</a> for more information on validating input for Sass mixins &amp; functions.</em></p>\n\n<h3 id=\"breakpoints-vs-tweakpoints\">Breakpoints vs. Tweakpoints</h3>\n\n<p>You may have seen <a href=\"http://jds.li/tweakpoints\">Jeremy Keith’s article on “Tweakpoints” recently</a>. Tweakpoints are like breakpoints for a design, but not as “major.” You’re probably already used to having 3 or 4 major layout-changing breakpoints for a site. You’ve probably also felt the pain of having a few odd components that don’t seem to “break” nicely at your primary breakpoints. Tweakpoints are “sub-breakpoints” for individual parts of the site that need a slightly-adjusted breakpoint.</p>\n\n<p>You can handle tweakpoints a couple different ways. You could be strict and say, “They’re not as important as breakpoints, so they’ll be stored in their own map.” In that scenario, you’ll then need to either (a) write a <code class=\"highlighter-rouge\">tweakpoint()</code> version of the breakpoint mixin, or (b) modify your breakpoint mixin so that it can handle tweakpoints too. If you like option (b), read <a href=\"http://jds.li/tpointsass\">this tweakpoint Sass tutorial</a> for an example of how to scope tweakpoints to each Sass partial.</p>\n\n<p>The other way to handle tweakpoints is to decide, “I don’t care that they’re not as important as breakpoints. I’ll put them in the same map anyway and that’s fine.” The downside of this approach is that all the tweakpoints are available to the entire codebase, instead of being scoped to the style patterns that actually need them.</p>\n\n<p>Here’s my way to mess with the breakpoint mixin and get it to handle tweakpoints nicely.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@mixin</span> <span class=\"nf\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$label</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nv\">$min-width</span><span class=\"p\">:</span> <span class=\"nv\">$label</span><span class=\"p\">;</span>\n\n  <span class=\"k\">@if</span> <span class=\"nf\">type-of</span><span class=\"p\">(</span><span class=\"nv\">$label</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">string</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$min-width</span><span class=\"p\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nv\">$label</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">@if</span> <span class=\"nv\">$min-width</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"n\">screen</span> <span class=\"nf\">and</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$min-width</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">@content</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@content</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$tweakpoint-element</span><span class=\"p\">:</span> <span class=\"m\">45em</span><span class=\"p\">;</span>\n\n<span class=\"nc\">.element</span> <span class=\"p\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nb\">medium</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">50%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$tweakpoint-element</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"m\">33</span><span class=\"mi\">.33%</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"per-partial-variables-for-breakpoints\">Per-Partial Variables for Breakpoints</h3>\n\n<p>I often find myself in a situation where I’ve got a Sass partial that re-uses a breakpoint in several element. Navigation is a pretty common place for this to happen. I don’t always know up front if I’ll need to change the nav at the medium breakpoint, the large breakpoint, or a tweakpoint somewhere in between. I do know that when I figure out where to break that point, I’ll need to update the argument in 4-5 instances of the media query mixin. I handle that with a variable in that partial pointing to the breakpoint I want to test.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$mq-nav</span><span class=\"p\">:</span> <span class=\"nb\">medium</span><span class=\"p\">;</span>\n\n<span class=\"nc\">.site-nav</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$mq-nav</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.site-nav-item</span> <span class=\"p\">{</span>\n  <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$mq-nav</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"n\">inline-block</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.site-nav-link</span> <span class=\"p\">{</span>\n  <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span> <span class=\"mi\">.5em</span><span class=\"p\">;</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nv\">$mq-nav</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">1em</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>In real life, the partial is never that simple: it’s got all kinds of other style information scattered around and it ends up 100 or more lines long. This alias variable allows me to link all the styles that should happen at a single breakpoint and edit that breakpoint easily.</p>\n\n<h3 id=\"nested-media-queries-vs-mq-partials\">Nested Media Queries vs. MQ Partials</h3>\n\n<p>This may be an old topic that doesn’t need to be re-hashed here, but it’s RWD and Sass, so I think it deserves a slide or two.</p>\n\n<p>Should you nest all your media queries inside the selectors they modify, or have a partial per media query with all the modifications in each partial?</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// in _nav partial\n</span>\n<span class=\"nc\">.site-nav</span> <span class=\"p\">{</span>\n  <span class=\"c1\">// styles\n</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nb\">medium</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// medium styles\n</span>  <span class=\"p\">}</span>\n\n  <span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nb\">large</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"c1\">// large styles\n</span>  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// in styles partial\n</span>\n<span class=\"k\">@import</span> <span class=\"s1\">'site-nav'</span><span class=\"p\">;</span>\n\n<span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nb\">medium</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@import</span> <span class=\"s1\">'bp-medium'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">@include</span> <span class=\"nd\">media-query</span><span class=\"p\">(</span><span class=\"nb\">large</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@import</span> <span class=\"s1\">'bp-large'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Option 2 reminds us of the olden days when we wrote all our styles in a single CSS file, and put our media queries in order at the bottom of that file. If you remember those days, you probably remember the major frustration of that: to modify one component responsively, you had to keep scrolling between 3 positions in your 1000s of lines CSS file. There’s no reason to keep that frustration when you’re using a preprocessory.</p>\n\n<p>Nesting all your media queries in the selectors they modify allows you to (ideally) open 1 partial to find and maintain all the styles for a single component. When it comes to dev-friendly organization like we talked about before, nesting media queries is the way to go.</p>\n\n<p>The objection to that technique, however, is that it will bloat CSS output by repeating the media query syntax over and over again. However, that objection ignores an important factor: if you don’t repeat media queries, you’ll repeat your selectors.</p>\n\n<p>I ran a brief test to see how bad the “bloat” is. For the test, I generated 40 selectors (of varying length) and nested 2 media queries in each one. Then I wrote default styles &amp; 2 media queries with the 40 selectors repeated in each media query. The nested media query output was a bit larger: 11.3kb, while the separated media query output was 8.3kb - 25% smaller. (<em>Remember, this is not an entire stylesheet: it’s a simplified test to show how much weight the selectors &amp; queries themselves generate. Also, this is not a huge issue: if your total style sheet is ~150kb, it’s only a 2% change.</em>) Then I gzipped both output files. Surprisingly, the nested media query gzip was 87% smaller than the separated media query gzip.</p>\n\n<p>So first of all, the repetitious bloat warning is exaggerated: you’re going to have repetition no matter what you do. Secondly, however, you really <strong>must</strong> be gzipping your HTML/CSS/JS for users. Gzip compression finds all the repeated strings in a text file and uses an alias to shorten them. And for the record, you get better compression with 2 strings repeated 40x than with 40 strings repeated 2x. Nested media queries FTW!</p>\n\n<p><em>Note: <a href=\"http://jds.li/gzip\">more information on gzip</a>.</em></p>\n",
      "url": "http://localhost:4000/sass/rwd-sass-media-queries/",
      "summary": "Organizing media queries with Sass to keep responsive Sass code clean and maintainable.",
      "date_published": "2016-04-08 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/rwd-sass-organization",
      "title": "Keeping RWD Simple &amp; Sassy – Organization",
      "content_html": "<p>This is the first post in a series based on my recent RWD Summit talk “Keeping RWD Simple &amp; Sassy.” It covers some important programming principles for keeping any code organized and makes application to your responsive Sass code base.</p>\n\n<h2 id=\"single-source-of-truth\">Single Source of Truth</h2>\n\n<p>There’s a principle in data organization and programming called “Single Source of Truth.” It means that ideally, a system should only define a piece of data once, then all other references to that data should refer back to the original/canonical definition. While this principle originally described data structures and databases primarily, it does apply to style organization. For example, if you use a specific shade of blue throughout a site, it’s best to define that color once (as a variable) and use the variable throughout the rest of your style codebase. You may have heard this same principle explained with the acronym “DRY” - Don’t Repeat Yourself.</p>\n\n<p>One clarification on SSoT: this principle does not mean that you never ever type the same value or string twice. This principle applies to data that’s repeated “because it’s meant to be the same.” However, sometimes data points are identical but not on purpose. The height of a site’s fixed header might be <code class=\"highlighter-rouge\">80px</code> (or <code class=\"highlighter-rouge\">5rem</code> if you like that better) and the page title font-size may be the same size. However, that’s not necessarily because they <strong>must</strong> be the same size. SSOT/DRY doesn’t mean you have to force identical values into a single variable.</p>\n\n<h2 id=\"naming-things-well\">Naming Things Well</h2>\n\n<p>The key to maintainability is consistency. If you need to find and change some code quickly, things have to be named consistently. Let me suggest a naming pattern that’ll help with consistency: the words in your variable and file names should go from broad to narrow.</p>\n\n<h3 id=\"name-things-consistently\">Name Things Consistently</h3>\n\n<h4 id=\"naming-variables\">Naming Variables</h4>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// Avoid this:\n</span><span class=\"nv\">$blue-color</span><span class=\"p\">:</span>      <span class=\"mh\">#0074D9</span><span class=\"p\">;</span>\n<span class=\"nv\">$dark-blue-color</span><span class=\"p\">:</span> <span class=\"mh\">#001f3f</span><span class=\"p\">;</span> <span class=\"c1\">// eeny\n</span><span class=\"nv\">$blue-dark-color</span><span class=\"p\">:</span> <span class=\"mh\">#001f3f</span><span class=\"p\">;</span> <span class=\"c1\">// meeny\n</span><span class=\"nv\">$blue-color-dark</span><span class=\"p\">:</span> <span class=\"mh\">#001f3f</span><span class=\"p\">;</span> <span class=\"c1\">// miney mo\n</span><span class=\"nv\">$red-color</span><span class=\"p\">:</span>       <span class=\"mh\">#ff4136</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Do this:\n</span><span class=\"nv\">$color-blue</span><span class=\"p\">:</span>      <span class=\"mh\">#0074D9</span><span class=\"p\">;</span>\n<span class=\"nv\">$color-blue-dark</span><span class=\"p\">:</span> <span class=\"mh\">#001f3f</span><span class=\"p\">;</span>\n<span class=\"nv\">$color-red</span><span class=\"p\">:</span>       <span class=\"mh\">#ff4136</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// Avoid this:\n</span><span class=\"nv\">$normal-border</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"nv\">$color-gray-light</span><span class=\"p\">;</span>\n<span class=\"nv\">$fancy-border</span><span class=\"p\">:</span>  <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"nv\">$color-blue</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Do this:\n</span><span class=\"nv\">$border-normal</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"nv\">$color-gray-light</span><span class=\"p\">;</span>\n<span class=\"nv\">$border-fancy</span><span class=\"p\">:</span>  <span class=\"m\">1px</span> <span class=\"nb\">solid</span> <span class=\"nv\">$color-blue</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n\n<h4 id=\"naming-files\">Naming Files</h4>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// Cluttered\n|–  modules/\n|   |–  _block-table.scss\n|   |–  _siteheader.scss\n|   |–  _4column-block.scss\n|   |–  _footer.scss\n|   |–  _menus.scss\n|   `–  _mobile-nav.scss\n|–  reset/\n|   `–  _reset.scss\n`–  style.scss\n\n// Better\n|–  blocks/\n|   |–  _block-table.scss\n|   `–  _block-columns-4.scss\n|–  shared/\n|   |–  _site-header.scss\n|   |–  _site-footer.scss\n|   |–  _nav.scss\n|   `–  _nav-mobile.scss\n|–  reset/\n|   `–  _reset.scss\n`–  style.scss\n</code></pre>\n</div>\n\n<h3 id=\"name-things-clearly\">Name Things Clearly</h3>\n\n<p>Things have to be named clearly as well. You’ll often seen developers using all manner of abbreviations for their variables and files. Shorter names might be quicker to type as you create a new codebase, but they’re a lot less useful when you need to understand the existing code for a maintenance request later. We often spend a month or two building a site, then a year or more maintaining it. Don’t make the long-term maintenance hard for the sake of typing fewer characters while you build the site.</p>\n\n<h4 id=\"naming-variables-1\">Naming Variables</h4>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// Harder to read / maintain\n</span><span class=\"nv\">$c-bl-dk</span><span class=\"p\">:</span> <span class=\"mh\">#001f3f</span><span class=\"p\">;</span>\n<span class=\"nv\">$c-rd-lt</span><span class=\"p\">:</span> <span class=\"nf\">lighten</span><span class=\"p\">(</span><span class=\"mh\">#ff4136</span><span class=\"o\">,</span> <span class=\"m\">25%</span><span class=\"p\">);</span>\n<span class=\"nv\">$c-gr</span><span class=\"p\">:</span>    <span class=\"mh\">#3d9970</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Easier to read / maintain\n</span><span class=\"nv\">$color-blue-dark</span><span class=\"p\">:</span> <span class=\"mh\">#001f3f</span><span class=\"p\">;</span>\n<span class=\"nv\">$color-red-light</span><span class=\"p\">:</span> <span class=\"nf\">lighten</span><span class=\"p\">(</span><span class=\"mh\">#FF4136</span><span class=\"o\">,</span> <span class=\"m\">25%</span><span class=\"p\">);</span>\n<span class=\"nv\">$color-green</span><span class=\"p\">:</span>     <span class=\"mh\">#3D9970</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n\n<h4 id=\"naming-files-1\">Naming Files</h4>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// Mysterious\n|–  modules/\n|   |–  _b-table.scss\n|   |–  _s-header.scss\n|   |–  _4c-b.scss\n|   |–  _ft.scss\n|   |–  _m.scss\n|   `–  _mob-nav.scss\n|–  reset/\n|   `– _reset.scss\n`–  style.scss\n\n// Clearer\n|–  blocks/\n|   |–  _block-table.scss\n|   |–  _block-columns-4.scss\n|–  shared/\n|   |–  _site-header.scss\n|   |–  _site-footer.scss\n|   |–  _nav.scss\n|   `–  _nav-mobile.scss\n|–  reset/\n|   `– _reset.scss\n`–  style.scss\n</code></pre>\n</div>\n\n<h2 id=\"making-big-things-small\">Making Big Things Small</h2>\n\n<p>Using a preprocessor means you no longer need to deal with 1000s of lines of CSS in a single file. (You’ll still compile everything to a single CSS file, but you won’t have to maintain directly.)</p>\n\n<p>Let’s talk about how to organize your preprocessor partials. Credit for this pattern goes to Hugo Giraudel’s <a href=\"http://sass-guidelin.es/#the-7-1-pattern\">Sass Guidelines site</a>.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>// 7-1 Sass Folder Pattern\nsass/\n|–  abstracts/\n|–  base/\n|–  components/\n|–  layout/\n|–  pages/\n|–  themes/\n|–  vendors/\n`–  main.scss\n</code></pre>\n</div>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>sass/\n|–  abstracts/\n|   |–  _variables.scss    # Sass Variables\n|   |–  _functions.scss    # Sass Functions\n|   |–  _mixins.scss       # Sass Mixins\n|   `–  _placeholders.scss # Sass Placeholders\n|\n|–  base/\n|   |–  _reset.scss        # Reset/normalize\n|   |–  _typography.scss   # Typography rules\n|   …                      # Etc.\n|\n|–  components/\n|   |–  _buttons.scss      # Buttons\n|   |–  _carousel.scss     # Carousel\n|   |–  _cover.scss        # Cover\n|   |–  _dropdown.scss     # Dropdown\n|   …                      # Etc.\n|\n|–  layout/\n|   |–  _navigation.scss   # Navigation\n|   |–  _grid.scss         # Grid system\n|   |–  _header.scss       # Header\n|   |–  _footer.scss       # Footer\n|   |–  _sidebar.scss      # Sidebar\n|   |–  _forms.scss        # Forms\n|   …                      # Etc.\n|\n|–  pages/\n|   |–  _home.scss         # Home specific styles\n|   |–  _contact.scss      # Contact specific styles\n|   …                      # Etc.\n|\n|–  themes/\n|   |–  _theme.scss        # Default theme\n|   |–  _admin.scss        # Admin theme\n|   …                      # Etc.\n|\n|–  vendors/\n|   |–  _bootstrap.scss    # Bootstrap\n|   |–  _jquery-ui.scss    # jQuery UI\n|   …                      # Etc.\n|\n`–  main.scss              # Main Sass file\n</code></pre>\n</div>\n\n<ul>\n  <li><strong>Abstracts:</strong> variables, mixins, functions, placeholders</li>\n  <li><strong>Vendors:</strong> code libraries from other sources like grid helpers, mixin libraries, etc</li>\n  <li><strong>Base:</strong> boilerplate stuff like reset, typography</li>\n  <li><strong>Layouts:</strong> macro (wireframe) page parts like header, footer, grid</li>\n  <li><strong>Components:</strong> smaller, reusable components like widgets, media, thumbnails</li>\n  <li><strong>Pages:</strong> page-specific styles</li>\n  <li><strong>Themes:</strong> specific theme variations (not common on small/medium sites)</li>\n</ul>\n",
      "url": "http://localhost:4000/sass/rwd-sass-organization/",
      "summary": "Programming organizational principles for keeping responsive Sass code clean and maintainable.",
      "date_published": "2016-03-30 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/rwd-sass",
      "title": "Keeping RWD Simple &amp; Sassy",
      "content_html": "<p>There’s no going back now: responsive web design is the new normal. Content parity across devices is the best way to serve our users and all of us who build the web build with for multiple screen sizes.</p>\n\n<p>Responsive design comes with a lot of complications, however: managing consistent breakpoints across a project, tracking all the styles that need to change across those breakpoints, and keeping all the responsive code clean and organized, to name a few.</p>\n\n<p>Using Sass (or a similar preprocessor), we can standardize our breakpoints, automate much of the repetitive code, and organize individual styles well. Over the next several posts, we’ll look at several Sass techniques and tools for managing responsive CSS.</p>\n\n<p><em>Note: I’m a big fan of Sass, but I know some of you use Less or Stylus (or your own home-brewed or PostCSS-based preprocessor), so I’m going to emphasize techniques over specific tools.</em></p>\n\n<h2 id=\"outline\">Outline:</h2>\n\n<ol>\n  <li><a href=\"/sass/rwd-sass-organization/\">Organization</a>\n    <ul>\n      <li>Single Source of Truth</li>\n      <li>Name Things Well</li>\n      <li>Make Big Things Small</li>\n    </ul>\n  </li>\n  <li>Responsive Sass Techniques\n    <ul>\n      <li><a href=\"/sass/rwd-sass-media-queries\">Media Queries</a></li>\n      <li><a href=\"/sass/rwd-sass-typography\">Typography</a></li>\n      <li><a href=\"/sass/rwd-sass-grids\">Grids</a></li>\n      <li><a href=\"/sass/rwd-sass-animation\">Animation</a></li>\n    </ul>\n  </li>\n</ol>\n\n<p>Links to individual posts are in the outline above. Enjoy!</p>\n",
      "url": "http://localhost:4000/sass/rwd-sass/",
      "summary": "Overview of RWD Summit Talk on using Sass to simply responsive web design.",
      "date_published": "2016-03-29 00:00:00 -0600"
      
    },
  
    {
      "id": "/misc/letsencrypt-vesta",
      "title": "Setting Up Let’s Encrypt with VestaCP on Digital Ocean",
      "content_html": "<p>Ok, I’ll be totally honest here. I’m writing this post mostly for myself: I need an easy place to keep these instructions for setting up new SSL certificates. If they help you, that’s awesome. If not, hopefully there’s <a href=\"https://jdsteinbach.com\">another post here</a> that you can learn from.</p>\n\n<h2 id=\"installing-lets-encrypt\">Installing Let’s Encrypt</h2>\n\n<p>First step: install the Let’s Encrypt tool on your server. SSH into your server, <code class=\"highlighter-rouge\">cd</code> to the root dir (where you probably landed as soon as you SSHed in), and run the these commands:</p>\n\n<div class=\"language-bash highlighter-rouge\"><pre class=\"highlight\"><code>git clone https://github.com/letsencrypt/letsencrypt\n<span class=\"nb\">cd </span>letsencrypt\n./letsencrypt-auto --help\n</code></pre>\n</div>\n\n<p>This will take time to install a bunch of packages, then give you a success message. You should only does these steps once. Every time you want to secure another domain on your VestaCP account, follow the next section.</p>\n\n<h2 id=\"adding-lets-encrypt-certificates\">Adding Let’s Encrypt Certificates</h2>\n\n<p>In all of these commands, replace <code class=\"highlighter-rouge\">DOMAIN_GOES_HERE</code> with the domain you want to secure and <code class=\"highlighter-rouge\">YOUR_VESTA_USERNAME</code> with your VestaCP username.</p>\n\n<h3 id=\"installing-the-certificate\">Installing the Certificate</h3>\n\n<p>The following command will create the necessary certificates. You should still be in the <code class=\"highlighter-rouge\">/letsencrypt/</code> directory where you ran the last command above. When you run this command, the UI will ask you for an email address to use for this certificate and to agree to the Terms of Service.</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>./letsencrypt-auto certonly -a webroot --renew-by-default --webroot-path /home/YOUR_VESTA_USERNAME/web/DOMAIN_GOES_HERE/public_html -d DOMAIN_GOES_HERE\n</code></pre>\n</div>\n\n<p>That command created several files in on your server. You’ll need to copy the contents of those files to your VestaCP admin page for that domain. In Vesta, edit the domain, check the button for “SSL Support” – you’ll then see three new fields.</p>\n\n<h3 id=\"copying-cert-files-to-vestacp\">Copying Cert Files to VestaCP</h3>\n\n<p>To view those files’ contents, run the following commands, then copy the file contents to the appropriate field:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>cat /etc/letsencrypt/live/DOMAIN_GOES_HERE/cert.pem\n</code></pre>\n</div>\n\n<p>^ Copy contents into “SSL Certificate” field.</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>cat /etc/letsencrypt/live/DOMAIN_GOES_HERE/privkey.pem\n</code></pre>\n</div>\n\n<p>^ Copy contents into “SSL Key” field.</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>cat /etc/letsencrypt/live/DOMAIN_GOES_HERE/chain.pem\n</code></pre>\n</div>\n\n<p>^ Copy contents into “SSL Certificate Authority” field.</p>\n\n<h3 id=\"symlinks-to-the-original-files\">Symlinks to the Original Files</h3>\n\n<p>The previous steps saved those details to a series of files in <code class=\"highlighter-rouge\">/home/USERNAME/conf/web/</code> you’ll actually remove all those files next:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>rm /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.<span class=\"k\">*</span>\n</code></pre>\n</div>\n\n<p>In place of those files you just deleted, you’ll now create a series of symlinks to the originals created by Let’s Encrypt:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>ln -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/fullchain.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.pem\nln -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/privkey.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.key\nln -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/cert.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.crt\nln -s /etc/letsencrypt/live/DOMAIN_GOES_HERE/chain.pem /home/YOUR_VESTA_USERNAME/conf/web/ssl.DOMAIN_GOES_HERE.ca\n</code></pre>\n</div>\n\n<p>Once this is done, restart your nginx and Apache servers:</p>\n\n<div class=\"language-shell highlighter-rouge\"><pre class=\"highlight\"><code>service nginx restart\nservice apache2 restart\n</code></pre>\n</div>\n\n<p>Check out your domain now, and it should be secure!</p>\n",
      "url": "http://localhost:4000/misc/letsencrypt-vesta/",
      "summary": "Instructions for adding new Let’s Encrypt SSL certs to domains managed by VestaCP on a Digital Ocean (Ubuntu 14) server.",
      "date_published": "2016-03-07 00:00:00 -0700"
      
    },
  
    {
      "id": "/sass/numbered-headings",
      "title": "CSS (Sass) for Content-Agnostic Numbered Headings",
      "content_html": "<p>You’re writing a blog post or other HTML document and you want to number your <code class=\"highlighter-rouge\">h2</code> and <code class=\"highlighter-rouge\">h3</code> elements to give users a sense of where they are in the page’s logical flow. Or perhaps you’re maintaining legal content or technical documentation that needs to have numbered <code class=\"highlighter-rouge\">h2</code>, <code class=\"highlighter-rouge\">h3</code>, etc elements. I suppose you could nest the content of your entire document in a bunch of nested lists, or you could write the outline-style numbering by hand. Or … perhaps there’s a better way that only requires CSS.</p>\n\n<p>We’ll start by checkout the code that makes this happen. What you see below is a Sass mixin, but you can do this with just the CSS output if you like.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@mixin</span> <span class=\"nf\">generate-outline</span><span class=\"p\">(</span><span class=\"nv\">$reset-element</span><span class=\"o\">:</span> <span class=\"n\">body</span><span class=\"o\">,</span> <span class=\"nv\">$list-style</span><span class=\"o\">:</span> <span class=\"nb\">decimal</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nv\">$counter</span><span class=\"p\">:</span> <span class=\"nf\">unique-id</span><span class=\"p\">();</span>\n\n  <span class=\"nl\">counter-increment</span><span class=\"p\">:</span> <span class=\"nv\">$counter</span><span class=\"p\">;</span>\n\n  <span class=\"err\">&amp;</span><span class=\"p\">:</span><span class=\"o\">:</span><span class=\"n\">before</span> <span class=\"p\">{</span>\n    <span class=\"nl\">content</span><span class=\"p\">:</span> <span class=\"nf\">counter</span><span class=\"p\">(</span><span class=\"nv\">$counter</span><span class=\"o\">,</span> <span class=\"nv\">$list-style</span><span class=\"p\">)</span><span class=\"s1\">'. '</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"k\">@at-root</span> <span class=\"p\">{</span>\n    <span class=\"si\">#{</span><span class=\"nv\">$reset-element</span><span class=\"si\">}</span> <span class=\"p\">{</span>\n      <span class=\"nl\">counter-reset</span><span class=\"p\">:</span> <span class=\"nv\">$counter</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// How to use it\n</span><span class=\"nt\">h2</span> <span class=\"p\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">generate-outline</span><span class=\"p\">(</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"nb\">upper-alpha</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">h3</span> <span class=\"p\">{</span>\n  <span class=\"k\">@include</span> <span class=\"nd\">generate-outline</span><span class=\"p\">(</span><span class=\"n\">h2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"setting-up-defaults\">Setting Up Defaults</h2>\n\n<p>You’ll use the <code class=\"highlighter-rouge\">generate-outline()</code> mixin on each selector you want to number. The mixin takes two optional arguments: <code class=\"highlighter-rouge\">$reset-element</code> and <code class=\"highlighter-rouge\">$list-style</code>. <code class=\"highlighter-rouge\">$reset-element</code> is the selector that you want to restart your numbering at. For example, if you want to number your <code class=\"highlighter-rouge\">h3</code> elements, but restart that count everytime your markup includes an <code class=\"highlighter-rouge\">h2</code>, you would call <code class=\"highlighter-rouge\">@include generate-outline(h2);</code> in your <code class=\"highlighter-rouge\">h3</code> declaration block. If you leave <code class=\"highlighter-rouge\">$reset-element</code> empty, the mixin will default to <code class=\"highlighter-rouge\">body</code>.</p>\n\n<p>The second argument is <code class=\"highlighter-rouge\">$list-style</code> and should be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/list-style-type#Values\">valid value for the CSS <code class=\"highlighter-rouge\">list-style-type</code> property</a>. If you leave it blank, <code class=\"highlighter-rouge\">$list-style</code> will default to <code class=\"highlighter-rouge\">decimal</code>.</p>\n\n<h2 id=\"using-css-counters\">Using CSS Counters</h2>\n\n<p>The Sass mixin <code class=\"highlighter-rouge\">generate-outline()</code> automates the use of CSS counters. There are 3 CSS properties we need to use to see counters in action.</p>\n\n<p>Each level of counter needs a unique name. In the Sass above, we’re creating that name by using the Sass <a href=\"http://sass-lang.com/documentation/Sass/Script/Functions.html#miscellaneous_functions\"><code class=\"highlighter-rouge\">unique-id()</code> function</a>. If you’re just using CSS, you’ll need to choose a different name for each level of numbering.</p>\n\n<p>We can increment that counter by using <code class=\"highlighter-rouge\">counter-increment: $name;</code> on the element that’ll show the counter’s number.</p>\n\n<p>We’ll use the <code class=\"highlighter-rouge\">::before</code> pseudoelement and the CSS <code class=\"highlighter-rouge\">content</code> property to display that counter on each heading: <code class=\"highlighter-rouge\">content: counter($name)'. ';</code>. Notice that we’re putting the string <code class=\"highlighter-rouge\">'. '</code> on the end of each number. This makes sure we get “A. Heading” instead of “AHeading.”</p>\n\n<p>For the 2nd level of numbered headings, we’ll need to reset that counter every time an element in the 1st level of headings goes by. The Sass mixin gets the position of the current level in the <code class=\"highlighter-rouge\">$headings</code> map - if it’s a 2nd (or deeper) level counter, the mixin will get the next element above it, and use that element to reset the counter. If the current element is the first element in the loop, the mixin will just attach <code class=\"highlighter-rouge\">counter-reset: $name;</code> to the <code class=\"highlighter-rouge\">body</code> element.</p>\n\n<h2 id=\"output-numbered-headings\">Output: Numbered Headings</h2>\n\n<p>With the CSS we’ve just generated, we’ve attached an A, B, C numbering system to all <code class=\"highlighter-rouge\">h2</code> elements in the page, and a 1, 2, 3 numbering system to all <code class=\"highlighter-rouge\">h3</code> elements in the page. This system doesn’t care what else you’ve got in your page: any paragraphs, blockquotes, other heading levels, images, etc – none of that affects this CSS’s ability to number <code class=\"highlighter-rouge\">h2</code> and <code class=\"highlighter-rouge\">h3</code> elements sequentially.</p>\n\n<p>You can see this code in action on <a href=\"http://codepen.io/jdsteinbach/pen/vLqwjB\">this CodePen</a>.</p>\n\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"vLqwjB\" data-default-tab=\"result\" data-user=\"jdsteinbach\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jdsteinbach/pen/vLqwjB/\">Sass / CSS for Numbered Document Headings</a> by James Steinbach (<a href=\"http://codepen.io/jdsteinbach\">@jdsteinbach</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n",
      "url": "http://localhost:4000/sass/numbered-headings/",
      "summary": "<p>You’re writing a blog post or other HTML document and you want to number your <code class=\"highlighter-rouge\">h2</code> and <code class=\"highlighter-rouge\">h3</code> elements to give users a sense of where they are in the page’s logical flow. Or perhaps you’re maintaining legal content or technical documentation that needs to have numbered <code class=\"highlighter-rouge\">h2</code>, <code class=\"highlighter-rouge\">h3</code>, etc elements. I suppose you could nest the content of your entire document in a bunch of nested lists, or you could write the outline-style numbering by hand. Or … perhaps there’s a better way that only requires CSS.</p>\n",
      "date_published": "2016-02-22 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/firefox-flexbox-bug",
      "title": "Firefox Flexbox Bug - Percent-Based Padding/Margin",
      "content_html": "<style>\n.parent {\n  background: rgba(255,255,255,.5);\n  margin: 1em auto;\n  max-width: 90%;\n  padding: 1em;\n}\n.parent::before, .parent::after {\n  clear: both;\n  content: '';\n  display: block;\n  width: 100%;\n}\n.child {\n  background: #fff url(//unsplash.it/600/300) center top/contain no-repeat;\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.5);\n  float: left;\n  margin-bottom: 4%;\n  margin-right: 4%;\n  padding-top: 24%;\n  width: 48%;\n}\n.child:nth-child(2n) {\n  margin-right: 0;\n}\n.child:nth-child(2n + 1) {\n  clear: left;\n}\n.post-content .child p {\n  color: #444;\n  padding: .5em 1em;\n  line-height: 1.3;\n}\n.parent-2 {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: row;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-flex-wrap: wrap;\n      -ms-flex-wrap: wrap;\n          flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n}\n.child-2 {\n  float: none;\n  -webkit-box-flex: 0;\n  -webkit-flex: 0 1 48%;\n      -ms-flex: 0 1 48%;\n          flex: 0 1 48%;\n}\n.child-3 {\n  background: #fff;\n  padding-top: 0;\n}\n.child-3::before {\n  background: #fff url(//unsplash.it/600/300) center top/cover no-repeat;\n  content: '';\n  display: block;\n  padding-top: 50%;\n}\n</style>\n\n<p>You may be familiar with the trick of using <code>padding-top: X%</code> + background-image to create a box whose size (and contained media) is controlled by an aspect ratio. If not, <a href=\"http://alistapart.com/d/creating-intrinsic-ratios-for-video/example2.html\" target=\"_blank\">read this</a>.</p>\n<p>The two rows below show this trick in action. In the first row, the 2-col layout is controlled by %-width and float. It behaves as expected in modern browsers. The downside, of course, is that the column heights don't line up.</p>\n<div class=\"parent\">\n  <div class=\"child\">\n    <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>\n  </div>\n  <div class=\"child\">\n    <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n  </div>\n  <div class=\"child\">\n    <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>\n  </div>\n  <div class=\"child\">\n    <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n  </div>\n</div>\n<p>To get the columns to line up like we want, we can bring in a little flexbox as in the 2nd row. Now our columns have the same height, but Firefox loses its ability to calculate %-based padding. It also loses its %-based margin-bottom.</p>\n<div class=\"parent parent-2\">\n  <div class=\"child child-2\">\n    <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>\n  </div>\n  <div class=\"child child-2\">\n    <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n  </div>\n  <div class=\"child child-2\">\n    <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>\n  </div>\n  <div class=\"child child-2\">\n    <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n  </div>\n</div>\n<p>The quickest solution (in my opinion) is to move the aspect-ratio-controlled box to something besides the flexbox -child. In the 3rd row, the aspect ratio <code>padding-top</code> and <code>background-image</code> have been moved to the <code>::before</code> pseudo-element. Firefox now calculates the %-based padding correctly.</p>\n<p><i>Note: earlier, the <code>padding-top</code> value was 24% (50% of 48%) since it's calculated based on the element's parent's width. Since the pseudo-element is 100% of its parent's width, we use <code>padding-top: 50%;</code> to get the right value (50% of 100%).</i></p>\n<div class=\"parent parent-2\">\n  <div class=\"child child-3\">\n    <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>\n  </div>\n  <div class=\"child child-3\">\n    <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n  </div>\n  <div class=\"child child-3\">\n    <p>Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.</p>\n  </div>\n  <div class=\"child child-3\">\n    <p>Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Maecenas sed diam eget risus varius blandit sit amet non magna.</p>\n  </div>\n</div>\n",
      "url": "http://localhost:4000/css/firefox-flexbox-bug/",
      "summary": "<style>\n.parent {\n  background: rgba(255,255,255,.5);\n  margin: 1em auto;\n  max-width: 90%;\n  padding: 1em;\n}\n.parent::before, .parent::after {\n  clear: both;\n  content: '';\n  display: block;\n  width: 100%;\n}\n.child {\n  background: #fff url(//unsplash.it/600/300) center top/contain no-repeat;\n  box-shadow: 0 0 3px 0 rgba(0, 0, 0, 0.5);\n  float: left;\n  margin-bottom: 4%;\n  margin-right: 4%;\n  padding-top: 24%;\n  width: 48%;\n}\n.child:nth-child(2n) {\n  margin-right: 0;\n}\n.child:nth-child(2n + 1) {\n  clear: left;\n}\n.post-content .child p {\n  color: #444;\n  padding: .5em 1em;\n  line-height: 1.3;\n}\n.parent-2 {\n  display: -webkit-box;\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -webkit-flex-direction: row;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-flex-wrap: wrap;\n      -ms-flex-wrap: wrap;\n          flex-wrap: wrap;\n  -webkit-box-pack: justify;\n  -webkit-justify-content: space-between;\n      -ms-flex-pack: justify;\n          justify-content: space-between;\n}\n.child-2 {\n  float: none;\n  -webkit-box-flex: 0;\n  -webkit-flex: 0 1 48%;\n      -ms-flex: 0 1 48%;\n          flex: 0 1 48%;\n}\n.child-3 {\n  background: #fff;\n  padding-top: 0;\n}\n.child-3::before {\n  background: #fff url(//unsplash.it/600/300) center top/cover no-repeat;\n  content: '';\n  display: block;\n  padding-top: 50%;\n}\n</style>\n\n",
      "date_published": "2016-02-22 00:00:00 -0700"
      
    },
  
    {
      "id": "/wordpress/wordpress-automatic-copyright-years",
      "title": "WordPress Function for Automatically Updating Copyright Years",
      "content_html": "<p>Well, I gave away the whole point of this post in the title. Before we dive in and look at the whole code, I’ll explain the purpose of this function. A lot of posts will recommend you simply put <code class=\"highlighter-rouge\">&lt;?php echo date( 'Y' ); ?&gt;</code> where the year is hardcoded into <code class=\"highlighter-rouge\">footer.php</code>. That’s fine, but it only gives you <em>this year</em> in your footer. It’s better to put the <a href=\"http://info.legalzoom.com/write-copyright-statement-website-21115.html\">range of years that your site’s content spans</a>, not merely the current year. The function we’ll look at here will display the entire range of years for all the posts and pages published on your site.</p>\n\n<p><em><a href=\"https://gist.github.com/jdsteinbach/e2646846ede81458f0c4\">Get the raw code from this Github gist</a>.</em></p>\n\n<h2 id=\"adding-the-copyright_years-function-to-your-theme\">Adding the <code class=\"highlighter-rouge\">copyright_years()</code> function to your theme</h2>\n\n<p>Let’s take a look at the code you’ll need to copy into your theme’s <code class=\"highlighter-rouge\">functions.php</code> file (without the open/close PHP tags):</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?php</span>\n<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span> <span class=\"nb\">function_exists</span><span class=\"p\">(</span> <span class=\"s1\">'get_copyright_years'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">function</span> <span class=\"nf\">get_copyright_years</span><span class=\"p\">(</span> <span class=\"nv\">$earliest_id</span> <span class=\"o\">=</span> <span class=\"kc\">null</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nv\">$earliest_args</span> <span class=\"o\">=</span> <span class=\"k\">array</span><span class=\"p\">(</span>\n      <span class=\"s1\">'post_type'</span>   <span class=\"o\">=&gt;</span> <span class=\"k\">array</span><span class=\"p\">(</span> <span class=\"s1\">'any'</span> <span class=\"p\">),</span>\n      <span class=\"s1\">'numberposts'</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n      <span class=\"s1\">'orderby'</span>     <span class=\"o\">=&gt;</span> <span class=\"s1\">'date'</span><span class=\"p\">,</span>\n      <span class=\"s1\">'order'</span>       <span class=\"o\">=&gt;</span> <span class=\"s1\">'ASC'</span>\n    <span class=\"p\">);</span>\n    <span class=\"nv\">$get_post</span>      <span class=\"o\">=</span> <span class=\"nv\">$earliest_id</span>\n                   <span class=\"o\">?</span> <span class=\"nx\">get_post</span><span class=\"p\">(</span> <span class=\"nv\">$earliest_id</span> <span class=\"p\">)</span>\n                   <span class=\"o\">:</span> <span class=\"kc\">null</span><span class=\"p\">;</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span> <span class=\"nv\">$get_post</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"nv\">$get_post</span> <span class=\"o\">=</span> <span class=\"nb\">array_shift</span><span class=\"p\">(</span> <span class=\"nx\">get_posts</span><span class=\"p\">(</span> <span class=\"nv\">$earliest_args</span> <span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"nv\">$earliest_date</span> <span class=\"o\">=</span> <span class=\"nb\">date</span><span class=\"p\">(</span> <span class=\"s1\">'Y'</span><span class=\"p\">,</span> <span class=\"nb\">strtotime</span><span class=\"p\">(</span> <span class=\"nv\">$get_post</span><span class=\"o\">-&gt;</span><span class=\"na\">post_date</span> <span class=\"p\">)</span> <span class=\"p\">);</span>\n    <span class=\"nv\">$current_date</span>  <span class=\"o\">=</span> <span class=\"nb\">date</span><span class=\"p\">(</span> <span class=\"s1\">'Y'</span> <span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"nv\">$earliest_date</span> <span class=\"o\">==</span> <span class=\"nv\">$current_date</span>\n           <span class=\"o\">?</span> <span class=\"nv\">$current_date</span>\n           <span class=\"o\">:</span> <span class=\"nv\">$earliest_date</span> <span class=\"o\">.</span> <span class=\"s1\">'&amp;ndash;'</span> <span class=\"o\">.</span> <span class=\"nv\">$current_date</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span> <span class=\"nb\">function_exists</span><span class=\"p\">(</span> <span class=\"s1\">'copyright_years'</span> <span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">function</span> <span class=\"nf\">copyright_years</span><span class=\"p\">(</span> <span class=\"nv\">$earliest_id</span> <span class=\"o\">=</span> <span class=\"kc\">null</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">echo</span> <span class=\"nx\">get_copyright_years</span><span class=\"p\">(</span> <span class=\"nv\">$earliest_id</span> <span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"cp\">?&gt;</span>\n</code></pre>\n</div>\n\n<p>After you’ve added those two functions to <code class=\"highlighter-rouge\">functions.php</code>, open <code class=\"highlighter-rouge\">footer.php</code> and delete the year if it’s hardcoded in. Replace it with <code class=\"highlighter-rouge\">&lt;?php copyright_years(); ?&gt;</code>. This function only shows the years, no © or other text: you can keep whatever copyright / “all rights reserved” text you like.</p>\n\n<h2 id=\"using-the-copyright_years-function-in-your-footer\">Using the <code class=\"highlighter-rouge\">copyright_years()</code> function in your footer</h2>\n\n<p>The first thing I should point out is that there are actually two functions here. The first function is <code class=\"highlighter-rouge\">get_copyright_years()</code> and only <em>returns</em> the date range. The second function is <code class=\"highlighter-rouge\">copyright_years()</code> and <em>echoes</em> the date range. If you’re going to use this function in plain HTML in your footer file, use <code class=\"highlighter-rouge\">&lt;?php copyright_years(); ?&gt;</code>:</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;footer</span> <span class=\"na\">class=</span><span class=\"s\">\"site-footer\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"footer-credits\"</span><span class=\"nt\">&gt;</span><span class=\"ni\">&amp;copy;</span> <span class=\"cp\">&lt;?php</span> <span class=\"nx\">copyright_years</span><span class=\"p\">();</span> <span class=\"cp\">?&gt;</span>. All Rights Reserved.<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/footer&gt;</span>\n<span class=\"cp\">&lt;?php</span> <span class=\"nx\">wp_footer</span><span class=\"p\">();</span><span class=\"cp\">?&gt;</span>\n</code></pre>\n</div>\n\n<p>If you’re going to use this function in a line of PHP in your footer file, use <code class=\"highlighter-rouge\">get_copyright_years()</code> instead. The following code shows how you might use it inside a translatable string function:</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;footer</span> <span class=\"na\">class=</span><span class=\"s\">\"site-footer\"</span><span class=\"nt\">&gt;</span>\n\t<span class=\"nt\">&lt;p</span> <span class=\"na\">class=</span><span class=\"s\">\"footer-credits\"</span><span class=\"nt\">&gt;</span>\n\t\t<span class=\"cp\">&lt;?php</span> <span class=\"nb\">printf</span><span class=\"p\">(</span> <span class=\"nx\">__</span><span class=\"p\">(</span> <span class=\"s1\">'&amp;copy; %s. All Rights Reserved.'</span><span class=\"p\">,</span> <span class=\"s1\">'text-domain'</span> <span class=\"p\">),</span> <span class=\"nx\">get_copyright_years</span><span class=\"p\">()</span> <span class=\"p\">);</span> <span class=\"cp\">?&gt;</span>\n\t<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/footer&gt;</span>\n<span class=\"cp\">&lt;?php</span> <span class=\"nx\">wp_footer</span><span class=\"p\">();</span><span class=\"cp\">?&gt;</span>\n</code></pre>\n</div>\n\n<p>Technically you’re done now, you can quit reading this post. But if you’re curious how this function works, stay with me.</p>\n\n<h2 id=\"what-the-copyright_years-function-actually-does\">What the <code class=\"highlighter-rouge\">copyright_years()</code> function actually does</h2>\n\n<p>So now that you know the basics of using this function, let’s look under the hood and learn how it works.</p>\n\n<h3 id=\"getting-the-earliest-post\">Getting the earliest post</h3>\n\n<p>You may have noticed this function takes a single argument: <code class=\"highlighter-rouge\">$earliest_id</code>. Normally the function returns the publication date for the earliest post or page published, but if you want to override that by specifying a specific post or page as the “earliest published,” pass its ID in the function in <code class=\"highlighter-rouge\">footer.php</code>.</p>\n\n<p>The first thing in the function is <code class=\"highlighter-rouge\">$earliest_args</code>: an array of <a href=\"https://codex.wordpress.org/Template_Tags/get_posts\"><code class=\"highlighter-rouge\">get_posts()</code></a> args. If you haven’t specified an override <code class=\"highlighter-rouge\">$earliest_id</code>, the function will use these arguments to query the oldest post or page from the database.</p>\n\n<p>The <code class=\"highlighter-rouge\">$get_post</code> declaration uses <a href=\"http://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\">PHP ternary logic</a>. If <code class=\"highlighter-rouge\">$earliest_id</code> is set, <code class=\"highlighter-rouge\">$get_post</code> will contain the output of the function <code class=\"highlighter-rouge\">get_post( $earliest_id )</code>, otherwise, it will be <code class=\"highlighter-rouge\">null</code>.</p>\n\n<p>At this point, <code class=\"highlighter-rouge\">$get_post</code> will either be a single post object (if you specified a valid <code class=\"highlighter-rouge\">$earliest_id</code>) or <code class=\"highlighter-rouge\">null</code> (if you specified an invalid ID or none at all). If it’s <code class=\"highlighter-rouge\">null</code>, we’ll run our fallback <code class=\"highlighter-rouge\">get_posts( $earliest_args )</code> function. This will return an array containing a single post objects. We only want the post object, so we’ll wrap <code class=\"highlighter-rouge\">get_posts()</code> in <a href=\"http://php.net/manual/en/function.array-shift.php\"><code class=\"highlighter-rouge\">array_shift()</code></a>. The PHP function <code class=\"highlighter-rouge\">array_shift()</code> will return only the first object in the array. <em>Note: <a href=\"http://php.net/manual/en/function.array-pop.php\"><code class=\"highlighter-rouge\">array_pop()</code></a> would’ve done the same thing, since there’s only one object in the array.</em></p>\n\n<h3 id=\"comparing-the-years\">Comparing the years</h3>\n\n<p>Now no matter what argument you did or didn’t pass into the function, <code class=\"highlighter-rouge\">$get_post</code> is a WordPress post object containing the post or page we want to use for the earliest piece of published content.</p>\n\n<p>The next two variables (<code class=\"highlighter-rouge\">$earliest_date</code> and <code class=\"highlighter-rouge\">$current_date</code>) use the PHP date function to get the year from <code class=\"highlighter-rouge\">$get_post</code> and the current year.</p>\n\n<p>The <code class=\"highlighter-rouge\">return</code> statement uses ternary logic again. If <code class=\"highlighter-rouge\">$earliest_date</code> and <code class=\"highlighter-rouge\">$current_date</code> are the same, the function will return only the current year. If they’re different, it will return the earliest year, a dash (–), then the current year.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Put these functions in your theme <code class=\"highlighter-rouge\">functions.php</code> and call the right function from <code class=\"highlighter-rouge\">footer.php</code>, and you’ve now got an always-correct copyright date range in the footer of your site. No more January updates for you! (Unless, of course, you change your theme: in that case, you’ll need to put these functions where they belong in that theme too.)</p>\n\n<p><em><a href=\"https://gist.github.com/jdsteinbach/e2646846ede81458f0c4\">Get the raw code from this Github gist</a>.</em></p>\n",
      "url": "http://localhost:4000/wordpress/function-automatically-update-copyright-years/",
      "summary": "<p>Well, I gave away the whole point of this post in the title. Before we dive in and look at the whole code, I’ll explain the purpose of this function. A lot of posts will recommend you simply put <code class=\"highlighter-rouge\">&lt;?php echo date( 'Y' ); ?&gt;</code> where the year is hardcoded into <code class=\"highlighter-rouge\">footer.php</code>. That’s fine, but it only gives you <em>this year</em> in your footer. It’s better to put the <a href=\"http://info.legalzoom.com/write-copyright-statement-website-21115.html\">range of years that your site’s content spans</a>, not merely the current year. The function we’ll look at here will display the entire range of years for all the posts and pages published on your site.</p>\n",
      "date_published": "2016-01-29 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/front-end-web-development-resources",
      "title": "Front-End Web Development Resources",
      "content_html": "<p>If you’re a developer, you know that keeping up with the speed of our industry can feel overwhelming. Here’s a list of the front-end development resources I rely on to stay up-to-date. Items marked with an asterisk (*) are particularly good, in my opinion.</p>\n\n<h2 id=\"newsletters\">Newsletters</h2>\n\n<h3 id=\"smashing-magazine\"><a href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\">Smashing Magazine</a>*</h3>\n\n<p>Bi-weekly collection of all-around development articles, topics include CSS, JS, design, UI &amp; UX.</p>\n\n<h3 id=\"sidebar\"><a href=\"https://sidebar.io/\">Sidebar</a>*</h3>\n\n<p>Daily email with 5 links related to design, development &amp; tech.</p>\n\n<h3 id=\"responsive-design-weekly\"><a href=\"http://responsivedesignweekly.com/\">Responsive Design Weekly</a>*</h3>\n\n<p>Weekly list of responsive design links, includes interviews, tutorials &amp; libraries.</p>\n\n<h3 id=\"css-layout-news\"><a href=\"http://csslayout.news/\">CSS Layout News</a>*</h3>\n\n<p>Weekly email from <a href=\"https://twitter.com/rachelandrew\">Rachel Andrew</a> with news, tutorials, case studies and articles about CSS Grid, Flexbox and other layout techniques.</p>\n\n<h3 id=\"ui-animation-newsletter\"><a href=\"http://uianimationnewsletter.com/\">UI Animation Newsletter</a>*</h3>\n\n<p>Weekly email with from <a href=\"https://twitter.com/vlh\">Val Head</a> UI animation inspiration &amp; tutorials.</p>\n\n<h3 id=\"web-animation-weekly\"><a href=\"http://webanimationweekly.com/\">Web Animation Weekly</a>*</h3>\n\n<p>Weekly email with from <a href=\"https://twitter.com/rachelnabors\">Rachel Nabors</a> UI animation inspiration &amp; tutorials.</p>\n\n<h3 id=\"front-end-newsletter\"><a href=\"#mc_embed_signup\">Front-End Newsletter</a>*</h3>\n\n<p>Weekly email with front-end links about HTML, CSS, JS, fonts, UI/UX, and more! (Curated by me!)</p>\n\n<h3 id=\"sass-news\"><a href=\"http://sass.news/\">Sass News</a>*</h3>\n\n<p>Weekly email of Sass-related links, includes articles, tutorials, &amp; events.</p>\n\n<h3 id=\"css-weekly\"><a href=\"http://css-weekly.com/\">CSS Weekly</a></h3>\n\n<p>Weekly email of CSS links, includes tutorials, articles &amp; CSS3 advances.</p>\n\n<h3 id=\"web-design-weekly\"><a href=\"http://web-design-weekly.com/\">Web Design Weekly</a></h3>\n\n<p>Weekly email, includes HTML, CSS, pre-processors &amp; JS.</p>\n\n<h3 id=\"html5-weekly\"><a href=\"http://html5weekly.com/\">HTML5 Weekly</a></h3>\n\n<p>Weekly list of HTML5 links, includes spec discussions, polyfills &amp; job postings.</p>\n\n<h3 id=\"javascript-weekly\"><a href=\"http://javascriptweekly.com\">JavaScript Weekly</a></h3>\n\n<p>Weekly list of JS links, includes browser API news, tutorials, and polyfills.</p>\n\n<h3 id=\"web-tools-weekly\"><a href=\"http://webtoolsweekly.com/\">Web Tools Weekly</a></h3>\n\n<p>Weekly curation of links, focused on JS &amp; CSS libraries or frameworks.</p>\n\n<h3 id=\"ewebdesign\"><a href=\"http://ewebdesign.com/\">eWebDesign</a></h3>\n\n<p>Collection of web design resources, includes free downloads, inspiration &amp; tutorials.</p>\n\n<h3 id=\"wpmailme\"><a href=\"http://wpmail.me/\">WPMail.me</a>*</h3>\n\n<p>Weekly list of WordPress links, includes news, tutorials, themes &amp; plugins.</p>\n\n<h2 id=\"blogs\">Blogs</h2>\n\n<h3 id=\"smashing-magazine-1\"><a href=\"http://www.smashingmagazine.com/\">Smashing Magazine</a>*</h3>\n\n<p>Articles and tutorials in the following topics: coding, design, mobile, graphics, UX design &amp; WordPress.</p>\n\n<h3 id=\"css-tricks\"><a href=\"https://css-tricks.com/\">CSS-Tricks</a>*</h3>\n\n<p>All about CSS, written by <a href=\"https://twitter.com/chriscoyier\">Chris Coyier</a> and a number of industry-expert guest authors.</p>\n\n<h3 id=\"brad-frost-web\"><a href=\"http://bradfrostweb.com/\">Brad Frost Web</a>*</h3>\n\n<p><a href=\"https://twitter.com/brad_frost\">Brad Frost</a> writes great articles on content-first, responsive web design.</p>\n\n<h3 id=\"a-list-apart\"><a href=\"http://alistapart.com/\">A List Apart</a>*</h3>\n\n<p>Articles and tutorials on a wide range of topics including code, content, design &amp; business.</p>\n\n<h3 id=\"css-wizardry\"><a href=\"https://csswizardry.com/\">CSS Wizardry</a>*</h3>\n\n<p><a href=\"https://twitter.com/csswizardry\">Harry Roberts</a>’ blog on CSS best practices.</p>\n\n<h3 id=\"sitepoint\"><a href=\"http://www.sitepoint.com/\">SitePoint</a></h3>\n\n<p>Articles on a wide variety of topics, including several languages (HTML, CSS/Sass, JS, PHP, Ruby), WordPress, UX &amp; design. <a href=\"http://www.sitepoint.com/author/jsteinbach/\">I’ve written for SitePoint</a>.</p>\n\n<h3 id=\"david-walsh-blog\"><a href=\"https://davidwalsh.name/\">David Walsh Blog</a></h3>\n\n<p>Articles and tutorials, primarily covering JS &amp; CSS topics.</p>\n\n<h3 id=\"cloud-four-blog\"><a href=\"https://blog.cloudfour.com/\">Cloud Four Blog</a></h3>\n\n<p>Helpful articles and tutorials on solving common development problems.</p>\n\n<h3 id=\"elliot-jay-stocks\"><a href=\"http://www.elliotjaystocks.com/blog/\">Elliot Jay Stocks</a></h3>\n\n<p>Web developers with a penchant for typography should read this blog.</p>\n\n<h3 id=\"typekit-practice\"><a href=\"http://practice.typekit.com/\">Typekit Practice</a>*</h3>\n\n<p>Practical case studies for using web fonts well.</p>\n\n<h3 id=\"james-steinbach-blog\"><a href=\"/\">James Steinbach</a> Blog*</h3>\n\n<p>Oh right, you’re already here. I write about CSS/Sass, WordPress and other front-end topics.</p>\n\n<h2 id=\"reference-sites\">Reference Sites</h2>\n\n<h3 id=\"mdn\"><a href=\"https://developer.mozilla.org/en-US/\">MDN</a>*</h3>\n\n<p>If you haven’t blocked w3schools from your search results, please do. Instead, use MDN. It’s a fantastic resource for looking up almost anything in HTML, CSS &amp; JS and getting an accurate, organized description of what it does.</p>\n\n<h3 id=\"css-tricks-almanac\"><a href=\"https://css-tricks.com/almanac/\">CSS-Tricks Almanac</a></h3>\n\n<p>Look up any CSS property and get a useful description of what values it takes and what it does.</p>\n\n<h3 id=\"css-guidelines\"><a href=\"http://cssguidelin.es/\">CSS Guidelines</a>*</h3>\n\n<p>This is a great guideline for writing clean, maintainable CSS. It’s a guideline, not a law, but in my opinion, it’s largely worth following.</p>\n\n<h3 id=\"sass-guidelines\"><a href=\"https://sass-guidelin.es/\">Sass Guidelines</a>*</h3>\n\n<p>Just like CSS Guidelines, but for Sass.</p>\n\n<h3 id=\"can-i-use\"><a href=\"https://caniuse.com/\">Can I Use</a>*</h3>\n\n<p>Look up any CSS, HTML5, SVG or browser API property and see what browsers support it (and which ones need prefixes or fallbacks).</p>\n\n<h3 id=\"sass-docs\"><a href=\"http://sass-lang.com/\">Sass Docs</a>*</h3>\n\n<p>Everything you need to know about Sass. I learn something new every time I come here.</p>\n\n<h3 id=\"wordpress-codex\"><a href=\"http://codex.wordpress.org/\">WordPress Codex</a></h3>\n\n<p>Invaluable for WP developers. Get all the details on core functions, actions &amp; filters.</p>\n\n<h2 id=\"courses\">Courses</h2>\n\n<h3 id=\"treehouse\"><a href=\"http://teamtreehouse.com/\">Treehouse</a>*</h3>\n\n<p>$25/mo. Interactive code challenges to accompany video instruction. Topics include: HTML, CSS, JS, PHP, Ruby, Design, WordPress, iOS, Android &amp; Business.</p>\n\n<h3 id=\"codecademy\"><a href=\"http://www.codecademy.com/\">Codecademy</a>*</h3>\n\n<p>Free. Write interactive code in the browser as you complete lessons. Topics include: HTML+CSS, JS, jQuery, Python, Ruby &amp; PHP.</p>\n\n<h3 id=\"learnable\"><a href=\"https://learnable.com/home\">Learnable</a></h3>\n\n<p>$29/mo; $149/yr. Screencast videos, PDFs and courses. Topics include: HTML+CSS, JS, PHP, Ruby, Design+UX, Mobile &amp; Workflow.</p>\n\n<h3 id=\"drawar\"><a href=\"https://www.drawar.com/\">Drawar</a>*</h3>\n\n<p>Priced per course. At the time of writing, their <a href=\"https://www.drawar.com/web/course/sass\">Sass course</a> was free. They also have an iOS design course.</p>\n\n<h3 id=\"lynda\"><a href=\"http://www.lynda.com/default.aspx\">Lynda</a></h3>\n\n<p>$25/mo; $250/yr. Video courses on just about any part of web development imaginable.</p>\n\n<h3 id=\"the-lodge-css-tricks\"><a href=\"https://css-tricks.com/lodge/\">The Lodge</a> (CSS Tricks)</h3>\n\n<p>$13/mo to stream, $20/mo to download. Four very practical courses: Mobile-First WordPress Development, Site Redesign Workflow, Learn jQuery, Learn SVG.</p>\n\n<h2 id=\"podcasts\">Podcasts</h2>\n\n<p>Sorry, I don’t listen to many podcasts. Here are the ones I do subscribe to:</p>\n\n<h3 id=\"shoptalk\"><a href=\"http://shoptalkshow.com/\">ShopTalk</a>*</h3>\n\n<p><a href=\"http://chriscoyier.net/\">Chris Coyier</a> &amp; <a href=\"http://daverupert.com/\">Dave Rupert</a> talk about web development with guests. There are also jokes.</p>\n\n<h3 id=\"a-responsive-web-design-podcast\"><a href=\"http://responsivewebdesign.com/podcast/\">A Responsive Web Design Podcast</a></h3>\n\n<p><a href=\"http://responsivewebdesign.com/about/#bio-mcgrane\">Karen McGrane</a> &amp; <a href=\"http://responsivewebdesign.com/about/#bio-marcotte\">Ethan Marcotte</a> interview guests on RWD-related front-end topics.</p>\n\n<h3 id=\"the-web-ahead\"><a href=\"http://5by5.tv/webahead\">The Web Ahead</a></h3>\n\n<p>[Jen Simmons])(http://twitter.com/jensimmons) hosts a podcast to help you keep up with the future of web development.</p>\n\n<h2 id=\"books\">Books</h2>\n\n<h3 id=\"smashing-library\"><a href=\"https://shop.smashingmagazine.com/products/the-smashing-library\">Smashing Library</a>*</h3>\n\n<p>$99/year. Access to several dozen books on great topics: Code, Design, WordPress, Content, Freelancing &amp; Graphics. Subscribing for a year lets you download all previously published books as well as two new books published each month during your subscription (PDF, ePub, Mobi).</p>\n\n<h3 id=\"a-bookapart-library\"><a href=\"http://www.abookapart.com/collections/standards-collection\">A Book Apart Library</a>*</h3>\n\n<p>Eleven books by industry experts on several useful topics: HTML, CSS, Responsive Design, Content Strategy, Sass, Web Typography &amp; more.</p>\n\n<h3 id=\"five-simple-steps\">Five Simple Steps*</h3>\n\n<p>Short but immensely practical books on various topics in web development: HTML email, animations, symbol fonts, performance, accessibility &amp; more. Sadly, they’re no longer publishing / selling books, but <a href=\"https://gist.github.com/jdsteinbach/eea34881bd71fee55ef592006ebc8ae1\">a few books survived</a>.</p>\n\n<h3 id=\"oreilly-books\"><a href=\"http://www.oreilly.com/\">O’Reilly Books</a></h3>\n\n<p>They cover all the major (and many minor) languages in their books.</p>\n\n<h2 id=\"work-in-progress\">Work in Progress</h2>\n\n<p>I’ll be updating this list as I discover more resources. If you find a link that’s broken or leads somewhere unexpected, please let me know. Thanks!</p>\n",
      "url": "http://localhost:4000/css/front-end-web-development-resources/",
      "summary": "<p>If you’re a developer, you know that keeping up with the speed of our industry can feel overwhelming. Here’s a list of the front-end development resources I rely on to stay up-to-date. Items marked with an asterisk (*) are particularly good, in my opinion.</p>\n",
      "date_published": "2016-01-06 00:00:00 -0700"
      
    },
  
    {
      "id": "/sass/sass-extend",
      "title": "When I Use (and Don’t Use) Sass Extend",
      "content_html": "<p>Using Sass’s <code class=\"highlighter-rouge\">@extend</code> directive is one of the more controversial discussions within the Sass community. On one hand, there are developers whose primary concern is the potential for selector bloat that comes with unrestrained use of <code class=\"highlighter-rouge\">@extend</code>. On the other hand, there are developers who understand what <code class=\"highlighter-rouge\">@extend</code> really does and limit their use to avoid the dangers.</p>\n\n<p>I’m in the “use <code class=\"highlighter-rouge\">@extend</code> wisely” team. <a href=\"https://twitter.com/Una/status/664890977505570818\">😀</a> Here are the three limitations I put on my use of <code class=\"highlighter-rouge\">@extend</code>.</p>\n\n<h2 id=\"dont-mix-nesting-and-extends\">Don’t mix nesting and extends.</h2>\n\n<p>Selector bloat is a real concern, but it usually comes from one of two practices: extending a nested selector, or extending a class that’s used more frequently than expected. When there’s nesting on the extended block and the extender’s selector, Sass is forced to create unnecessary duplicates with the nesting:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// Nested Input\n</span><span class=\"nt\">header</span> <span class=\"nc\">.class1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.class2</span> <span class=\"p\">{</span>\n  <span class=\"nt\">footer</span> <span class=\"k\">&amp;</span> <span class=\"p\">{</span>\n    <span class=\"k\">@extend</span> <span class=\"nc\">.class1</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Bloated Output\n</span><span class=\"nt\">header</span> <span class=\"nc\">.class1</span><span class=\"o\">,</span>\n<span class=\"nt\">header</span> <span class=\"nt\">footer</span> <span class=\"nc\">.class2</span><span class=\"o\">,</span>\n<span class=\"nt\">footer</span> <span class=\"nt\">header</span> <span class=\"nc\">.class2</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"only-extend-placeholders\">Only extend placeholders.</h2>\n\n<p>As I mentioned above, the 2nd main cause of <code class=\"highlighter-rouge\">@extend</code> selector bloat is extending a class that’s used more frequently than originally planned or expected. We can solve this concern by limiting <code class=\"highlighter-rouge\">@extend</code> to Sass <code class=\"highlighter-rouge\">%placeholder</code> selectors, and not actual CSS selectors (classes, tags, IDs, attributes, etc). If you try to extend an actual selector, and you or another dev uses that elsewhere in the code, you’ll end up extending all those additional instances of the class.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// Initial Selector to Extend\n</span><span class=\"nc\">.shadow-box</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"m\">2px</span> <span class=\"m\">4px</span> <span class=\"nf\">rgba</span><span class=\"p\">(</span><span class=\"no\">black</span><span class=\"o\">,</span> <span class=\"mi\">.5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Added Later\n</span><span class=\"nc\">.home-page</span> <span class=\"nc\">.shadow-box</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#eee</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// Extender\n</span><span class=\"nc\">.comment-card</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nc\">.shadow-box</span><span class=\"p\">;</span>\n  <span class=\"c1\">// Yikes! I hope .comment-card is\n</span>  <span class=\"c1\">// meant to be #eee on .home-page…\n</span><span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"c1\">// Better\n</span><span class=\"nv\">%shadow-box</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#fff</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"m\">2px</span> <span class=\"m\">4px</span> <span class=\"nf\">rgba</span><span class=\"p\">(</span><span class=\"no\">black</span><span class=\"o\">,</span> <span class=\"mi\">.5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.shadow-box</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nv\">%shadow-box</span><span class=\"p\">;</span>\n\n  <span class=\"nc\">.home-page</span> <span class=\"k\">&amp;</span> <span class=\"p\">{</span>\n    <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"mh\">#eee</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.comment-card</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nv\">%shadow-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"try-to-use-an-actual-selector-instead\">Try to use an actual selector instead.</h2>\n\n<p>Another important question I ask myself when I’m considering using <code class=\"highlighter-rouge\">@extend</code> is “Is there a sufficiently broad CSS selector I can use for this style pattern?” If I’ve got two elements that I want to style identically, why don’t they share a class or attribute? This helps me name things better. If I’m naming visually-identical elements differently in different contexts, I need to rework my classes a bit. After all, classes are not primarily intended to describe the contents of their elements, they’re meant to provide hooks for styles to catch.</p>\n\n<p>I’ve seen projects that use a number of extendable classes/placeholders to mimic single-responsibility utility classes, then extend each of those utility selectors wherever needed to attach the right styles to the actual selectors. This creates a hodge-podge of selector duplication. You see, <code class=\"highlighter-rouge\">@extend</code> doesn’t repeat styles where the directive is written: it hoists the extender’s selector up to the location of the original extended object. If you’re not aware of this, you’ll likely be surprised at the way using <code class=\"highlighter-rouge\">@extend</code> appears to “break” your cascade.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">%red-box</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"nb\">solid</span> <span class=\"no\">red</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"nf\">darken</span><span class=\"p\">(</span><span class=\"no\">red</span><span class=\"o\">,</span> <span class=\"m\">30%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nv\">%green-box</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"m\">2px</span> <span class=\"nb\">solid</span> <span class=\"no\">green</span><span class=\"p\">;</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"nf\">darken</span><span class=\"p\">(</span><span class=\"no\">green</span><span class=\"o\">,</span> <span class=\"m\">30%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.box</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nv\">%green-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nc\">.error-box</span> <span class=\"p\">{</span>\n  <span class=\"k\">@extend</span> <span class=\"nv\">%red-box</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"cm\">/* You'd expect .error-box to be 2nd,\nbut since the selector is hoisted\nto the %placeholder location,\nit ends up first and won't be red.*/</span>\n</code></pre>\n</div>\n\n<p>This brings up the front-end game of <a href=\"/css/css-repetition-basically-whack-mole/\">“Optimization Whack-A-Mole”</a> - whenever you remove duplication from one part of your styles, it shows up somewhere else. If you avoid repeating declarations (like with <code class=\"highlighter-rouge\">@extend</code>), you’ll repeat selectors. If you avoid repeating selectors (like with <code class=\"highlighter-rouge\">@mixin</code>s), you’ll repeat declarations. If you use utility classes, you’ll repeat classes throughout your HTML markup. All that to say, bending <code class=\"highlighter-rouge\">@extend</code> to mimic utility classes doesn’t really shorten anything. It only adds cascade issues and selector repetition.</p>\n\n<p><em>Note: always gzip your stylesheets and markup. All the repeated strings (whether selectors, declaration, or markup classes) will be compressed.</em></p>\n",
      "url": "http://localhost:4000/sass/use-extend/",
      "summary": "<p>Using Sass’s <code class=\"highlighter-rouge\">@extend</code> directive is one of the more controversial discussions within the Sass community. On one hand, there are developers whose primary concern is the potential for selector bloat that comes with unrestrained use of <code class=\"highlighter-rouge\">@extend</code>. On the other hand, there are developers who understand what <code class=\"highlighter-rouge\">@extend</code> really does and limit their use to avoid the dangers.</p>\n",
      "date_published": "2015-11-11 00:00:00 -0700"
      
    },
  
    {
      "id": "/sass/sass-validating-input",
      "title": "Validating Input in Sass Mixins and Functions",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/validating-input-in-sass-mixins-and-functions\" title=\"Validating Input in Sass Mixins and Functions\" target=\"_blank\">Validating Input in Sass Mixins and Functions</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/sass-validating-input/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/validating-input-in-sass-mixins-and-functions\" title=\"Validating Input in Sass Mixins and Functions\" target=\"_blank\">Validating Input in Sass Mixins and Functions</a>” at SitePoint.</p>",
      "date_published": "2015-09-17 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/sass-error-warn-debug",
      "title": "Using Sass’s @error, @warn, and @debug Directives",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/using-sasss-error-warn-and-debug-directives/\" title=\"Using Sass's @error, @warn, and @debug Directives\" target=\"_blank\">Using Sass’s @error, @warn, and @debug Directives</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/sass-error-warn-debug/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/using-sasss-error-warn-and-debug-directives/\" title=\"Using Sass's @error, @warn, and @debug Directives\" target=\"_blank\">Using Sass’s @error, @warn, and @debug Directives</a>” at SitePoint.</p>",
      "date_published": "2015-08-26 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/css-animation-slides",
      "title": "Planning &amp; Implementing Meaningful UI Animations",
      "content_html": "<p>Check out my slide deck “<a href=\"/css-animation/\" title=\"Planning &amp; Implementing Meaningful UI Animations\" target=\"_blank\">Planning &amp; Implementing Meaningful UI Animations</a>” for a helpful introduction to CSS animation.</p>\n",
      "url": "http://localhost:4000/css/ui-animations/",
      "summary": "<p>Check out my slide deck “<a href=\"/css-animation/\" title=\"Planning &amp; Implementing Meaningful UI Animations\" target=\"_blank\">Planning &amp; Implementing Meaningful UI Animations</a>” for a helpful introduction to CSS animation.</p>",
      "date_published": "2015-07-16 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/sass-wordpress-netmag",
      "title": "Switch from CSS to Sass in WordPress",
      "content_html": "<p>Read my article “<a href=\"http://www.creativebloq.com/web-design/switch-css-sass-wordpress-71515681\" title=\"Switch from CSS to Sass in WordPress\" target=\"_blank\">Switch from CSS to Sass in WordPress</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/switch-css-sass-wordpress/",
      "summary": "<p>Read my article “<a href=\"http://www.creativebloq.com/web-design/switch-css-sass-wordpress-71515681\" title=\"Switch from CSS to Sass in WordPress\" target=\"_blank\">Switch from CSS to Sass in WordPress</a>” at SitePoint.</p>",
      "date_published": "2015-07-15 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/sass-maps-nested-lists",
      "title": "Sass Maps vs. Nested Lists",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/sass-maps-vs-nested-lists/\" title=\"Sass Maps vs. Nested Lists\" target=\"_blank\">Sass Maps vs. Nested Lists</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/sass-maps-nested-lists/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/sass-maps-vs-nested-lists/\" title=\"Sass Maps vs. Nested Lists\" target=\"_blank\">Sass Maps vs. Nested Lists</a>” at SitePoint.</p>",
      "date_published": "2015-07-14 00:00:00 -0600"
      
    },
  
    {
      "id": "/colorado-sun",
      "title": "Colorado Sun on Cotton Bureau",
      "content_html": "<p>My family &amp; I recently moved to Denver and we love it here! Something about the sun and the mountains sparked a little creativity in me, so I designed a t-shirt and <a href=\"https://cottonbureau.com/products/colorado-sun\">Cotton Bureau is selling it</a>!</p>\n\n<p><a href=\"https://cottonbureau.com/products/colorado-sun\"><img src=\"/images/co-indigo-m.png\" alt=\"Colorado Sun T-Shirt\" /></a></p>\n\n<div id=\"available\"></div>\n\n<p>It also comes in black &amp; light blue, and ladies’ styles as well! It’s only available till July 24, so if you like, please order <a href=\"https://cottonbureau.com/products/colorado-sun\">Colorado Sun</a> soon!</p>\n\n<p>And… if t-shirts aren’t your thing, <a href=\"http://www.stickermule.com/marketplace/6469-co-sticker\">there are stickers too</a>! Great for bumpers, windows, fridges, &amp; laptops!</p>\n\n<p style=\"max-width:320px;margin-left:auto;margin-right:auto;border-radius:4px;background-color:#e9e9e9;text-align:center;padding:1em\">\n    <img src=\"https://www.stickermule.com/marketplace/embed_img/6469\" style=\"display:inline-block\" />\n    <a href=\"https://www.stickermule.com/marketplace/6469-colorado-sun\" style=\"display:block\" class=\"button\" target=\"_blank\">Buy this sticker</a>\n</p>\n\n<!--[![Colorado Sun Sticker](/images/co-sticker.png)](http://www.stickermule.com/marketplace/6469-co-sticker)-->\n",
      "url": "http://localhost:4000/colorado-sun/",
      "summary": "<p>My family &amp; I recently moved to Denver and we love it here! Something about the sun and the mountains sparked a little creativity in me, so I designed a t-shirt and <a href=\"https://cottonbureau.com/products/colorado-sun\">Cotton Bureau is selling it</a>!</p>\n",
      "date_published": "2015-07-13 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/sass-style-tiles",
      "title": "Style Tiles with Sass",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/style-tiles-sass/\" title=\"Style Tiles with Sass\" target=\"_blank\">Style Tiles with Sass</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/sass-style-tiles/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/style-tiles-sass/\" title=\"Style Tiles with Sass\" target=\"_blank\">Style Tiles with Sass</a>” at SitePoint.</p>",
      "date_published": "2015-06-09 00:00:00 -0600"
      
    },
  
    {
      "id": "/follow-passion",
      "title": "I Honestly Don’t Know How to “Follow My Passion”",
      "content_html": "<p>It’s graduation season, so brace yourself! It’s time for all the “Follow Your Passion™” posts. You’ll find most of these posts quoting Steve Jobs, assuming you have unlimited time/resources, and coming from positions of privilege. I went through a time where I soaked up these posts. I’m an Apple user, had no family (at that time), and am a straight white male, so BING-BING-BING – I was a perfect candidate to join the passion cult!</p>\n\n<p>As appealing as “follow your passion” advice sounds (<em>find a job you love and you’ll never work a day in your life,</em> amirite?), that way of looking at work left me more frustrated and discontent than anything else.</p>\n\n<h2 id=\"problems-with-following-your-passion\">Problems with “following your passion”</h2>\n\n<p>I personally struggle a lot with “follow your passion” advice. I suspect there are a few others who feel the same way, so I hope that talking through my problems will help you as well.</p>\n\n<h3 id=\"i-have-a-lot-of-passions\">I have a lot of passions!</h3>\n\n<p>I can’t follow a passion, because I feel like I have too many passions! Which one do I even follow? I sit down and try to focus and figure out what my passion is. I talk with my wife, my family, and my close friends and ask them for input on which passion I should choose. And I don’t get much clarity. I’m currently working a job that has nothing to do with my education at all (and I’ve earned a PhD in that field!) - and I’m absolutely loving that job. Part of me wonders, what’s wrong with me? Another part is immensely grateful I’ve got a good job in a good industry. Yet another part wonders when/if I’ll put my educational investment to career use. I can’t follow my passion because I don’t have just one.</p>\n\n<h3 id=\"my-passion-isnt-worth-money\">My passion isn’t worth money.</h3>\n\n<p>One of my passions is pizza. I know, that’s kind of a dumb passion to most people. In my defense, I’m not passionate about Pizza Hut or Papa John’s at all: I do love finding the <em>really good</em> local pizza places, the ones with fresh ingredients, creative recipes, and great atmosphere. I love both NY-style and Chicago deep-dish pizza. My wife and I know which pizza places to order which kinds of pizza from: one of our local places has a fantastic fennel sausage, another one has a really good cracked pepper recipe. But… no one’s interested in paying me to drive around and eat pizza. Well, no one that I’m aware of, anyway: if you are, <a href=\"/contact/\">let me know</a>. I’ve pursued other ways of making money (<a href=\"http://jamesandaudreyjo.com\">printable</a> <a href=\"https://www.etsy.com/shop/JamesAndAudreyJo\">art</a>, <a href=\"http://weddings.jamessteinbach.com\">wedding sites</a>, <a href=\"http://summitws.com\">freelance web dev</a>) that haven’t panned out. That’s not to say I lost my shirt on them; they just didn’t turn out to be stable enough to support my family. A lot of my passions make great hobbies or side projects, but not sustainable careers. I can’t follow my passion because not every passion pays the bills.</p>\n\n<h3 id=\"my-passions-change-really-frequently\">My passions change really frequently.</h3>\n\n<p>I’ve got a passionate and somewhat distractable personality. I find a new “favorite thing” and pursue it hard for … it depends: a few weeks, sometimes months, occasionally years. I don’t think this is bad. Honestly, it’s a lot of fun diving into something new, learning the heck out of it, and then repeating that process with something else in a few months. But I’m also realistic: I can’t build a career on the subject of one of those passions! (I mean, with as many tools and technologies as there are in web development, I’m probably in an OK field for this.) I can’t follow my passion because they change too often.</p>\n\n<h2 id=\"some-better-advice\">Some better advice…</h2>\n\n<p>Since “Follow Your Passion” doesn’t always work, I’ve thought through some alternate bits of advice. Here are some of the principles I follow as I think about career choices, passion, and long-range plans.</p>\n\n<h3 id=\"focus-on-providing-value-to-others\">Focus on providing value to others.</h3>\n\n<p>There’s a degree to which “follow your passion” can be really selfish advice. Not necessarily malicious or arrogant advice, but self-focused and potentially self-consumed. It’s easy to let a focus on <em>my</em> passion cloud my ability to think about others and practice humility. At the same time, there’s a tremendous amount of satisfaction to be found in serving the needs of others. Rather than making career decisions based on “what am I passionate about?”, try thinking through the question “what can I do to provide value to others?” If you can be content spending your time working at a job you know provides real value to people around you, you’re in a good place to let go of pursuing illusive “passion.”</p>\n\n<p>Personally, some of the worst frustration I’ve felt at work has been when I was doing the kind of work <em>I</em> really enjoyed, but I wasn’t convinced I was doing anything to contribute anything truly meaningful to the world. We all have a different idea of what makes work “truly meaningful” or what constitutes “providing real value” and that’s fine. I’d suggest that providing value to others is at least as good a reason to pursue a career path as following your passion.</p>\n\n<h3 id=\"make-time-for-passions-on-the-side\">Make time for passions on the side.</h3>\n\n<p>Like I mentioned earlier, some passions would make bad careers, but they’re awesome hobbies. If one of my friends asks about wedding invitations and a matching site, I’ll look for some weekend time to carve out for that. If I get an idea for a new print to put on Etsy, I’ll take an evening or two to work on it. I treat these “side-passions” like pizza or cheesecake: I love them and I want to enjoy them regularly, but it really wouldn’t work out well for me if I were to have them full-time.</p>\n\n<p>It’s important to have creative outlets, to make time for fun projects, to have a weekend/evening thing. Especially if you feel like your passions won’t make you any money. This puts them in a place where they don’t have to be judged on their financial viability; you can simply enjoy them for what they are.</p>\n\n<h3 id=\"plan-to-grow-and-change\">Plan to grow and change.</h3>\n\n<p>This advice is particularly for you if your passions change frequently, but it works for most other as well. Most of us aren’t statues. We’re not static characters; our default is to be changing constantly. So plan for that.</p>\n\n<p>In job interviews, you can be up-front about this: “I’m an incredibly nimble learner. I pick up new tools and tasks quickly and easily. I love to do the kind of work that gives me freedom to explore and grow.” There are probably some interviewers who won’t know what to do with that transparency, but I bet there are a lot who would love to know they have someone like that on their team. And as a side note, if that’s you, you won’t be happy working for someone who expects to manage a bunch of automatons, so a rejection from him is a win-win.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>“Follow Your Passion™” doesn’t work for everyone or in every situation. There are some legitimate reasons that following a passion may not be right for you. If you find yourself juggling multiple passions, struggling to see how a passion can support you, or shifting passions frequently, you’re just fine. Instead of trying to bend your life and personality to passion advice, consider factors that work better for you. Look for work that gives you satisfaction that you’re providing value to others. Keep your “unprofitable” passions around for side projects and hobbies and enjoy them. Plan for inevitable growth and changes; look for a job where being nimble is an asset.</p>\n",
      "url": "http://localhost:4000/follow-passion/",
      "summary": "<p>It’s graduation season, so brace yourself! It’s time for all the “Follow Your Passion™” posts. You’ll find most of these posts quoting Steve Jobs, assuming you have unlimited time/resources, and coming from positions of privilege. I went through a time where I soaked up these posts. I’m an Apple user, had no family (at that time), and am a straight white male, so BING-BING-BING – I was a perfect candidate to join the passion cult!</p>\n",
      "date_published": "2015-05-29 11:08:08 -0400"
      
    },
  
    {
      "id": "/stop-writing",
      "title": "Stop Writing “Stop Using” Posts",
      "content_html": "<p>It’s super-easy to write posts telling other devs to “stop using” some tool, library, or software. I mean, it must be: look at all the posts as we devs (collectively) have written.</p>\n\n<p>Problem is, those aren’t the best posts for us to be writing. Here’s why: who’s going to read those posts? Other devs, sure. But who? We don’t know. Which means, we don’t know their constraints, their background, their clients, their agency, their coworkers, their dev environment, their … well, you get the point.</p>\n\n<p>That designer - you don’t know if he’s required by his agency to use Photoshop instead of Sketch, or if he’s required by his client to use “flat design.”</p>\n\n<p>That developer - you don’t know if she’s required by her teammates to use Grunt instead of Gulp, if she’s inherited a maintenance project that relies on Bootstrap, if she’s required by project restraints to use certain API, or if she’s got a specific background that makes Angular more useful than Ember.</p>\n\n<p>Unless you know all those things about all your readers, it’d be wise to avoid blanket “Stop Using X” advice. Now, there’s a place for “Why I Don’t Use X” posts. We’re all part of a community here, so we need to help learners think through issues, but don’t just throw dogmatic prohibitions around. With the exception of major issues (gross negligence of accessibility, blatant security vulnerabilities, etc), we need to help each other learn and grow.</p>\n\n<p>If you don’t use a certain tool for good reasons, talk/write about. You’ll probably help someone working under the same constraints as you. But let’s be understanding about the fact that we all have different constraints. Let’s be more helpful and stop writing “Stop Using” posts.</p>\n",
      "url": "http://localhost:4000/stop-writing/",
      "summary": "<p>It’s super-easy to write posts telling other devs to “stop using” some tool, library, or software. I mean, it must be: look at all the posts as we devs (collectively) have written.</p>\n",
      "date_published": "2015-05-28 15:51:30 -0400"
      
    },
  
    {
      "id": "/sass/sass-responsive-typography",
      "title": "Sass and Responsive Typography",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/sass-responsive-typography/\" title=\"Sass and Responsive Typography\" target=\"_blank\">Sass and Responsive Typography</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/sass-responsive-typography/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/sass-responsive-typography/\" title=\"Sass and Responsive Typography\" target=\"_blank\">Sass and Responsive Typography</a>” at SitePoint.</p>",
      "date_published": "2015-04-21 00:00:00 -0600"
      
    },
  
    {
      "id": "/performance/jekyll-github-pages-cloudflare-pagespeed",
      "title": "Jekyll, Github Pages, and Cloudflare for PageSpeed Win",
      "content_html": "<p>Read my article “<a href=\"https://scotch.io/tutorials/jekyll-github-pages-and-cloudflare-for-pagespeed-win\" title=\"Jekyll, Github Pages, and Cloudflare for PageSpeed Win\" target=\"_blank\">Jekyll, Github Pages, and Cloudflare for PageSpeed Win</a>” at scotch.io.</p>\n",
      "url": "http://localhost:4000/performance/jekyll-github-pages-cloudflare-pagespeed/",
      "summary": "<p>Read my article “<a href=\"https://scotch.io/tutorials/jekyll-github-pages-and-cloudflare-for-pagespeed-win\" title=\"Jekyll, Github Pages, and Cloudflare for PageSpeed Win\" target=\"_blank\">Jekyll, Github Pages, and Cloudflare for PageSpeed Win</a>” at scotch.io.</p>",
      "date_published": "2015-03-23 00:00:00 -0600"
      
    },
  
    {
      "id": "/sass/sass-quantity-queries",
      "title": "Using Sass for “Quantity Queries”",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/using-sass-quantity-queries/\" title=\"Using Sass for Quantity Queries\" target=\"_blank\">Using Sass for Quantity Queries</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/sass/sass-quantity-queries/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/using-sass-quantity-queries/\" title=\"Using Sass for Quantity Queries\" target=\"_blank\">Using Sass for Quantity Queries</a>” at SitePoint.</p>",
      "date_published": "2015-03-19 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/fixed-header-wordpress-admin-bar",
      "title": "Getting Sticky Headers and the WordPress Admin Bar to Behave",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/getting-sticky-headers-wordpress-admin-bar-behave/\" title=\"Getting Sticky Headers and the WordPress Admin Bar to Behave\" target=\"_blank\">Getting Sticky Headers and the WordPress Admin Bar to Behave</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/wordpress/sticky-headers-admin-bar/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/getting-sticky-headers-wordpress-admin-bar-behave/\" title=\"Getting Sticky Headers and the WordPress Admin Bar to Behave\" target=\"_blank\">Getting Sticky Headers and the WordPress Admin Bar to Behave</a>” at SitePoint.</p>",
      "date_published": "2015-03-17 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/snippet-transition-display-transform",
      "title": "CSS Snippet for “Animating” both Display and Transform",
      "content_html": "<p>I often find myself needing to change an element from <code class=\"highlighter-rouge\">display: none;</code> to <code class=\"highlighter-rouge\">display: block;</code> <em>and</em> transition some <code class=\"highlighter-rouge\">transform</code> properties on it. (Especially menu drop-downs…) Unfortunately, if you attempt to change <code class=\"highlighter-rouge\">display</code> and <code class=\"highlighter-rouge\">transform</code> at the same time, <code class=\"highlighter-rouge\">display</code> “wins”: the element appears, but nothing gets transitioned.</p>\n\n<p>I’ve been able to work around that by using an animation instead of a transition:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@keyframes</span> <span class=\"n\">grow</span> <span class=\"p\">{</span>\n  <span class=\"nt\">0</span><span class=\"o\">%</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n    <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"nt\">1</span><span class=\"o\">%</span> <span class=\"p\">{</span>\n    <span class=\"nl\">display</span><span class=\"p\">:</span> <span class=\"nb\">block</span><span class=\"p\">;</span>\n    <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n  <span class=\"nt\">100</span><span class=\"o\">%</span> <span class=\"p\">{</span>\n    <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n    <span class=\"nl\">transform</span><span class=\"p\">:</span> <span class=\"n\">scale</span><span class=\"p\">(</span><span class=\"m\">1</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n<span class=\"c\">/* Add your own prefixes */</span>\n</code></pre>\n</div>\n\n<p>I use the first percent of the animation to change the <code class=\"highlighter-rouge\">display</code> value, then the next 99% to change the transition-able properties.</p>\n\n<p>Check out the difference in this Pen:</p>\n\n<p data-height=\"268\" data-theme-id=\"0\" data-slug-hash=\"MYPgPp\" data-default-tab=\"result\" data-user=\"jdsteinbach\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/jdsteinbach/pen/MYPgPp/\">MYPgPp</a> by James Steinbach (<a href=\"http://codepen.io/jdsteinbach\">@jdsteinbach</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p>\n<script async=\"\" src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n",
      "url": "http://localhost:4000/css/snippet-animate-display-transform/",
      "summary": "<p>I often find myself needing to change an element from <code class=\"highlighter-rouge\">display: none;</code> to <code class=\"highlighter-rouge\">display: block;</code> <em>and</em> transition some <code class=\"highlighter-rouge\">transform</code> properties on it. (Especially menu drop-downs…) Unfortunately, if you attempt to change <code class=\"highlighter-rouge\">display</code> and <code class=\"highlighter-rouge\">transform</code> at the same time, <code class=\"highlighter-rouge\">display</code> “wins”: the element appears, but nothing gets transitioned.</p>\n",
      "date_published": "2015-03-10 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/doesnt-move",
      "title": "Maybe It Doesn’t Need to Move",
      "content_html": "<p>You’re probably familiar with sites that capitalize on awesome, shiny, motion-y, snappy, clever “UI Design.” <a href=\"http://tympanus.net/codrops/category/playground/\">Codrops</a> and <a href=\"http://codyhouse.co/library/\">CodyHouse</a> are two of my favorites. These sites (and others like them) specialize in creative animations and UI effects that are designed to impress, get clicks, and end up in newsletters. None of those goals are bad goals, but when we’re building sites in real life, we need to evaluate another goal: to make things easy for users.</p>\n\n<h2 id=\"dont-slow-users-down\">Don’t slow users down.</h2>\n\n<p>Sure, most sites have a little load time delay on each page. But there’s a world of difference between a second of load time and a second of load time followed by a half-second animation. Menus (especially on mobile) need to be quick too: don’t make users wait for a 5 pieces of a layout to shuffle like playing cards before menu links are available. I’m not against animation here, not at all! I’m recommending that we keep them subtle and fast. As <a href=\"http://24ways.org/2014/five-ways-to-animate-responsibly/\">Rachel Nabors cautions us</a>, an animation can be “cute the first time but by the 70th time… It’s annoying!”</p>\n\n<h2 id=\"dont-distract-users\">Don’t distract users.</h2>\n\n<p>Button animations, amirite? You may have seen the recent demo page full of quirky, colorful button animations. In the demo, all the action happened on <code class=\"highlighter-rouge\">:hover</code>. Please don’t do that. The point of a button is to encourage users to click and complete a task. If you put a 500ms animation on a button’s hover state, what have you done? At best, you’ve given people a reason to stop and watch the button … <em>instead of completing their task</em>. At worst, you distract and confuse them, causing some to fail to complete the task. Make your button <code class=\"highlighter-rouge\">:hover</code> transitions subtle. If you absolutely must do something crazy, do it on <em>click</em>. Your users are just waiting for feedback at that point. If you’ve got a meaningful animation, let them watch it then!</p>\n\n<h2 id=\"dont-feel-bad\">Don’t feel bad.</h2>\n\n<p>We’ve probably felt some false guilt about flashy animations at some point. You launch a project and the next day, you see a tweet about a crazy UI animation that your project doesn’t have. Other times, that pressure is external: a stakeholder or boss gets their hands on an animation library’s demo page and tells you that you need that kind of “pop” to take your work to the next level. Please fight off this guilt. I know, it’s hard defending your work and educating people who want flash without understanding UI design.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>I’m not an animation expert (I’m doing what I can to learn!) and I’m not mad at any creative web animation demo sites (they’re a lot of fun and spark some great ideas!). I do want us to take time to design <em>user</em> interface animations that provide a good <em>user</em> experience. There’s no shame in avoiding the glitz and glamour if you’re giving your users instructive, helpful transitions.</p>\n",
      "url": "http://localhost:4000/css/doesnt-move/",
      "summary": "<p>You’re probably familiar with sites that capitalize on awesome, shiny, motion-y, snappy, clever “UI Design.” <a href=\"http://tympanus.net/codrops/category/playground/\">Codrops</a> and <a href=\"http://codyhouse.co/library/\">CodyHouse</a> are two of my favorites. These sites (and others like them) specialize in creative animations and UI effects that are designed to impress, get clicks, and end up in newsletters. None of those goals are bad goals, but when we’re building sites in real life, we need to evaluate another goal: to make things easy for users.</p>\n",
      "date_published": "2015-02-27 00:00:00 -0700"
      
    },
  
    {
      "id": "/sass/not-breaking-up-sass",
      "title": "Why I’m Not Breaking Up with Sass",
      "content_html": "<p>You may have seen a post about “Breaking up with Sass” recently. In it, <a href=\"http://benfrain.com/breaking-up-with-sass-postcss/\">Ben</a> explains how he chooses not to use several Sass features and is able to replicate the features he does use with a tool called <a href=\"https://github.com/postcss/postcss\">PostCSS</a>. With PostCSS (and a handful of functions &amp; json files), Ben came up with “build your own plugins” system to emulate the Sass features he used. It’s a fascinating idea and Ben’s article is pretty even-handed: he blames himself for the break-up, not Sass. He’s not trying to start a war of words, and I’m not trying to manufacture one. I do want to take some time to share the reasons I’m not breaking up with Sass.</p>\n\n<h2 id=\"startup-investment\">Startup Investment</h2>\n\n<p>PostCSS looks like a great tool. It’s a tool that builds on a lot of other tools, though. If you’d like to use PostCSS, you’ll be installing the whole Node / npm thing and installing and configuring a task runner. Sass, on the other hand, is portable enough to plug in to any workflow. Grunt, Gulp, npm tools, Ruby, etc? Yep, there’s probably a Sass wrapper ready and waiting  without requiring you to spend the better part of a day installing, learning, and configuring a new tool. Of course, if you’re already using npm, adding a module like PostCSS probably won’t be too much trouble for you. I’m projecting a bit of my own experience (used Sass for at least a year before using any npm/task-runners). I’m also expressing concern for brand-new users. I started using Sass hesitantly; it was the first real workflow automator I picked up. If the instructions had been more complicated than <code class=\"highlighter-rouge\">gem install sass</code> and <code class=\"highlighter-rouge\">sass --watch main.scss:main.css</code>, I’d have been intimidated. Sass had all the tools I needed to get started without being overwhelmed by heavy config/setup work.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<p>Some people don’t use all of the features available in Sass. That’s completely fine. I don’t use every feature in most projects. But all those features are still there. That makes Sass incredible tool to learning. A newcomer to Sass can start of with nothing more than variables, then break up styles into partials, then create mixins for various design patterns, then use a map to manage all the breakpoint data. This gradual onboarding ease in Sass is fantastic, but it’s simply not there with a “build your own plugins” system like the npm+PostCSS+etc system Ben built.</p>\n\n<h2 id=\"stability\">Stability</h2>\n\n<p>Running your own homemade processor is great if you work alone or on small cutting-edge products. (So is Sass!) But if you’re in an agency or on an in-house dev team, you need something everyone can work together on. Most of us don’t want to invent a new system and then spend most our time, mental energy, and emotional capacity troubleshooting it and responding to other people’s bug reports or complaints. On an enterprise level, a stable tool like Sass makes sense.</p>\n\n<h2 id=\"community\">Community</h2>\n\n<p>This is the biggest reason I’m not breaking up with Sass is that it’s more than just a development tool: it’s a community. I’m not just talking about the fact that Sass is popular enough that it has specific channels in several tutorial/blog sites. I’m talking about people who care about other people. We have have a <a href=\"http://sassconf.com/\">conference</a>, a <a href=\"http://campsass.com/\">camp</a>, a <a href=\"http://environmentsforhumans.com/2014/sass-summit/\">summit</a>, and meetups around the globe (<a href=\"http://atxsass.com/\">Austin</a>, <a href=\"http://www.meetup.com/pdxSass/\">Portland</a>, <a href=\"http://www.meetup.com/gothamsass/\">NYC</a>, <a href=\"http://cltsass.com\">Charlotte</a>, <a href=\"http://www.meetup.com/Sass-Hack-Denver/\">Denver</a>, <a href=\"https://twitter.com/ldn_sass\">London</a>, <a href=\"http://sassydc.github.io/\">DC</a>, <a href=\"http://thesassway.com/news/sass-meetup-sf-aug-17-2011\">SF</a>, <a href=\"https://nvite.com/SouthFlorida/abc\">South Florida</a>, etc)/. You’ll find Sass talks and workshops cropping up at most front-end or CSS conferences. Why does Sass get so much attention? I’m convinced it’s because of the community: people who love Sass and love teaching others. We’re not perfect, but we care about each other and we want to help newcomers turn into experienced Sass developers. I haven’t found very many other dev communities this welcoming on such a large scale. Honestly, it’s a privilege to be part of it.</p>\n\n<h2 id=\"disclaimer\">Disclaimer</h2>\n\n<p>Once upon a time, Sass was the crazy new thing to try and CSS “purists” have been resisting it for years now. I started using Sass after it became widely used, so I can’t personally appreciate what Hampton, Natalie, and Chris went through as pioneers in the early days. I’m certainly not trying to put down PostCSS or any similarly new front-end tool. There’s definitely good reason to push boundaries and try experimental workflows and write new tools. I’m impressed by the people who have the skills to imagine and code those tools.</p>\n\n<p>I’m not breaking up with Sass, and you don’t need to either.</p>\n",
      "url": "http://localhost:4000/sass/not-breaking-up-sass/",
      "summary": "<p>You may have seen a post about “Breaking up with Sass” recently. In it, <a href=\"http://benfrain.com/breaking-up-with-sass-postcss/\">Ben</a> explains how he chooses not to use several Sass features and is able to replicate the features he does use with a tool called <a href=\"https://github.com/postcss/postcss\">PostCSS</a>. With PostCSS (and a handful of functions &amp; json files), Ben came up with “build your own plugins” system to emulate the Sass features he used. It’s a fascinating idea and Ben’s article is pretty even-handed: he blames himself for the break-up, not Sass. He’s not trying to start a war of words, and I’m not trying to manufacture one. I do want to take some time to share the reasons I’m not breaking up with Sass.</p>\n",
      "date_published": "2015-02-25 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/where-to-use-css-calc-real-world",
      "title": "Where to Use CSS calc() in the Real World",
      "content_html": "<p>Read my article “<a href=\"http://www.netorials.com/tutorials/where-to-use-css-calc-in-the-real-world/\">Where to Use CSS calc() in the Real World</a>” at SitePoint.</p>\n\n",
      "url": "http://localhost:4000/css/where-to-use-css-calc-real-world/",
      "summary": "<p>Read my article “<a href=\"http://www.netorials.com/tutorials/where-to-use-css-calc-in-the-real-world/\">Where to Use CSS calc() in the Real World</a>” at SitePoint.</p>\n",
      "date_published": "2015-02-18 00:00:00 -0700"
      
    },
  
    {
      "id": "/performance/my-99-100-google-page-speed",
      "title": "99/100 Google Page Speed Score",
      "content_html": "<p>With all my WordPress sites, it’s taken a <em>lot</em> of work to get a Google Page Speed score above 90. When I moved this site to Jekyll &amp; Github pages hosting, I instantly got a 93/100. I wasn’t satisfied (since I hadn’t put any effort into it!), so I started looking for ways to optimize things even more. Garth Braithwaite’s Medium post “<a href=\"https://medium.com/design-open/becoming-a-jekyll-god-ef722e93f771\" title=\"I am a Jekyll God\">Becoming a Jekyll God</a>” had all the tools I needed to get to 99/100.</p>\n\n<h2 id=\"inline-css\">Inline CSS</h2>\n\n<p>Garth points out that you can tell Jekyll to minify your CSS output by putting the following in your <code class=\"highlighter-rouge\">_config.yml</code> file:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"ss\">sass:\n  style: </span><span class=\"n\">compressed</span>\n</code></pre>\n</div>\n\n<p>Then the article recommended going one step farther and inlining the entire style sheet into your document.</p>\n\n<ol>\n  <li>Move your <code class=\"highlighter-rouge\">main.css</code> (or <code class=\"highlighter-rouge\">style.scss</code> - whichever is being used in your theme) into your <code class=\"highlighter-rouge\">/_includes/</code> directory.</li>\n  <li>Remove the “front matter” from that <code class=\"highlighter-rouge\">.scss</code> file (everything between <code class=\"highlighter-rouge\">---</code> and <code class=\"highlighter-rouge\">---</code>.</li>\n  <li>In your <code class=\"highlighter-rouge\">&lt;head&gt;</code> (probably in <code class=\"highlighter-rouge\">/_includes/head.html</code>), replace the <code class=\"highlighter-rouge\">&lt;link rel=“stylesheet” … &gt;</code> line with the following:</li>\n</ol>\n\n<div class=\"language-html highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;style </span><span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"p\">{</span><span class=\"err\">%</span> <span class=\"err\">capture</span> <span class=\"err\">include_to_scssify</span> <span class=\"err\">%</span><span class=\"p\">}</span>\n    <span class=\"p\">{</span><span class=\"err\">%</span> <span class=\"err\">include</span> <span class=\"err\">main.scss</span> <span class=\"err\">%</span><span class=\"p\">}</span>\n  <span class=\"p\">{</span><span class=\"err\">%</span> <span class=\"err\">endcapture</span> <span class=\"err\">%</span><span class=\"p\">}</span>\n  <span class=\"p\">{</span><span class=\"err\">{</span> <span class=\"err\">include_to_scssify</span> <span class=\"err\">|</span> <span class=\"err\">scssify</span> <span class=\"p\">}</span><span class=\"err\">}</span>\n<span class=\"nt\">&lt;/style&gt;</span>\n</code></pre>\n</div>\n\n<h2 id=\"compressed-html\">Compressed HTML</h2>\n\n<p>Compressing HTML was the next huge win for me. This requires an extra <code class=\"highlighter-rouge\">.html</code> file in <code class=\"highlighter-rouge\">/_layouts/</code>. You can <a href=\"https://github.com/penibelst/jekyll-compress-html/releases/tag/v1.1.1\" title=\"Download compress.html\">download <code class=\"highlighter-rouge\">compress.html</code> here</a>.</p>\n\n<p>Most likely, your layout files are all calling a single “root” layout file. In the default theme, <code class=\"highlighter-rouge\">page.html</code> and <code class=\"highlighter-rouge\">post.html</code> both called <code class=\"highlighter-rouge\">default.html</code> in their front matter. If that’s the case for you, copy <code class=\"highlighter-rouge\">compress.html</code> to your <code class=\"highlighter-rouge\">/_layouts/</code> directory and add the following to the top of <code class=\"highlighter-rouge\">default.html</code>:</p>\n\n<div class=\"language-ruby highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"o\">---</span>\n<span class=\"ss\">layout: </span><span class=\"n\">compress</span>\n<span class=\"o\">---</span>\n</code></pre>\n</div>\n\n<h2 id=\"caching\">Caching</h2>\n\n<p>I’m using <a href=\"https://www.cloudflare.com\" title=\"Visit cloudflare.com\">CloudFlare</a> to manage DNS for this site. For this domain, I went to “CloudFlare Settings” and clicked the “Performance Settings” tab. On that screen, I told CloudFlare to cache resources for 24 days (very aggressive), and minify JS, CSS, &amp; HTML. I realize, doing this after the HTML compression trick above is probably overkill. I may review that, do some testing and remove the compression from Jekyll. We’ll see.</p>\n\n<p><img src=\"/images/99-100-google-page-speed.jpg\" alt=\"Screenshot showing 99/100 Google Page Speed Score\" title=\"Google Page Speed\" /></p>\n\n<blockquote>\n  <p>Note: I’m constantly playing with things on this site, so the 99/100 may come and go.</p>\n</blockquote>\n\n",
      "url": "http://localhost:4000/performance/99-100-google-page-speed/",
      "summary": "<p>With all my WordPress sites, it’s taken a <em>lot</em> of work to get a Google Page Speed score above 90. When I moved this site to Jekyll &amp; Github pages hosting, I instantly got a 93/100. I wasn’t satisfied (since I hadn’t put any effort into it!), so I started looking for ways to optimize things even more. Garth Braithwaite’s Medium post “<a href=\"https://medium.com/design-open/becoming-a-jekyll-god-ef722e93f771\" title=\"I am a Jekyll God\">Becoming a Jekyll God</a>” had all the tools I needed to get to 99/100.</p>\n",
      "date_published": "2015-02-13 00:00:00 -0700"
      
    },
  
    {
      "id": "/this-blog-is-now-on-jekyll",
      "title": "This blog is now on Jekyll!",
      "content_html": "<p>WordPress is great, don’t get me wrong! In fact, I make a living building WordPress sites (mostly). So this post isn’t anti-WordPress at all.</p>\n\n<p>I have, however, moved this blog to <a href=\"http://jekyllrb.com/\">Jekyll</a> (hosted on Github) for a couple reasons.</p>\n\n<h2 id=\"speed\">Speed</h2>\n\n<p>First of all, I wanted this blog to be faster. I also don’t want to spend a bunch of time configuring and tweaking a WP caching plugin. Jekyll produces a flat file site that’s as fast as your markup/requests - no server think-time needed. (That’s not to say that this site is perfectly optimized: that’s an ongoing project and I’ll probably be blogging about it as I learn.)</p>\n\n<h2 id=\"markdown\">Markdown</h2>\n\n<p>I really like writing in <a href=\"http://daringfireball.net/projects/markdown/syntax\">Markdown</a>. It lets me write quickly, keeping a document outline in mind, but not fussing over formatting or leaving the keyboard to click around an editor. Jekyll parses markdown files, so again: win!</p>\n\n<h2 id=\"fun\">Fun</h2>\n\n<p>To be perfectly honest, I just wanted to try something new. Jekyll has been a fun little learning experience.</p>\n\n<p>If you have questions, issues, etc, please <a href=\"https://github.com/jdsteinbach/jdsteinbach.github.io/issues/new\">open up an issue on this repo</a> (no comments at the moment, sorry). Thanks!</p>\n",
      "url": "http://localhost:4000/on-jekyll/",
      "summary": "<p>WordPress is great, don’t get me wrong! In fact, I make a living building WordPress sites (mostly). So this post isn’t anti-WordPress at all.</p>\n",
      "date_published": "2015-02-11 00:00:00 -0700"
      
    },
  
    {
      "id": "/wordpress/changing-wordpress-query-vars-specific-archive-pages",
      "title": "Changing WordPress Query Vars for Specific Archive Pages",
      "content_html": "<p>When you develop a WordPress theme with multiple custom post types or taxonomies, you’ll inevitably find yourself needing to change some query vars for specific archives. For example, you may want to change the default blog archive from 10 posts to 5, but on the archive page that displays portfolio items, you want to show the most recent 12 items. On the staff page, you want to sort people by menu order with no post limit. The recommended resources page should sort posts alphabetically without a post limit. You could set all those archive pages up by building a <a title=\"WordPress Codex: Custom Page Template\" href=\"http://codex.wordpress.org/Page_Templates\" target=\"_blank\">custom page template</a> that uses a <a title=\"WordPress Codex: WP_Query\" href=\"http://codex.wordpress.org/Class_Reference/WP_Query\" target=\"_blank\">new WP_query</a> with custom vars for each one, and assigning a Page to each template.</p>\n\n<p>A cleaner solution is to use WordPress’s own <a title=\"WordPress Codex: Template Hierarchy\" href=\"http://codex.wordpress.org/Template_Hierarchy\" target=\"_blank\">template hierarchy</a> to generate archives for each post type. For your custom post types (slugs: portfolio, staff, resource), you’d create <code class=\"highlighter-rouge\">archive-portfolio.php</code>, <code class=\"highlighter-rouge\">archive-staff.php</code>, and <code class=\"highlighter-rouge\">archive-resource.php</code>. Those archive template files will be used whenever WordPress’s permalink URLs are used to call archives for each post type. By default, they’ll use WordPress’s default query vars: limit to 10 posts (or whatever number is saved in Settings &gt; Reading) in descending order by date. We can add (and adjust) the following snippet in <code class=\"highlighter-rouge\">functions.php</code> to modify the query vars used on each of those template pages:</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code>add_action( 'pre_get_posts', 'custom_query_vars' );\nfunction custom_query_vars( $query ) {\n  if ( !is_admin() <span class=\"err\">&amp;&amp;</span> $query-&gt;is_main_query() {\n    if ( get_post_type() == 'portfolio' ) {\n      $query-&gt;set( 'posts_per_page' =&gt; 12 );\n    }\n    if ( get_post_type() == 'staff' ) {\n      $query-&gt;set( 'posts_per_page' =&gt; -1 );\n      $query-&gt;set( 'orderby' =&gt; 'menu_order' );\n      $query-&gt;set( 'order' =&gt; 'ASC' );\n    }\n    if ( get_post_type() == 'resource' ) {\n      $query-&gt;set( 'posts_per_page' =&gt; -1 );\n      $query-&gt;set( 'orderby' =&gt; 'title' );\n      $query-&gt;set( 'order' =&gt; 'ASC' );\n    }\n  }\n  return $query;\n}\n</code></pre>\n</div>\n\n<p>The first line of code in that block adds the function <code class=\"highlighter-rouge\">custom_query_vars()</code> to the <a title=\"WordPress Codex: Action - pre_get_posts\" href=\"http://codex.wordpress.org/Plugin_API/Action_Reference/pre_get_posts\" target=\"_blank\"><code class=\"highlighter-rouge\">pre_get_posts</code></a> WordPress action: any time WordPress runs a post query, our custom function will run with the ability to modify query vars.</p>\n\n<p>In our custom function, the first thing we do is use an <code class=\"highlighter-rouge\">if</code> statement to limit where our modifications happen. The <code class=\"highlighter-rouge\">!is_admin()</code> condition prevents custom query modifications from affecting the Dashboard. The <code class=\"highlighter-rouge\">$query-&gt;is_main_query()</code> condition makes sure our changes only happen to the main query on a given archive page (for example, sidebar widgets won’t be affected by our tweaks).</p>\n\n<p>Inside that condition, we’ve got the three <code class=\"highlighter-rouge\">if</code> statements we’ll need to modify each of our custom post type archives. Inside of each <code class=\"highlighter-rouge\">if</code>, we use <code class=\"highlighter-rouge\">$query-&gt;set()</code>; to change the appropriate query vars. For portfolio items, we change the <code class=\"highlighter-rouge\">posts_per_page</code> var to 12. For the staff archive, we remove the post limit (<code class=\"highlighter-rouge\">'posts_per_page' =&gt; -1</code>) and order items by <code class=\"highlighter-rouge\">menu_order</code> in ascending order. For resource archive pages, we remove the post limit and order posts by their title in ascending order (alphabetical).</p>\n\n<blockquote>\n  <p>Note: <code class=\"highlighter-rouge\">$query-&gt;set( $var, $value );</code> is simply a WordPress alias function for <code class=\"highlighter-rouge\">query_vars[$var] = $value;</code>. The function <code class=\"highlighter-rouge\">set_query_var( $var, $value );</code> does the same thing, but can run outside of the <code class=\"highlighter-rouge\">pre_get_posts</code> action.</p>\n</blockquote>\n\n<p>This code snippet can also change query vars on individual categories. For example, if you wanted the posts in a specific blog category to be ordered differently, you’d replace <code class=\"highlighter-rouge\">if ( get_post_type() == $post_type )</code> with <code class=\"highlighter-rouge\">if ( is_category( $category_slug ) )</code>. For a custom taxonomy, you could use <code class=\"highlighter-rouge\">if ( is_tax( $taxonomy, $term ) )</code>. WordPress has several <a title=\"WordPress Codex: Conditional Tags\" href=\"http://codex.wordpress.org/Conditional_Tags\" target=\"_blank\">conditional tags</a> you can use to modify specific queries.</p>\n",
      "url": "http://localhost:4000/wordpress/changing-wordpress-query-vars-specific-archive-pages/",
      "summary": "<p>When you develop a WordPress theme with multiple custom post types or taxonomies, you’ll inevitably find yourself needing to change some query vars for specific archives. For example, you may want to change the default blog archive from 10 posts to 5, but on the archive page that displays portfolio items, you want to show the most recent 12 items. On the staff page, you want to sort people by menu order with no post limit. The recommended resources page should sort posts alphabetically without a post limit. You could set all those archive pages up by building a <a title=\"WordPress Codex: Custom Page Template\" href=\"http://codex.wordpress.org/Page_Templates\" target=\"_blank\">custom page template</a> that uses a <a title=\"WordPress Codex: WP_Query\" href=\"http://codex.wordpress.org/Class_Reference/WP_Query\" target=\"_blank\">new WP_query</a> with custom vars for each one, and assigning a Page to each template.</p>\n",
      "date_published": "2015-01-03 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/sass/creating-responsive-grid-system-susy-breakpoint",
      "title": "Creating a Responsive Grid System with Susy and Breakpoint",
      "content_html": "<p>Read my article “<a title=\"Creating a Responsive Grid System With Susy And Breakpoint\" href=\"http://www.sitepoint.com/creating-responsive-grid-system-susy-breakpoint/\" target=\"_blank\">Creating a Responsive Grid System with Susy and Breakpoint</a>” on SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/creating-responsive-grid-system-susy-breakpoint/",
      "summary": "<p>Read my article “<a title=\"Creating a Responsive Grid System With Susy And Breakpoint\" href=\"http://www.sitepoint.com/creating-responsive-grid-system-susy-breakpoint/\" target=\"_blank\">Creating a Responsive Grid System with Susy and Breakpoint</a>” on SitePoint.</p>",
      "date_published": "2014-12-09 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/sass/write-css3-without-worrying-prefixes",
      "title": "Write CSS3 without Worrying about Prefixes",
      "content_html": "<p>Read my article “<a title=\"Write CSS3 without Worrying about Prefixes\" href=\"http://www.sitepoint.com/write-css3-without-worrying-prefixes/\" target=\"_blank\">Write CSS3 without Worrying about Prefixes</a>” on SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/write-css3-without-worrying-prefixes/",
      "summary": "<p>Read my article “<a title=\"Write CSS3 without Worrying about Prefixes\" href=\"http://www.sitepoint.com/write-css3-without-worrying-prefixes/\" target=\"_blank\">Write CSS3 without Worrying about Prefixes</a>” on SitePoint.</p>",
      "date_published": "2014-11-26 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/holy-grail-css-animation",
      "title": "The Holy Grail of CSS Animation",
      "content_html": "<p>If you’ve been doing front-end development for long, you may have heard of the “Holy Grail” of web layout. <a href=\"http://alistapart.com/article/holygrail\">A List Apart</a> identified this layout as a flexible-width content column between two fixed-width sidebar columns, with all three columns occupying the same height between the header and footer rows. (Today we have Flexbox, so that problem is pretty solvable.)</p>\n\n<p><img class=\"alignright wp-image-1379 size-medium\" src=\"/images/holy-grail-168x300.png\" alt=\"holy grail\" width=\"168\" height=\"300\" /></p>\n\n<p>I’ve identified a “Holy Grail” of CSS animation that (to my knowledge) hasn’t been solved successfully yet. What I want to do is mimic jQuery’s <code class=\"highlighter-rouge\">slideToggle()</code> (<code class=\"highlighter-rouge\">slideDown()</code> / <code class=\"highlighter-rouge\">slideUp()</code>) feature with pure CSS on in-page content. I’m picturing collapsible FAQs or Wikipedia’s mobile view where content is collapsed under the header (except animated, unlike Wikipedia). Here are my five requirements for this behavior:</p>\n\n<ol>\n  <li>Uses CSS animation/transitions</li>\n  <li>Works on elements of any height</li>\n  <li>Maintains proper easing and timing</li>\n  <li>Following content fills collapsed space</li>\n  <li>Jank-free performance</li>\n</ol>\n\n<h2 id=\"uses-css-animationtransitions\">Uses CSS animation/transitions</h2>\n\n<p>JS is fine and good, but I’m looking for a way to do with with just CSS.</p>\n\n<h2 id=\"works-on-elements-of-any-height\">Works on elements of any height</h2>\n\n<p>This is a tricky one. Basically I’m asking CSS to transition between <code class=\"highlighter-rouge\">height: 0;</code> and <code class=\"highlighter-rouge\">height: auto;</code>. But it currently can’t.</p>\n\n<p>If all my elements were a fixed height, I could easily transition betweeen `` and that height, but I want a technique that works without fixing the element’s height in advance.</p>\n\n<h2 id=\"maintains-proper-easing-and-timing\">Maintains proper easing and timing</h2>\n\n<p>One method I’ve seen suggested is transitioning the <code class=\"highlighter-rouge\">max-height</code> of the element from <code class=\"highlighter-rouge\">0px</code> to <code class=\"highlighter-rouge\">1000px</code> (or some other fixed measurement higher than any potential element height). However, this method destroys any deliberate easing function or timing. For example, look at the following code (add your own prefixes):</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>.expandable {\n  max-height: 0;\n  transition: max-height 500ms ease-in-out;\n}\n.expandable[aria-expanded=\"true\"] {\n  max-height: 1000px;\n}\n</code></pre>\n</div>\n\n<p>If an <code class=\"highlighter-rouge\">.expandable</code> element is only 500px, its visible transition will finish in 250ms (not 500ms) because the transition calculates 1000px of motion over 500ms. The easing function will also be broken: the easing curve is also spread out over 1000px / 500ms: since the actual element has no motion left at 500px / 250ms, it won’t ease-out at all. Animating <code class=\"highlighter-rouge\">max-height</code> would work if duration was completely irrelevant and if the easing easing function was <code class=\"highlighter-rouge\">linear</code>. But if you’ve deliberately chosen your durations &amp; easing, this technique is out.</p>\n\n<h2 id=\"following-content-fills-collapsed-space\">Following content fills collapsed space</h2>\n\n<p>Another method for smoothly collapsing elements is transitioning between <code class=\"highlighter-rouge\">transform: scaleY(0);</code> and <code class=\"highlighter-rouge\">transform: scaleY(1);</code>. This handles timing &amp; easing nicely.</p>\n\n<div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>.expandable {\n  transform: scaleY(0);\n  transition: transform 500ms ease-in-out;\n}\n.expandable[aria-expanded=\"true\"] {\n  transform: scaleY(1);\n}\n</code></pre>\n</div>\n\n<p>However, it doesn’t truly “collapse” the element. An element scaled to 0 with the <code class=\"highlighter-rouge\">transform</code> property still exists in the stacking order of the site, preventing sibling elements from “moving up” to fill the empty space. This method works fine on elements that aren’t in the stacking order to begin with (for example, absolutely positioned sub-menu dropdowns), but this technique fails for normal content elements.</p>\n\n<h2 id=\"jank-free-performance\">Jank-free performance</h2>\n\n<p>CSS transitions and animations (when used properly!) hit 60fps really nicely. [Hint: limit transitioned properties to <code class=\"highlighter-rouge\">transform</code>, <code class=\"highlighter-rouge\">opacity</code>, and properties that contain simple color values.] jQuery’s <code class=\"highlighter-rouge\">slideToggle()</code> functions don’t run jank-free, however. Use them on an element with border-radius, box-shadow, or complex children and you’ll probably get a glitchy, stuttery animation.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>If you’ve got a CSS animation / transition solution that meets all the criteria above, please tweet at <a href=\"https://twitter.com/jdsteinbach\">@jdsteinbach</a>!</p>\n\n<h2 id=\"update\">UPDATE!</h2>\n\n<p>This <a href=\"/css/snippet-animate-display-transform/\">snippet for animating display and transform together</a> isn’t perfect, but the best solution I’ve found so far. Hope it helps!</p>\n\n",
      "url": "http://localhost:4000/css/holy-grail-css-animation/",
      "summary": "<p>If you’ve been doing front-end development for long, you may have heard of the “Holy Grail” of web layout. <a href=\"http://alistapart.com/article/holygrail\">A List Apart</a> identified this layout as a flexible-width content column between two fixed-width sidebar columns, with all three columns occupying the same height between the header and footer rows. (Today we have Flexbox, so that problem is pretty solvable.)</p>\n",
      "date_published": "2014-11-14 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/sass/passing-sass-someone-sass-less",
      "title": "Passing Your Sass to Someone Sass-less",
      "content_html": "<p>Read my article “<a title=\"Passing Your Sass to Someone Sass-less\" href=\"http://www.sitepoint.com/passing-your-sass-to-someone-sass-less/\" target=\"_blank\">Passing Your Sass to Someone Sass-less</a>” on SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/passing-sass-someone-sass-less/",
      "summary": "<p>Read my article “<a title=\"Passing Your Sass to Someone Sass-less\" href=\"http://www.sitepoint.com/passing-your-sass-to-someone-sass-less/\" target=\"_blank\">Passing Your Sass to Someone Sass-less</a>” on SitePoint.</p>",
      "date_published": "2014-11-13 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/sass/stop-using-worthless-sass-mixins",
      "title": "Stop Using Needless Sass Mixins",
      "content_html": "<p>Sass is a powerful tool – this power makes it easy to misuse. One of the most common ways people misuse Sass is creating mixins that they never needed in the first place. I’m not talking about the cool proof-of-concept “let’s create an icosidodecahedron with CSS” mixins – those have their place. I’m talking about worthless mixins that bloat CSS and serve no one. Let’s look at the mixins you should stop using right now:</p>\n\n<h2 id=\"border-radius-prefixes\">Border-Radius Prefixes</h2>\n\n<p>.26%: that’s the total global browser usage that needs a prefix on <code class=\"highlighter-rouge\">border-radius</code>. Not 26% – .26%. <a title=\"Can I Use data: Border-radius\" href=\"http://caniuse.com/#feat=border-radius\" target=\"_blank\">Firefox 3.6 &amp; down, Chrome 3 &amp; down, Safari 4 &amp; down, iOS 3.2 &amp; down need <code>border-radius</code> prefixes.</a> Before replying with lofty ideals about “no user left behind,” think about what you do for IE6-8. Chances are, you’ve written at least one of those browser off as “unsupported.” You’ve got more than 10x as many IE8 users as you have <code class=\"highlighter-rouge\">border-radius</code> prefix users. By now, the best thing to do is consider border-radius to be a progressive enhancement. I’ve never seen a website become unreadable or inaccessible when border-radius was removed.</p>\n\n<h2 id=\"box-shadow-prefixes\">Box-Shadow Prefixes</h2>\n\n<p>This is the exact same issue as above: there are more older browsers that need prefixes for <code class=\"highlighter-rouge\">box-shadow</code> than for <code class=\"highlighter-rouge\">border-radius</code>, but it’s still only <a title=\"Can I Use data: box-shadow\" href=\"http://caniuse.com/#feat=css-boxshadow\" target=\"_blank\">half a percent</a>. And same as before: this is a progressive enhancement. The box might look prettier with a shadow, but lack of <code class=\"highlighter-rouge\">box-shadow</code> isn’t going to obscure its content. As Mitch Hedberg says, “There would never be an escalator temporarily out of order sign, only an escalator temporarily stairs. Sorry for the convenience.”</p>\n\n<h2 id=\"anything-with-prefixes\">Anything with Prefixes</h2>\n\n<p>The two examples above never need prefixes ever, but you really shouldn’t be using Sass mixins for any prefixes at all. I know, Compass &amp; Bourbon have libraries to do this for you, but there’s a better way: <a title=\"Autoprefixer on Github\" href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\">Autoprefixer</a>. You can add Autoprefixer to any Sass workflow: Grunt, Gulp, Ruby gem CLI, Codekit, etc. It runs immediately after your Sass is compiled and <em>automatically adds &amp; removes browser prefixes based on your requirements</em>. You realize how awesome that is, right? You never have to type <code class=\"highlighter-rouge\">@include</code> for prefixes again. This lets you write CSS3 with normal, spec syntax. AutoPrefixer uses current data from <a title=\"Can I Use\" href=\"http://caniuse.com\" target=\"_blank\">caniuse.com</a> to choose prefixes that match your specified browser &amp; usage specifications. Just supporting most recent 3 browser version numbers or browsers with at least 3% usage? Autoprefixer does that automatically: you just type the spec version of the CSS. Transitions, transforms, keyframe animations, flexbox, gradients, etc – all those prefixes are handled automatically. Again, you don’t even need to worry about where to use a mixin: just learn the correct spec syntax &amp; you’re covered.</p>\n\n<h2 id=\"opacity\">Opacity</h2>\n\n<p>Everybody but IE8 likes <code class=\"highlighter-rouge\">opacity</code>. IE8 can do opacity with <code class=\"highlighter-rouge\">filter: alpha(opacity=(50));</code>, but that’s hardly ideal. You could use a mixin for this, or (as I’d recommend) just let IE8 be opaque. If readability of your site <em>depends</em> on opacity, you should already be using Modernizr to detect support &amp; deliver a safe fallback. Give IE8 that fallback. IMO, a much bigger issue is IE8’s lack of support for <code class=\"highlighter-rouge\">rgba()</code> and <code class=\"highlighter-rouge\">hsla()</code> colors. If you’re using those, you should definitely be providing a good fallback. Most of the time, I see fallbacks like this:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.element</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"nb\">rgb</span><span class=\"p\">(</span><span class=\"m\">243</span><span class=\"p\">,</span> <span class=\"m\">107</span><span class=\"p\">,</span> <span class=\"m\">33</span><span class=\"p\">);</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">rgba</span><span class=\"p\">(</span><span class=\"m\">243</span><span class=\"p\">,</span> <span class=\"m\">107</span><span class=\"p\">,</span> <span class=\"m\">33</span> <span class=\"m\">.5</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>If you need to keep color values closer than that, what I’d recommend for <code class=\"highlighter-rouge\">rgba()</code> fallback is using Sass’s <code class=\"highlighter-rouge\">mix()</code> function to blend the foreground (transparent) and background colors. I’ve got a <a title=\"RGBA Color Fallback Mixin on Sassmeister\" href=\"http://sassmeister.com/gist/b687d319b542d0fadb17\" target=\"_blank\">working version of that mixin in this Sassmeister gist</a>. (I’d break it down for you, but I’m ready to wrap this post up. Look for a future post explaining its inner workings, maybe.)</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Sass is great, but not if it’s used to create needless CSS. The next time you read a post about “essential Sass mixins” or want to start using a detailed mixin library, ask yourself, “Does this even need a mixin?” and if it does, “Is this mixin creating good CSS or bloated CSS?”</p>\n\n<p>If you’ve got questions about bloated Sass mixins or unnecessary styles, ask away in the comments. Thanks!</p>\n",
      "url": "http://localhost:4000/css/sass/stop-using-worthless-sass-mixins/",
      "summary": "<p>Sass is a powerful tool – this power makes it easy to misuse. One of the most common ways people misuse Sass is creating mixins that they never needed in the first place. I’m not talking about the cool proof-of-concept “let’s create an icosidodecahedron with CSS” mixins – those have their place. I’m talking about worthless mixins that bloat CSS and serve no one. Let’s look at the mixins you should stop using right now:</p>\n",
      "date_published": "2014-11-12 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/sass/switching-ruby-sass-libsass",
      "title": "Switching from Ruby Sass to LibSass",
      "content_html": "<p>Read my article “<a title=\"Switching from Ruby Sass to LibSass\" href=\"http://www.sitepoint.com/switching-ruby-sass-libsass/\" target=\"_blank\">Switching from Ruby Sass to LibSass</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/switching-ruby-sass-libsass/",
      "summary": "<p>Read my article “<a title=\"Switching from Ruby Sass to LibSass\" href=\"http://www.sitepoint.com/switching-ruby-sass-libsass/\" target=\"_blank\">Switching from Ruby Sass to LibSass</a>” at SitePoint.</p>",
      "date_published": "2014-11-04 00:00:00 -0700"
      
    },
  
    {
      "id": "/css/sass/breaking-free-bootstrap",
      "title": "Breaking Free from Bootstrap",
      "content_html": "<p>I gave a talk called “Breaking Free from Bootstrap: Custom Responsive Grids with Sass Susy” at the <a title=\"Charlotte Front-End Developers on meetup.com\" href=\"http://www.meetup.com/Charlotte-Front-End-Developers/\" target=\"_blank\">Charlotte Front-End Developers Meetup</a>. You can <a title=\"View Breaking Free from Bootstrap on SlideShare\" href=\"http://www.slideshare.net/JamesSteinbach/breaking-free-from-bootstrap/\" target=\"_blank\">view the slides online</a> or <a href=\"/images/Breaking-Free-from-Bootstrap.pdf\" title=\"Download the Breaking Free from Bootstrap slides\">download them as a PDF</a>.</p>\n\n<p>Here are the resources I mentioned near the end of that talk (plus a couple extra!):</p>\n\n<ul>\n  <li><a href=\"/css/stop-abusing-bootstrap-foundation/\" title=\"Stop (Ab)using Bootstrap / Foundation!\">Stop (Ab)using Bootstrap / Foundation</a></li>\n  <li><a title=\"Sass Grids: From Neat to Susy (on sitepoint.com)\" href=\"http://www.sitepoint.com/sass-grids-neat-susy/\" target=\"_blank\">Sass Grids: From Neat to Susy</a></li>\n  <li><a title=\"Susy Home Page\" href=\"http://susy.oddbird.net/\" target=\"_blank\">Susy Home Page</a></li>\n  <li><a title=\"Susy Documentation\" href=\"http://susydocs.oddbird.net/en/latest/\" target=\"_blank\">Susy Documentation</a></li>\n  <li><a title=\"Zell Liew's Blog\" href=\"http://zell-weekeat.com/\" target=\"_blank\">Zell Liew’s Blog</a></li>\n  <li><a title=\"Learning Susy Book\" href=\"http://www.zell-weekeat.com/learnsusy/?utm_source=jdsteinbach&amp;utm_medium=frontend%20talk&amp;utm_campaign=frontendtalk\" target=\"_blank\"><em>Learning Susy </em>Book</a></li>\n  <li><a title=\"Breakpoint: Sass Mixin Library\" href=\"http://breakpoint-sass.com/\" target=\"_blank\">Breakpoint: Sass Mixin Library</a></li>\n  <li>Example: <a title=\"Nested Grid Example on Sassmeister\" href=\"http://sassmeister.com/gist/6d866241070d5a7c2cd2\" target=\"_blank\">Nested Grids</a></li>\n  <li>Example: <a title=\"Example Asymmetric Responsive Golden Ratio Grid on Sassmeister\" href=\"http://sassmeister.com/gist/07f48839b9d67191e00d\" target=\"_blank\">Asymmetric Responsive Golden Ratio Grid</a></li>\n  <li><a title=\"Sassmeister: Online Sass Testing Environment\" href=\"http://sassmeister.com\" target=\"_blank\">Sassmeister: Online Sass Sandbox</a></li>\n  <li>Charlotte Sass: <a title=\"Sign up for Charlotte Sass meetup emails\" href=\"http://cltsass.com\" target=\"_blank\">Mailing List</a> &amp; <a title=\"Follow @CLTSass on Twitter\" href=\"http://twitter.com/cltsass\" target=\"_blank\">Twitter</a></li>\n</ul>\n\n",
      "url": "http://localhost:4000/css/sass/breaking-free-bootstrap/",
      "summary": "<p>I gave a talk called “Breaking Free from Bootstrap: Custom Responsive Grids with Sass Susy” at the <a title=\"Charlotte Front-End Developers on meetup.com\" href=\"http://www.meetup.com/Charlotte-Front-End-Developers/\" target=\"_blank\">Charlotte Front-End Developers Meetup</a>. You can <a title=\"View Breaking Free from Bootstrap on SlideShare\" href=\"http://www.slideshare.net/JamesSteinbach/breaking-free-from-bootstrap/\" target=\"_blank\">view the slides online</a> or <a href=\"/images/Breaking-Free-from-Bootstrap.pdf\" title=\"Download the Breaking Free from Bootstrap slides\">download them as a PDF</a>.</p>\n",
      "date_published": "2014-10-31 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/sass-based-media-queries-breakpoint",
      "title": "Sass-based Media Queries With Breakpoint",
      "content_html": "<p>Read my article “<a title=\"Sass-based Media Queries With Breakpoint\" href=\"http://www.sitepoint.com/sass-based-media-queries-with-breakpoint/\" target=\"_blank\">Sass-based Media Queries With Breakpoint</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/sass-based-media-queries-breakpoint/",
      "summary": "<p>Read my article “<a title=\"Sass-based Media Queries With Breakpoint\" href=\"http://www.sitepoint.com/sass-based-media-queries-with-breakpoint/\" target=\"_blank\">Sass-based Media Queries With Breakpoint</a>” at SitePoint.</p>",
      "date_published": "2014-10-30 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/sass-grids-neat-susy",
      "title": "Sass Grids: From Neat To Susy",
      "content_html": "<p>Read my article “<a title=\"Sass Grids: From Neat To Susy\" href=\"http://www.sitepoint.com/sass-grids-neat-susy/\" target=\"_blank\">Sass Grids: From Neat To Susy</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/sass-grids-neat-susy/",
      "summary": "<p>Read my article “<a title=\"Sass Grids: From Neat To Susy\" href=\"http://www.sitepoint.com/sass-grids-neat-susy/\" target=\"_blank\">Sass Grids: From Neat To Susy</a>” at SitePoint.</p>",
      "date_published": "2014-10-23 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/cheatsheet-css-font-face-declarations",
      "title": "A Cheatsheet for CSS @font-face Declarations",
      "content_html": "<p>CSS <code class=\"highlighter-rouge\">@font-face</code> is easy: just <code class=\"highlighter-rouge\">@import</code> from Google Web Fonts or copy what you get from Font Squirrel, right? Not quite. If you’re hosting your own webfonts, cleaning up the default you get from a service like Font Squirrel, or just concerned about performance, you want more details than “just paste this line of code.” Here’s a list of the most important details you should know about CSS <code class=\"highlighter-rouge\">@font-face</code>:</p>\n\n<ol>\n  <li><code class=\"highlighter-rouge\">.woff</code> covers nearly everything</li>\n  <li><code class=\"highlighter-rouge\">.eot</code> if you need to support IE8</li>\n  <li><code class=\"highlighter-rouge\">.ttf</code> if you need to support old Androids</li>\n  <li><code class=\"highlighter-rouge\">.woff2</code> is gonna be great</li>\n</ol>\n\n<p>Now that you’ve seen the short list, let’s look at those points in more detail.</p>\n\n<h2 id=\"woff-covers-nearly-everything\">.woff covers nearly everything</h2>\n\n<p>According to caniuse, we’ve got <a href=\"http://caniuse.com/#feat=woff\">83% global browser support for .woff files (86% in the US)</a>. That’s pretty good. If you’re viewing webfonts as a progressive enhancement, you’d probably have good reason to quit stop with just .woff files:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@font-face</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s2\">'SampleFont'</span><span class=\"p\">;</span>\n  <span class=\"nl\">src</span><span class=\"p\">:</span> <span class=\"sx\">url('sample_font')</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">'woff'</span><span class=\"p\">);</span>\n  <span class=\"nl\">font-style</span><span class=\"p\">:</span> <span class=\"nb\">normal</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">normal</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"eot-if-you-need-to-support-ie8\">.eot if you need to support IE8</h2>\n\n<p>An .eot file (embedded open type) is needed for IE&lt;8 (and IE9 running in compatibility mode). This adds another <a href=\"http://caniuse.com/#feat=eot\">4% (7% US) to browser support</a>, bringing our totals to 87% / 94%. Be sure to include it above the .woff. Notice we’re linking to the same file twice: the first declaration is for IE9 in compatiblity mode; the second (which is inline with the .woff declaration) is for IE6-8.</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@font-face</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s2\">'SampleFont'</span><span class=\"p\">;</span>\n  <span class=\"nl\">src</span><span class=\"p\">:</span> <span class=\"sx\">url('sample_font.eot')</span><span class=\"p\">;</span>\n  <span class=\"nl\">src</span><span class=\"p\">:</span> <span class=\"sx\">url('sample_font.eot?#iefix')</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">'embedded-opentype'</span><span class=\"p\">),</span>\n    <span class=\"sx\">url('sample_font.woff')</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">'woff'</span><span class=\"p\">);</span>\n  <span class=\"nl\">font-style</span><span class=\"p\">:</span> <span class=\"nb\">normal</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">normal</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"ttf-if-you-need-to-support-old-androids\">.ttf if you need to support old Androids</h2>\n\n<p>These older Android browsers support both .ttf &amp; .svg fonts, so pick whichever you like best. No, I’m kidding. Just use .ttf. Very few (and very old) browsers render .svg fonts but not .ttf.</p>\n\n<p>Supporting these browsers brings our total support to <a href=\"http://caniuse.com/#feat=ttf\">90% global, 96% US</a>.</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@font-face</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-family</span><span class=\"p\">:</span> <span class=\"s2\">'SampleFont'</span><span class=\"p\">;</span>\n  <span class=\"nl\">src</span><span class=\"p\">:</span> <span class=\"sx\">url('sample_font.eot')</span><span class=\"p\">;</span>\n  <span class=\"nl\">src</span><span class=\"p\">:</span> <span class=\"sx\">url('sample_font.eot?#iefix')</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">'embedded-opentype'</span><span class=\"p\">),</span>\n    <span class=\"sx\">url('sample_font.woff')</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">'woff'</span><span class=\"p\">),</span>\n    <span class=\"sx\">url('sample_font.ttf')</span> <span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">'truetype'</span><span class=\"p\">);</span>\n  <span class=\"nl\">font-style</span><span class=\"p\">:</span> <span class=\"nb\">normal</span><span class=\"p\">;</span>\n  <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">normal</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"woff2-is-gonna-be-great\">.woff2 is gonna be great</h2>\n\n<p>Yep. We’re going to <a href=\"https://twitter.com/wpseo/status/482516050303807490\">shave 20-30% off the filesize with .woff2</a>. Right now Chrome &amp; Opera are the only browsers actively supporting .woff2, but Firefox will be adding support behind a flag shortly.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>The code above helps you include .woff, .eot, and .ttf files for your websites. That said, make your own decisions about how to “support” browsers on this issue. In my view at the moment, web fonts are a progressive enhancement. Sure, they make sites look fantastic, but we need to work hard at making sure they don’t block people from content.</p>\n\n<p>Personally, I’m fine with serving <em>only .woff fonts</em> at this point. If a visitor is on any of the old browsers we discussed above, they’re used to sites looking less progressively enhanced. But if your project or organizational requirements are different, I hope this helps you.</p>\n\n",
      "url": "http://localhost:4000/css/cheatsheet-css-font-face-declarations/",
      "summary": "<p>CSS <code class=\"highlighter-rouge\">@font-face</code> is easy: just <code class=\"highlighter-rouge\">@import</code> from Google Web Fonts or copy what you get from Font Squirrel, right? Not quite. If you’re hosting your own webfonts, cleaning up the default you get from a service like Font Squirrel, or just concerned about performance, you want more details than “just paste this line of code.” Here’s a list of the most important details you should know about CSS <code class=\"highlighter-rouge\">@font-face</code>:</p>\n",
      "date_published": "2014-10-21 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/bigger-wordpress",
      "title": "Bigger than WordPress",
      "content_html": "<p>About 8 tweets into a (loving) Twitter rant this afternoon, I thought, “I wish I had a platform where I could write as many characters as I want and share that with the world!” So here we are. <a title=\"My Twitter Rant\" href=\"https://twitter.com/jdsteinbach/status/524234850702991360\" target=\"_blank\">Here’s my rant</a>:</p>\n\n<ul>\n  <li>[Insert any generic development topic] with WordPress is somehow a valid category of articles these days…</li>\n  <li>It’s not like animation, grids layouts, CSS prefixes, or font choice are somehow different in WP than any other platform.</li>\n  <li>There are a few cases where WP has a quirk or specific implementation requirement, but not THAT often.</li>\n  <li>Are WP devs/users just afraid to click on any dev tutorial that doesn’t include “with WordPress” in the title?</li>\n  <li>If so, I think we as a community need to grow and start thinking through the right ways to implement normal dev techniques in WP sites.</li>\n  <li>This should cause a distinction in the WP “dev” community between actually developers and theme tweakers. I would welcome that distinction.</li>\n  <li>All that to say: WP Devs, let’s look around and participate in the broader development community, not just our comfortable WP circles.</li>\n  <li>Got a great dev technique? Just write about it, no “with WordPress” needed.</li>\n  <li>The more we contribute to the larger dev community, the less we’ll be treated like the weird kid eating glue in the corner.</li>\n  <li>Using WordPress is great in many situations, but let’s be bigger than our tools.</li>\n  <li>// end rant // clicks “new post”</li>\n</ul>\n\n<h2 id=\"title--in-wordpress\">[Title] + “in WordPress”</h2>\n\n<p>I write occasionally about WordPress development and I read a lot about it too. I’ve been noticing a trend lately that I find frustrating: articles that take take a normal development technique and add “in WordPress” to the end. Sometimes that’s necessary. I’ve written about using Sass for WP Development: there are a couple of WP-specific considerations that need to be pointed out.</p>\n\n<p>Sometimes, however, the topic is so generic that appending “in WordPress” isn’t helpful. “CSS Animations”in WordPress! Nope. There’s no WP-specific way to write CSS keyframes. Why would an article like that be written? (I have a suspicion and it includes reasons like “SEO keyword targeting” and “borderline clickbait” but I don’t want to cast this as an accusation – just some cynicism.) At any rate, unless there’s a uniquely WP way that a technique should be implemented, there’s not need for a uniquely WP article about it.</p>\n\n<p>I wonder if we (as a WordPress community) have trained ourselves and our newcomers to always want a “WordPress version” of every development technique. Regardless of the reasons for unnecessarily adding “in WordPress” to development posts, I think it’s successful because so many people are trained to add “in WordPress” to their search queries. Always wanting tutorials for “[Do X] in WordPress” means that you miss an awful lot of fantastic articles and tutorials about X that don’t happen to mention WordPress.</p>\n\n<h2 id=\"looking-outside-of-the-wp-community\">Looking Outside of the WP Community</h2>\n\n<p>We need to change this bias. Developers who use WordPress should start looking outside of WordPress to learn development techniques. Subscribe to some general <a title=\"Front-End Web Development Resources\" href=\"http://jamessteinbach.com/css/front-end-web-development-resources/\" target=\"_blank\">development blogs and newsletters</a>. Go to some conferences that aren’t WordCamps. Drop “in WordPress” from your internet search queries. Take the time to learn from the broader development community, then discerningly implement what you’ve learned in your WP projects.</p>\n\n<p>I realize that with this emphasis on participating in the broader development community is going to force a wedge between actual developers who use WordPress and WordPress users who tweak theme and call that development. I am 100% in favor of amplifying such a distinction. I’m not advocating a mean-spirited “us (real devs) vs. them (theme tweakers)” prejudice or bullying. I do want to see those of us who are actual developers to start leading in actual development circles: then let the distinction take care of itself.</p>\n\n<h2 id=\"contributing-outside-of-the-wp-community\">Contributing Outside of the WP Community</h2>\n\n<p>So let’s drop the “in WordPress” when appropriate and start writing “normal” development posts. Let’s get serious about attending (and speaking at) normal meetups and conferences. Let’s find languages, tools, and causes to champion – outside of the WordPress bubble.</p>\n\n<p>There’s a stigma that WP developers sometimes bear in the development world. We’re treated as “almost developers” or “not quite real developers.” If PHP takes flack for being [whatever people like griping about at the moment], WP more so. The way to change that perception is not sulking, hiding, or reverse snarkism. The way to change negative perception of WordPress developers is to participate and contribute like “real developers.” It’s easy to stay in a comfortable corner; it’s hard putting your work (and yourself!) out for criticism.</p>\n\n<p>I’m not denigrating WordPress here – please don’t hear that in this rant. WP is a great tool – I use it all the time for several substantial reasons. I’m also not recommending that we hide “WordPress” from LinkedIn endorsements or remove it from our blog categories. It’s really useful and we should use it without shame. We need to make sure we’re not defining ourselves by that tool, however. Let’s define ourselves as good developers and use whatever tools work best.</p>\n\n<p>Let’s be bigger than our tools.</p>\n",
      "url": "http://localhost:4000/wordpress/bigger-wordpress/",
      "summary": "<p>About 8 tweets into a (loving) Twitter rant this afternoon, I thought, “I wish I had a platform where I could write as many characters as I want and share that with the world!” So here we are. <a title=\"My Twitter Rant\" href=\"https://twitter.com/jdsteinbach/status/524234850702991360\" target=\"_blank\">Here’s my rant</a>:</p>\n",
      "date_published": "2014-10-20 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/scaling-values-across-breakpoints-using-sass",
      "title": "Scaling Values Across Breakpoints Using Sass",
      "content_html": "<p>Read my article “<a title=\"Scaling Values Across Breakpoints Using Sass\" href=\"http://www.sitepoint.com/scaling-values-across-breakpoints-using-sass/\" target=\"_blank\">Scaling Values Across Breakpoints Using Sass</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/scaling-values-across-breakpoints-using-sass/",
      "summary": "<p>Read my article “<a title=\"Scaling Values Across Breakpoints Using Sass\" href=\"http://www.sitepoint.com/scaling-values-across-breakpoints-using-sass/\" target=\"_blank\">Scaling Values Across Breakpoints Using Sass</a>” at SitePoint.</p>",
      "date_published": "2014-10-16 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/css-repetition-basically-whack-mole",
      "title": "CSS Repetition: It’s Basically Whack-A-Mole",
      "content_html": "<h2 id=\"if-you-never-repeat-selectors-in-your-stylesheet-youll-repeat-declarations\">If you never repeat selectors in your stylesheet, you’ll repeat declarations.</h2>\n\n<p>Pretty self-explanatory, this one. If you’ve got four selectors with a few shared properties and you’re set on not repeating selectors, you repeat all those property declarations.</p>\n\n<h2 id=\"if-you-never-repeat-declarations-youll-repeat-selectors\">If you never repeat declarations, you’ll repeat selectors.</h2>\n\n<p>If I were going to try this, I’d build a bunch of Sass <code class=\"highlighter-rouge\">%placeholder</code>s (all pattern library style) and <code class=\"highlighter-rouge\">@extend</code> them from all the appropriate selectors.</p>\n\n<h2 id=\"if-you-use-single-function-selectors-youll-repeat-classes-throughout-your-html-markup\">If you use single-function selectors, you’ll repeat classes throughout your HTML markup.</h2>\n\n<p>This is the Bootstrap approach: all the visual styles you want to use from Bootstrap’s CSS require you to add classes to your markup.</p>\n\n<h2 id=\"so-stop-worrying-about-repetition\">So stop worrying about repetition.</h2>\n\n<p>Browsers are just machines and we’ve got dozens of build tools to compress &amp; minify our HTML/CSS/JS. Instead of pursuing the pipe dream of writing code as efficient as the computers that render it, let’s pursue code that we can maintain and edit for months to come. If we’re really that serious about avoiding repetition, we’d reduce our entire markup / CSS to single-character selectors, right? And if we could replace all the CSS properties with less-than-four-character abbreviations, we could save even more space! But I jest. We’re never going to do that – and we shouldn’t. We need to work hard at writing CSS that we (and our teammates) can update, change, and maintain easily.</p>\n\n<p>I’m not going to tell you how to write maintainable code: you &amp; your team know your unique constraints much better than I ever will. I will say this: having dipped my toes in BEM, SMACSS, &amp; OOCSS, I’m leaning toward mixing a flavor of BEM with <a title=\"Read Semantic CSS with Intelligent Selectors on Smashing Magazine\" href=\"http://www.smashingmagazine.com/2013/08/20/semantic-css-with-intelligent-selectors/\" target=\"_blank\">Heydon Pickering’s “Semantic CSS with Intelligent Selectors”</a> at the moment.</p>\n",
      "url": "http://localhost:4000/css/css-repetition-basically-whack-mole/",
      "summary": "<h2 id=\"if-you-never-repeat-selectors-in-your-stylesheet-youll-repeat-declarations\">If you never repeat selectors in your stylesheet, you’ll repeat declarations.</h2>\n",
      "date_published": "2014-10-14 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/managing-color-values-sass",
      "title": "Managing Color Values with Sass",
      "content_html": "<p>Read my article “<a title=\"Managing Color Values with Sass\" href=\"http://www.sitepoint.com/managing-color-values-with-sass/\" target=\"_blank\">Managing Color Values with Sass</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/managing-color-values-sass/",
      "summary": "<p>Read my article “<a title=\"Managing Color Values with Sass\" href=\"http://www.sitepoint.com/managing-color-values-with-sass/\" target=\"_blank\">Managing Color Values with Sass</a>” at SitePoint.</p>",
      "date_published": "2014-10-07 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/sass-wordpress-developers",
      "title": "Sass for WordPress Developers",
      "content_html": "<p>Read my article “<a href=\"http://www.sitepoint.com/sass-for-wordpress-developers/\">Sass for WordPress Developers</a>” at SitePoint.</p>\n\n",
      "url": "http://localhost:4000/css/sass/sass-wordpress-developers/",
      "summary": "<p>Read my article “<a href=\"http://www.sitepoint.com/sass-for-wordpress-developers/\">Sass for WordPress Developers</a>” at SitePoint.</p>\n",
      "date_published": "2014-09-17 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/custom-post-types-vs-acf-repeater-fields",
      "title": "Custom Post Types vs. ACF Repeater Fields",
      "content_html": "<p>If you’ve been using WordPress to develop custom sites for long, you’ve probably needed to help clients manage custom types of content. Those content types might include events, staff members, products, FAQs or testimonials. There are three methods you might use to add those content types to the client’s Dashboard. The worst option would be to install a plugin for each one. I don’t recommend that: multiple plugins slow sites down and you’ll probably burn a lot of time making 2-3 different plugins “fit” your design.</p>\n\n<p>The second method is to create a custom post type of your own. <a title=\"WP Types Plugin\" href=\"http://wp-types.com/\" target=\"_blank\">Types</a>, <a title=\"WP Custom Post Type UI Plugin\" href=\"https://wordpress.org/plugins/custom-post-type-ui/\" target=\"_blank\">Custom Post Type UI</a>, and <a title=\"WP Pods Plugin\" href=\"http://pods.io/\" target=\"_blank\">Pods</a> are the most popular plugins for doing this. You can also use <a title=\"WordPress Codex: register_post_type()\" href=\"http://codex.wordpress.org/Post_Types#Custom_Post_Types\" target=\"_blank\">the WP <code class=\"highlighter-rouge\">register_post_type()</code> function</a> to add your own to any theme. Creating a custom post type will add a new menu item to the Dashboard’s left menu (similar to “Post” or “Pages”). Each item created in a custom post type will be saved as a unique “post” in WordPress’s database. You can also assign custom fields and custom taxonomies to your custom post types. For instance, you might create an FAQ category to help sort frequently asked questions, or add a field for an email to be attached to an employee profile.</p>\n\n<p><img class=\"aligncenter size-full wp-image-1302\" src=\"/images/custom-post-types.png\" alt=\"screenshot of a custom post type in the WordPress dashboard\" width=\"800\" height=\"440\" /></p>\n\n<p>Another way to allow clients to add multiple pieces of complex information to a post or page is to use the <a title=\"WP Advanced Custom Fields: Repeater Field\" href=\"http://www.advancedcustomfields.com/add-ons/repeater-field/\" target=\"_blank\">Advanced Custom Fields Repeater Field</a> (this field used to be a separate premium add-on, but now is included in <a title=\"Advanced Custom Fields Pro\" href=\"http://www.advancedcustomfields.com/pro/\" target=\"_blank\">ACF Pro</a>). The repeater field lets you create a custom field that accepts multiple rows of complex data. For instance, you might add a slider repeater field to a home page that allows users to add multiple images with titles and links, or an unlimited number of Q/A pairs for a Frequently Asked Questions page.</p>\n\n<p><img class=\"aligncenter size-full wp-image-1303\" src=\"/images/repeater-field.png\" alt=\"screenshot of a repeater field in the WordPress dashboard\" width=\"890\" height=\"580\" /></p>\n\n<p>The question to answer now is, which method should you use: custom post types or repeater fields? The short answer is: “It depends.” Let’s explore several criteria that help us decide whether to use a custom post type or a repeater field to manage complex input in WordPress.</p>\n\n<h2 id=\"single-vs-archive-display\">Single vs. Archive Display</h2>\n\n<p>Will you need to display a single item of this data in a single view, or will data always be shown in lists? If you need a single item view, a custom post type is best. WordPress easily supports custom post type single views. A post type with the slug <code class=\"highlighter-rouge\">employee</code> would be displayed with a template file called <code class=\"highlighter-rouge\">single-employee.php</code>. If you’ll always display the data collected in a list or archive view, however, you may be able to use a repeater field.</p>\n\n<h2 id=\"taxonomy-organization\">Taxonomy Organization</h2>\n\n<p>Will you need to sort or filter this data with a taxonomy (category/tag) structure? If so, you’ll need to use a custom post type. The WordPress function <a title=\"WordPress Codex: register_taxonomy() function\" href=\"http://codex.wordpress.org/Function_Reference/register_taxonomy\" target=\"_blank\"><code>register_taxonomy()</code></a> allows you to create custom category / tag structures and assign them to custom post types. (The Dashboard options pages for the plugins above allow you to do this as well.) If your data never needs to be sorted of filtered, however, you might be ok with a repeater field.</p>\n\n<h2 id=\"export-functionality\">Export Functionality</h2>\n\n<p>Will you want to export all the data of this type and use it in a different site? If so, you’ll want to use a custom post type. Custom post types can be exported with WordPress’s default export functionality. An ACF repeater field, on the other hand, can only be exported as post meta-data for the post or page it’s attached to.</p>\n\n<h2 id=\"reusability\">Reusability</h2>\n\n<p>How many times will you need to display this data? If you need to display items from this custom content type in multiple places in your site, a custom post type may be easier. If you need to use data from a repeater field on multiple posts or pages, you’ll want to assign that field to an options page (also part of ACF Pro) and not to a specific post or page. Since this goal can be accomplished with both custom post types and repeater fields, this is a subjective factor as well.</p>\n\n<h2 id=\"easily-re-order-content\">Easily Re-order Content</h2>\n\n<p>If your client will want to manage a fixed order for items easily, a repeater field will probably be better. ACF allows them to drag and drop repeater field rows to re-order content quickly. A custom post type will have to rely on the <code class=\"highlighter-rouge\">menu_order</code> post-meta field: this is usable, but not easy.</p>\n\n<h2 id=\"number-of-items\">Number of Items</h2>\n\n<p>This is a fairly subjective criterion. If you think adding repeater fields to accommodate all of the data necessary will be cumbersome in the editor, you’ll probably want to use a custom post type. This is entirely up to your (and your client’s) preference.</p>\n\n<h2 id=\"template-language\">Template Language</h2>\n\n<p>How do you want to write template files for this content? If you prefer the <a title=\"WordPress Codex: get_post() function\" href=\"http://codex.wordpress.org/Template_Tags/get_posts\" target=\"_blank\"><code class=\"highlighter-rouge\">get_posts()</code> function</a> or the <a title=\"WordPress Codex: WP_Query() object\" href=\"http://codex.wordpress.org/Class_Reference/WP_Query\" target=\"_blank\"><code class=\"highlighter-rouge\">WP_Query</code> object</a>, a custom post type will fit your programming style better. If you’d rather use the ACF repeater <a title=\"WP ACF have_rows() function\" href=\"http://www.advancedcustomfields.com/resources/have_rows/\" target=\"_blank\"><code>while ( have_rows( 'field_name' ) ) { the_row(); }</code></a> loop on a page template, you can use a repeater field.</p>\n\n<h2 id=\"simplicity-of-set-up\">Simplicity of Set-Up</h2>\n\n<p>I think ACF repeater fields are slightly simpler to set up than custom post types. When none of the other factors point toward custom post types, the repeater field lets me develop more quickly. This is subjective, though: you may find custom post types easier than repeater fields, and that’s OK!</p>\n\n<h2 id=\"user-friendliness\">User-Friendliness</h2>\n\n<p>Most clients will prefer to edit content for a page on that page’s editor. If a repeater field meets all the factors above, it will make things easier for your clients. WordPress is (to those of us who develop) a pretty simple CMS, but to our clients it can be complicated and intimidating. If your custom data will only appear on one page, it’ll be easier for your clients if you attach a repeater field to that page.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>Most of the factors above point toward using a custom post type, but there are some situations where using a repeater field will serve your purposes as well. Other than the non-negotiable feature issues (taxonomies, exportability, etc), it’s important to choose the set-up that will be most usable for your clients. Hopefully this list helps you build a better CMS experience for your clients. Check out the flow chart below for the most important factors to consider.</p>\n\n<p><img class=\"aligncenter wp-image-1305 size-full\" src=\"/images/CPT-ACF.png\" alt=\"low chart helping developers choose custom post types of advanced custom fields repeater fields.\" width=\"1610\" height=\"535\" /></p>\n",
      "url": "http://localhost:4000/wordpress/custom-post-types-vs-acf-repeater-fields/",
      "summary": "<p>If you’ve been using WordPress to develop custom sites for long, you’ve probably needed to help clients manage custom types of content. Those content types might include events, staff members, products, FAQs or testimonials. There are three methods you might use to add those content types to the client’s Dashboard. The worst option would be to install a plugin for each one. I don’t recommend that: multiple plugins slow sites down and you’ll probably burn a lot of time making 2-3 different plugins “fit” your design.</p>\n",
      "date_published": "2014-09-16 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/use-cases-css-variables",
      "title": "Use Cases for CSS Variables",
      "content_html": "<p>It’s time to start exploring use cases for CSS variables, now that <a title=\"CSS Variable data on Can I Use\" href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\">Firefox supports them</a>. <a title=\"Chrome no longer supports CSS variables\" href=\"http://stackoverflow.com/questions/18466569/enable-experimental-webkit-features-chrome-css-css3-variables\" target=\"_blank\">Chrome has toyed with CSS variables</a> before. That means that <strong>this post &amp; all the embedded pens will only work in Firefox</strong>.</p>\n\n<p>If you’re a fan of pre-processors, you might share my first reaction to CSS variables: “I’m already using variables in [Sass/Less/Stylus]; why introduce something new?” First, the ability to change these values live in a browser is pretty powerful. Second, native CSS variables will allow us to write lighter, more efficient stylesheets. In a series of follow-up posts to this one, I’ll go more in-depth comparing pre-processor variables with native CSS variables for each of the use cases introduced below.</p>\n\n<h2 id=\"basic-syntax\">Basic Syntax</h2>\n\n<p>To define a native CSS variable globally, use the following syntax:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">:root</span><span class=\"p\">{</span>\n  <span class=\"py\">--color-primary</span><span class=\"p\">:</span> <span class=\"m\">#001f3f</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>To use that variable in a property, call it with the <code class=\"highlighter-rouge\">var()</code> wrapper:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">p</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--color-primary</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Because that variable is scoped to <code class=\"highlighter-rouge\">:root</code>, it’s global. Any place in the stylesheet it appears, it will return that same value. CSS variables can be scoped to any element, however, making it possible to create “exceptions.” The following use cases show the power of locally-scoped CSS variables.</p>\n\n<h2 id=\"use-cases\">Use Cases</h2>\n\n<h3 id=\"colors\">Colors</h3>\n\n<p>Let’s look at an example of scoping variables for color changes. In this use case, the “normal” color for <code class=\"highlighter-rouge\">&lt;h1&gt;</code> elements will be the site accent red. However, the site also uses <code class=\"highlighter-rouge\">&lt;h1&gt;</code> elements for the titles of widgets in the <code class=\"highlighter-rouge\">&lt;aside&gt;</code> sidebar. We can redeclare the <code class=\"highlighter-rouge\">--color-accent</code> variable in an <code class=\"highlighter-rouge\">&lt;aside&gt;</code>: now any <code class=\"highlighter-rouge\">&lt;h1&gt;</code> in a widget will be orange instead of red.</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">:root</span><span class=\"p\">{</span>\n  <span class=\"py\">--color-accent</span><span class=\"p\">:</span> <span class=\"m\">#ff4136</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--color-accent</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">aside</span> <span class=\"p\">{</span>\n  <span class=\"py\">--color-accent</span><span class=\"p\">:</span> <span class=\"m\">#ff851b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"font-sizes\">Font Sizes</h3>\n\n<p>Font sizes can be changed with CSS variable scoping as well. This example works well in the same scenario as the sidebar colors above:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">:root</span><span class=\"p\">{</span>\n  <span class=\"py\">--heading-size</span><span class=\"p\">:</span> <span class=\"m\">32px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">h1</span> <span class=\"p\">{</span>\n  <span class=\"nl\">font-size</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--heading-size</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">aside</span> <span class=\"p\">{</span>\n  <span class=\"py\">--heading-size</span><span class=\"p\">:</span> <span class=\"m\">24px</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"svgs\">SVGs</h3>\n\n<p>Inline SVG images can be styled with CSS: variables can change SVG colors based on context. Amelia Bellamy-Royds has already written a <a title=\"CSS Variables and SVGs\" href=\"http://codepen.io/AmeliaBR/thoughts/customizable-svg-icons-css-variables\" target=\"_blank\">great CodePen blog post on SVGs and CSS variables</a>, so I’ll just link you to it and let her explain how it works.</p>\n\n<h3 id=\"grid-layouts\">Grid Layouts</h3>\n\n<p>Grid layouts are one of the trendiest parts of modern web development to automate. There are probably dozens of grid frameworks written in JS, CSS, Sass, etc. We can use native CSS variables to set up custom grid layouts simply.</p>\n\n<p>In this example, we’ll only need one set of styles for all our grid elements, regardless of the number of columns they’ll be presented with. (Note, this is a really simplistic grid layout.)</p>\n\n<p>Each container element will display its <code class=\"highlighter-rouge\">.grid-item</code> children according to the <code class=\"highlighter-rouge\">--grid-width</code> percentage scoped to that particular container.</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">:root</span> <span class=\"p\">{</span>\n  <span class=\"py\">--grid-width</span><span class=\"p\">:</span> <span class=\"m\">20%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.grid-item</span> <span class=\"p\">{</span>\n  <span class=\"nl\">float</span><span class=\"p\">:</span> <span class=\"nb\">left</span><span class=\"p\">;</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--grid-width</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.products-grid</span> <span class=\"p\">{</span>\n  <span class=\"py\">--grid-width</span><span class=\"p\">:</span> <span class=\"m\">25%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.portfolio-grid</span> <span class=\"p\">{</span>\n  <span class=\"py\">--grid-width</span><span class=\"p\">:</span> <span class=\"m\">33%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"column-proportions\">Column Proportions</h3>\n\n<p>Body vs. sidebar proportions can be managed with CSS variables as well:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">:root</span><span class=\"p\">{</span>\n  <span class=\"py\">--content-width</span><span class=\"p\">:</span> <span class=\"m\">75%</span><span class=\"p\">;</span>\n  <span class=\"py\">--sidebar-width</span><span class=\"p\">:</span> <span class=\"m\">25%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.page-content</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--content-width</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.page-sidebar</span> <span class=\"p\">{</span>\n  <span class=\"nl\">width</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--sidebar-width</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.has-wide-sidebar</span> <span class=\"p\">{</span>\n  <span class=\"py\">--content-width</span><span class=\"p\">:</span> <span class=\"m\">62.5%</span><span class=\"p\">;</span>\n  <span class=\"py\">--sidebar-width</span><span class=\"p\">:</span> <span class=\"m\">37.5%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"buttons\">Buttons</h3>\n\n<p>Next to grid layouts, buttons are everyone’s favorite place to automate styling. CSS variables are useful here.</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nd\">:root</span><span class=\"p\">{</span>\n  <span class=\"py\">--button-color</span><span class=\"p\">:</span> <span class=\"m\">#ff4136</span><span class=\"p\">;</span>\n  <span class=\"py\">--button-color-dark</span><span class=\"p\">:</span> <span class=\"m\">#cc0e03</span><span class=\"p\">;</span>\n  <span class=\"py\">--button-color-light</span><span class=\"p\">:</span> <span class=\"m\">#ff7469</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.button</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--button-color</span><span class=\"p\">);</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">1px</span> <span class=\"m\">2px</span> <span class=\"m\">0</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--button-color-dark</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.button</span><span class=\"nd\">:hover</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--button-color-dark</span><span class=\"p\">);</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--button-color-dark</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.button</span><span class=\"nd\">:active</span> <span class=\"p\">{</span>\n  <span class=\"nl\">background-color</span><span class=\"p\">:</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--button-color-light</span><span class=\"p\">);</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"m\">0</span> <span class=\"n\">var</span><span class=\"p\">(</span><span class=\"n\">--button-color-dark</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.contact-form</span> <span class=\"p\">{</span>\n  <span class=\"py\">--button-color</span><span class=\"p\">:</span> <span class=\"m\">#ff851b</span><span class=\"p\">;</span>\n  <span class=\"py\">--button-color-dark</span><span class=\"p\">:</span> <span class=\"m\">#cc5200</span><span class=\"p\">;</span>\n  <span class=\"py\">--button-color-light</span><span class=\"p\">:</span> <span class=\"m\">#ffb84e</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h3 id=\"js-changes\">JS Changes</h3>\n\n<p>One benefit of native CSS variables is that they can be changed in real time with JavaScript. This is nice for user-enabled theme changing or for easily demoing multiple layouts / color scheme options for a client. The following JS function changes the value of the <code class=\"highlighter-rouge\">--color-primary</code> variable.</p>\n\n<div class=\"language-js highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"kd\">var</span> <span class=\"nx\">body</span> <span class=\"o\">=</span> <span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementsByTagName</span><span class=\"p\">(</span><span class=\"s2\">\"body\"</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"kd\">function</span> <span class=\"nx\">change_vars</span><span class=\"p\">(){</span>\n  <span class=\"k\">if</span> <span class=\"p\">(</span> <span class=\"o\">!</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">contains</span><span class=\"p\">(</span><span class=\"s1\">'changed'</span><span class=\"p\">)</span> <span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">setProperty</span><span class=\"p\">(</span><span class=\"s1\">'--color-primary'</span><span class=\"p\">,</span> <span class=\"s1\">'#8e44ad'</span><span class=\"p\">);</span>\n    <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"s1\">'changed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n    <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">style</span><span class=\"p\">.</span><span class=\"nx\">setProperty</span><span class=\"p\">(</span><span class=\"s1\">'--color-primary'</span><span class=\"p\">,</span> <span class=\"s1\">'#2980b9'</span><span class=\"p\">);</span>\n    <span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">classList</span><span class=\"p\">.</span><span class=\"nx\">remove</span><span class=\"p\">(</span><span class=\"s1\">'changed'</span><span class=\"p\">);</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>So many good uses, and we’re barely getting started… Use the comments to ask follow-up questions or share your ideas for using CSS variables. And of course, stay tuned for more detailed posts comparing native CSS variables to pre-processor variables in these use cases.</p>\n\n<p>You can see all these <a title=\"CSS Variables: CodePen Demo\" href=\"http://codepen.io/jdsteinbach/pen/AeEwk\" target=\"_blank\">CSS Variable use cases in a single CodePen</a> here.</p>\n",
      "url": "http://localhost:4000/css/use-cases-css-variables/",
      "summary": "<p>It’s time to start exploring use cases for CSS variables, now that <a title=\"CSS Variable data on Can I Use\" href=\"http://caniuse.com/#feat=css-variables\" target=\"_blank\">Firefox supports them</a>. <a title=\"Chrome no longer supports CSS variables\" href=\"http://stackoverflow.com/questions/18466569/enable-experimental-webkit-features-chrome-css-css3-variables\" target=\"_blank\">Chrome has toyed with CSS variables</a> before. That means that <strong>this post &amp; all the embedded pens will only work in Firefox</strong>.</p>\n",
      "date_published": "2014-09-12 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/getting-started-advanced-custom-fields-acf",
      "title": "Getting Started with Advanced Custom Fields (ACF)",
      "content_html": "<p>Read my article “<a title=\"Getting Started with Advanced Custom Fields (ACF)\" href=\"http://www.sitepoint.com/getting-started-with-advanced-custom-fields/\" target=\"_blank\">Getting Started with Advanced Custom Fields (ACF)</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/wordpress/getting-started-advanced-custom-fields-acf/",
      "summary": "<p>Read my article “<a title=\"Getting Started with Advanced Custom Fields (ACF)\" href=\"http://www.sitepoint.com/getting-started-with-advanced-custom-fields/\" target=\"_blank\">Getting Started with Advanced Custom Fields (ACF)</a>” at SitePoint.</p>",
      "date_published": "2014-09-02 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/using-sass-build-custom-type-scale-vertical-rhythm",
      "title": "Using Sass to Build a Custom Type Scale with Vertical Rhythm",
      "content_html": "<p>Read my article “<a title=\"Using Sass to Build a Custom Type Scale with Vertical Rhythm\" href=\"http://www.sitepoint.com/using-sass-build-custom-type-scale-vertical-rhythm/\" target=\"_blank\">Using Sass to Build a Custom Type Scale with Vertical Rhythm</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/css/sass/using-sass-build-custom-type-scale-vertical-rhythm/",
      "summary": "<p>Read my article “<a title=\"Using Sass to Build a Custom Type Scale with Vertical Rhythm\" href=\"http://www.sitepoint.com/using-sass-build-custom-type-scale-vertical-rhythm/\" target=\"_blank\">Using Sass to Build a Custom Type Scale with Vertical Rhythm</a>” at SitePoint.</p>",
      "date_published": "2014-08-13 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/stop-abusing-bootstrap-foundation",
      "title": "Stop (Ab)using Bootstrap / Foundation!",
      "content_html": "<p><a title=\"Bootstrap\" href=\"http://getbootstrap.com/\" target=\"_blank\">Bootstrap</a> and <a title=\"Foundation\" href=\"http://foundation.zurb.com/\" target=\"_blank\">Foundation</a> are tools that get a new development project off the ground fast. I appreciate the need to work fast; I really do. But fast doesn’t end when you’re done wireframing a site’s macro layout. Fast is absolutely essential for every end user who uses your site after launch. And chances are, if you’re gaining speed by framing your sites with Bootstrap or Foundation, you’re cheating your users out of speed in real life. Performance is just one of several problems with HTML class-based layout. Let’s walk through the big issues here:</p>\n\n<h2 id=\"separation-of-powers\">Separation of Powers</h2>\n\n<p>Programming languages have strengths and weaknesses; some even have specific purposes. This is especially true with HTML &amp; CSS. HTML serves to outline your content. Properly formatted HTML tells search engines &amp; accessibility tools how your pages are structured and what content is most important. CSS, on the other hand, provides design / layout / style for that content. No one tries to write content in CSS (cough, cough, don’t abuse <code class=\"highlighter-rouge\">content: 'My Content';</code> either!). So why are we so set on using HTML classes to control visual layout. That’s exactly what Bootstrap, Foundation, etc, do: they require you to use a very specific HTML class naming convention in order to render your site’s layout correctly. Yes, ultimately the margins and widths and floats are in CSS, but without HTML classes, these grid systems are worthless. To be honest, if we’re going to have to use a strict system of class names on an overly-complex HTML structure (real code from a project I recently inherited: <code class=\"highlighter-rouge\">class=\"small-12 medium-10 medium-centered xlarge-8 columns intro\"</code>), we might as well go back to table-based design and inline styles! (Because inline CSS is basically what all this <code class=\"highlighter-rouge\">class=\"button button-blue button-large button-border\"</code> nonsense amounts to.) When CSS replaced table-based design, the promise we developers believed was “Just change one stylesheet and your entire site layout can change!” (<a title=\"CSS Zen Garden\" href=\"http://www.csszengarden.com/\" target=\"_blank\">CSS Zen Garden</a>, anyone?) Today class-based grid systems are trying to convince us to give that beauty up. Let’s all say it together, “HTML is markup language for structuring my page content; CSS is visual styling to determine how it looks. I will not confuse them with each other.”</p>\n\n<h2 id=\"maintainability\">Maintainability</h2>\n\n<p>Back to the CSS Zen Garden ideal, I realize not every site redesign will be so drastic. But what if a “minor redesign” changes your sidebar from 33% to 25% of the width? I’m not interested in running find-replace on all my template files to change “fourcol” to “threecol” and “eightcol” to “ninecol,” all the while hoping it doesn’t unintentionally break something else! I want to go one place in my stylesheet, change those proportions, and smile. I’ve not done a huge survey or gathered data from hundreds of other devs, but in my own experience, it takes me about as much time to build a new site layout from scratch as it does to “minor layout changes” to a Bootstrap-based site. (One of these days I’ll demo <a title=\"Bourbon Neat\" href=\"http://neat.bourbon.io/\" target=\"_blank\">Bourbon Neat</a> here and show you how fast my method is!) If you’re going to be doing long-term maintenance of a site or handing it off to another developer, think twice about the start-up speed boost that Bootstrap or Foundation give you and choose a solution that will be maintainable long-term.</p>\n\n<h2 id=\"performance--bloat\">Performance &amp; Bloat</h2>\n\n<p>Bootstrap and Foundation provide every grid layout style declaration possible on a 12-column system. However, I’ve never built a site that used every layout option possible. That means that 60% or so of the grid portion of those stylesheets is bloat. (I will give Foundation credit: they’ve got a <a title=\"Foundation - Configure Download\" href=\"http://foundation.zurb.com/develop/download.html\" target=\"_blank\">config page</a> for downloading only the components you want, but that still doesn’t fix the grid bloat.) I’ve heard the answer to this argument: “It’s 2014: 1000 lines of CSS isn’t much more than 100 lines.” (Literally, I heard that this morning.) I’d reply, “It’s 2014, major search engines are prioritizing SERPs by page speed and mobile data-network traffic is constantly growing.” Choosing to ignore easy performance gains for “speed in development” simply isn’t a legitimate option.</p>\n\n<h2 id=\"concessions\">Concessions</h2>\n\n<p>I’ll concede a few points about using a framework like Bootstrap or Foundation: if you’re at an agency that requires a framework or passing work off to devs who use a framework, that’s a decent reason to use one. If you have a super-cheap client who needs a quick one-off site with no maintenance, that’s a reason, but not a good one. So, if you absolutely must use Bootstrap, Foundation, etc, here’s how:</p>\n\n<h2 id=\"clean-up-your-framework-output\">Clean Up Your Framework Output</h2>\n\n<p>If you’re only using 4, 6, 8, and 12 columns widths on your grid, delete the other rulesets. If you’re only using orange and blue buttons, delete the other rulesets. If you’re only using a dozen glyphs in the icon font, … you get the picture. If you’ve got a Node.js-, Grunt-, or Gulp-based workflow, <a title=\"Uncss\" href=\"https://github.com/giakki/uncss\" target=\"_blank\">Uncss</a> will help automate this clean-up process. So stop (ab)using Bootstrap and Foundation. If possible, replace them with gridless HTML and all-CSS layout. If you must use them, clean out their bloat before you launch the site.</p>\n",
      "url": "http://localhost:4000/css/stop-abusing-bootstrap-foundation/",
      "summary": "<p><a title=\"Bootstrap\" href=\"http://getbootstrap.com/\" target=\"_blank\">Bootstrap</a> and <a title=\"Foundation\" href=\"http://foundation.zurb.com/\" target=\"_blank\">Foundation</a> are tools that get a new development project off the ground fast. I appreciate the need to work fast; I really do. But fast doesn’t end when you’re done wireframing a site’s macro layout. Fast is absolutely essential for every end user who uses your site after launch. And chances are, if you’re gaining speed by framing your sites with Bootstrap or Foundation, you’re cheating your users out of speed in real life. Performance is just one of several problems with HTML class-based layout. Let’s walk through the big issues here:</p>\n",
      "date_published": "2014-07-31 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/creating-custom-snow-fall-designs-wordpress",
      "title": "Creating Custom “Snow Fall” Designs in WordPress",
      "content_html": "<p>Read my article “<a title=\"Creating Custom “Snow Fall” Designs in WordPress\" href=\"http://www.sitepoint.com/acf-flexible-content-fields/\" target=\"_blank\">Creating Custom “Snow Fall” Designs in WordPress</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/wordpress/creating-custom-snow-fall-designs-wordpress/",
      "summary": "<p>Read my article “<a title=\"Creating Custom “Snow Fall” Designs in WordPress\" href=\"http://www.sitepoint.com/acf-flexible-content-fields/\" target=\"_blank\">Creating Custom “Snow Fall” Designs in WordPress</a>” at SitePoint.</p>",
      "date_published": "2014-07-31 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/wordpress-theme-development-getting-started-underscores-_s",
      "title": "WordPress Theme Development: Getting Started with Underscores (_s)",
      "content_html": "<p>Read my article “<a title=\"WordPress Theme Development: Getting Started with Underscores (_s)\" href=\"http://www.sitepoint.com/wordpress-theme-development-getting-started-with-underscores/\" target=\"_blank\">WordPress Theme Development: Getting Started with Underscores (_s)</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/wordpress/wordpress-theme-development-getting-started-underscores-_s/",
      "summary": "<p>Read my article “<a title=\"WordPress Theme Development: Getting Started with Underscores (_s)\" href=\"http://www.sitepoint.com/wordpress-theme-development-getting-started-with-underscores/\" target=\"_blank\">WordPress Theme Development: Getting Started with Underscores (_s)</a>” at SitePoint.</p>",
      "date_published": "2014-07-24 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/custom-post-types-take-wordpress-beyond-blogging",
      "title": "Custom Post Types: Take WordPress Beyond Blogging",
      "content_html": "<p>Read my article “<a title=\"Custom Post Types: Take WordPress Beyond Blogging\" href=\"http://www.sitepoint.com/custom-post-types-take-wordpress-beyond-blogging/\" target=\"_blank\">Custom Post Types: Take WordPress Beyond Blogging</a>” at SitePoint.</p>\n",
      "url": "http://localhost:4000/wordpress/custom-post-types-take-wordpress-beyond-blogging/",
      "summary": "<p>Read my article “<a title=\"Custom Post Types: Take WordPress Beyond Blogging\" href=\"http://www.sitepoint.com/custom-post-types-take-wordpress-beyond-blogging/\" target=\"_blank\">Custom Post Types: Take WordPress Beyond Blogging</a>” at SitePoint.</p>",
      "date_published": "2014-06-30 00:00:00 -0600"
      
    },
  
    {
      "id": "/wordpress/using-svgs-wordpress",
      "title": "Using SVGs in WordPress",
      "content_html": "<p>SVGs are basically the bomb-diggety for vector images on the web. They’re crisp and clean at any size or resolution, making them perfect for icons, line art, or other vector artwork. Unfortunately, using SVGs in WordPress is not supported by default. This post shows you how to fix three significant issues with using SVGs in WordPress: uploading SVGs, displaying SVGs in the Editor and custom fields, and inlining SVG code in a post or page template.</p>\n\n<h2 id=\"allowing-svgs-in-wordpress-uploader\">Allowing SVGs in WordPress Uploader</h2>\n\n<p>WordPress, however, doesn’t allow you to upload SVGs. By default, it treats them as a security risk (I’d assume this has something to do with the possibility of executing code through SVG’s XML file format, but maybe someone can leave a more detailed answer in the comments…). Step one to using SVGs in WordPress is to give the Media Library Uploader permission to upload them. The following PHP snippet (pasted in your theme’s functions.php file) will do that:</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code>function svg_mime_types( $mimes ) {\n  $mimes['svg'] = 'image/svg+xml';\n  return $mimes;}\nadd_filter( 'upload_mimes', 'svg_mime_types' );\n</code></pre>\n</div>\n\n<p>That snippet comes from <a title=\"CSS-Tricks: Allow SVG through WordPress Uploader\" href=\"http://css-tricks.com/snippets/wordpress/allow-svg-through-wordpress-media-uploader/\" target=\"_blank\">CSS-Tricks.com</a>.</p>\n\n<h2 id=\"displaying-svgs-in-wordpress-dashboard\">Displaying SVGs in WordPress Dashboard</h2>\n\n<div id=\"attachment_1251\" style=\"width: 298px\" class=\"wp-caption alignright\">\n  <img class=\"size-medium wp-image-1251\" src=\"/images/Screen-Shot-2014-06-23-at-4.00.54-PM-288x300.png\" alt=\"Default display of SVGs in WordPress custom field\" width=\"288\" height=\"300\" />\n  <p class=\"wp-caption-text\">Whoops, this SVG is huge!</p>\n</div>\n\n<p>Now that you can successfully upload SVGs to your Media Library, you’re about to run into a pretty nasty display problem: the SVG is either too small or too big. If you put the SVG in the editor inline, you’ll end up with the default height/width attributes set to 1px × 1px: practically invisible. If, on the other hand, you’re using an SVG in a custom field, the image becomes huge, filling all the possible width of the column (and a proportional height). To fix this, we need to add some CSS to WordPress’s Dashboard. The following PHP snippet (again, added to functions.php) will accomplish that:</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code>function svg_size() {\n  echo '<span class=\"nt\">&lt;style&gt;</span>\n    <span class=\"nt\">svg</span><span class=\"o\">,</span> <span class=\"nt\">img</span><span class=\"o\">[</span><span class=\"nt\">src</span><span class=\"o\">*=</span><span class=\"s1\">\".svg\"</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n      <span class=\"nl\">max-width</span><span class=\"p\">:</span> <span class=\"m\">150px</span> <span class=\"cp\">!important</span><span class=\"p\">;</span>\n      <span class=\"nl\">max-height</span><span class=\"p\">:</span> <span class=\"m\">150px</span> <span class=\"cp\">!important</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"nt\">&lt;/style&gt;</span>';\n}\nadd_action('admin_head', 'svg_size');\n</code></pre>\n</div>\n\n<p>What we just did was insert a small CSS declaration into every Dashboard page. The selector finds <code>&lt;svg&gt;</code> elements, as well as images with <code>.svg</code> in their src attribute. It then overrides their default attributes (1px × 1px in the Editor, no limits in a custom field) and fits them all into a 150px × 150px box.</p>\n\n<div id=\"attachment_1250\" style=\"width: 1230px\" class=\"wp-caption aligncenter\">\n  <img class=\"size-full wp-image-1250\" src=\"/images/Screen-Shot-2014-06-23-at-3.58.53-PM.png\" alt=\"Improved display of SVGs in WordPress custom field\" width=\"1220\" height=\"230\" />\n  <p class=\"wp-caption-text\">Ah, this is much better!</p>\n</div>\n\n<p>Note: this is only a problem if you’re optimizing your SVGs with a tool that removes the height and width attributes. You should optimize, of course! Just be aware that if your optimizer removes height/width, you’ll need to use CSS to control the layout size of the SVG on the front-end as well as here in the Dashboard.</p>\n\n<h2 id=\"inlining-svgs-in-wordpress-themes\">Inlining SVGs in WordPress Themes</h2>\n\n<p>Now let’s push a little farther. Let’s take a common SVG case use and solve another WordPress-related SVG issue. We’ll pretend for a moment that we’re building a website for a manufacturing company and we’re using a custom post type for each “step” in their process. Each step has an icon that’s an SVG, so we add a custom field for “Step Icon” to the post type. We want those icons to change color on hover, however. The normal dark blue color should become a medium gray. In order to transition colors on <code>:hover</code> with only CSS, we need to inline the SVG as XML in the page. Using <code>&lt;img src=\"image.svg\"&gt;</code> or using an SVG background-image won’t allow us to control the colors with CSS. Assuming you’re using the <a title=\"Advanced Custom Fields WordPress Plugin\" href=\"http://www.advancedcustomfields.com/\" target=\"_blank\">ACF plugin for your custom fields</a>, the following PHP snippet belongs in the template file you use for displaying process steps where you want to inline the SVG file:</p>\n\n<div class=\"language-php highlighter-rouge\"><pre class=\"highlight\"><code>if ( get_field( 'step_icon' ) ) {\n  $icon = get_field( 'step_icon' );\n  if ( strpos( $icon, '.svg' ) !== false ) {\n    $icon = str_replace( site_url(), '', $icon);\n    print '<span class=\"nt\">&lt;div</span> <span class=\"na\">class=</span><span class=\"s\">\"step-icon\"</span><span class=\"nt\">&gt;</span>';\n    include(ABSPATH . $icon);\n    print '<span class=\"nt\">&lt;/div&gt;</span>';\n   }\n}\n</code></pre>\n</div>\n\n<p>Of course, if you’re using a different plugin for your custom fields (Types, Pods, etc), you’ll need to change <code>get_field()</code> to whatever function that plugin provides (or use WP’s core <a title=\"WordPress Codex: get_post_meta()\" href=\"http://codex.wordpress.org/Function_Reference/get_post_meta\" target=\"_blank\"><code>get_post_meta()</code></a> function). That snippet checks to make sure the image is really an SVG, then strips out the WP site_url text. (This is necessary because the <code>include()</code> function on a full http[s] url is a cross-site-scripting vulnerability.) The <code>include()</code> function prints the SVG as XML to your page’s source. The following CSS (or something similar) in your style.css will allow you to change the color on hover:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.step-icon</span> <span class=\"nt\">svg</span> <span class=\"nt\">path</span><span class=\"o\">,</span>\n<span class=\"nc\">.step-icon</span> <span class=\"nt\">svg</span> <span class=\"nt\">polygon</span> <span class=\"p\">{</span>\n  <span class=\"py\">fill</span><span class=\"p\">:</span> <span class=\"m\">#383b52</span><span class=\"p\">;</span> <span class=\"c\">/* Your color here. */</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.step-icon</span><span class=\"nd\">:hover</span> <span class=\"nt\">svg</span> <span class=\"nt\">path</span><span class=\"o\">,</span>\n<span class=\"nc\">.step-icon</span><span class=\"nd\">:hover</span> <span class=\"nt\">svg</span> <span class=\"nt\">polygon</span> <span class=\"p\">{</span>\n  <span class=\"py\">fill</span><span class=\"p\">:</span> <span class=\"m\">#444</span><span class=\"p\">;</span> <span class=\"c\">/* Your color here. */</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Now you should get this delightful hover effect:</p>\n\n<p><img class=\"alignright size-full wp-image-1254\" src=\"/images/svg-hover.gif\" alt=\"CSS Hover Effects for Inline SVGs in WordPress\" width=\"301\" height=\"200\" /></p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>There you have it: three code snippets to allow you to (1) upload SVGs to your WordPress Media Library, (2) display those SVGs nicely in Dashboard, and (3) inline those SVGs in WordPress theme files. You’ll want to be aware that <a title=\"Can I Use: SVG\" href=\"http://caniuse.com/svg\" target=\"_blank\">SVGs aren’t supported by IE8 and down</a>, so you’ll need to work out a fallback if a missing SVG image would create a usability or accessibility problem.</p>\n\n<p>If you’ve got questions or other great ideas for using SVGs in WordPress, please leave a comment!</p>\n",
      "url": "http://localhost:4000/wordpress/using-svgs-wordpress/",
      "summary": "<p>SVGs are basically the bomb-diggety for vector images on the web. They’re crisp and clean at any size or resolution, making them perfect for icons, line art, or other vector artwork. Unfortunately, using SVGs in WordPress is not supported by default. This post shows you how to fix three significant issues with using SVGs in WordPress: uploading SVGs, displaying SVGs in the Editor and custom fields, and inlining SVG code in a post or page template.</p>\n",
      "date_published": "2014-06-24 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/css-sass-wordpress",
      "title": "From CSS to Sass in WordPress",
      "content_html": "<p>I gave the talk <em>From CSS to Sass in WordPress</em> at <a title=\"WP Summit 2014\" href=\"http://environmentsforhumans.com/2014/wp-summit/\" target=\"_blank\">WP Summit 2014</a>. This page contains additional resources and corrections to the slides. <a href=\"/images/CSS-Sass-WP.pdf\" title=\"From CSS to Sass in WordPress Slides\">Download the current slides here (PDF).</a></p>\n\n<h2 id=\"missing-slide\">Missing Slide</h2>\n\n<p><a href=\"/images/missing-slide.jpg\">This slide was missing</a> the first time I gave this talk at WP Summit.</p>\n\n<h2 id=\"compilers\">Compilers</h2>\n\n<h3 id=\"gui-compiler-apps\">GUI Compiler Apps</h3>\n\n<ul>\n  <li><a href=\"http://koala-app.com/\">Koala</a>: Free (Windows, Mac, Linux)</li>\n  <li><a href=\"http://compass.kkbox.com/\">Compass.app</a>: $10 (Windows, Mac, Linux)</li>\n  <li><a href=\"http://mhs.github.io/scout-app\">Scout</a>: Free (Windows, Mac)</li>\n  <li><a href=\"http://incident57.com/codekit\">Codekit</a>: $30 (Mac)</li>\n</ul>\n\n<h3 id=\"cli-compilers\">CLI Compilers</h3>\n\n<ul>\n  <li><a href=\"http://sass-lang.com/install\">Ruby Sass</a></li>\n  <li><a href=\"http://compass-style.org/install/\">Ruby Compass</a></li>\n</ul>\n\n<h3 id=\"task-runner-compilers\">Task Runner Compilers</h3>\n\n<ul>\n  <li><a href=\"https://github.com/gruntjs/grunt-contrib-sass\">Grunt Sass (Ruby)</a></li>\n  <li><a href=\"https://github.com/gruntjs/grunt-contrib-compass\">Grunt Compass (Ruby)</a></li>\n  <li><a href=\"https://github.com/sindresorhus/grunt-sass\">Grunt Sass (node-sass)</a></li>\n  <li><a href=\"https://www.npmjs.com/package/gulp-ruby-sass\">Gulp Sass (Ruby)</a></li>\n  <li><a href=\"https://www.npmjs.com/package/gulp-compass\">Gulp Compass (Ruby)</a></li>\n  <li><a href=\"https://www.npmjs.com/package/gulp-sass\">Gulp Sass (node-sass)</a></li>\n</ul>\n\n<h2 id=\"additional-reading\">Additional Reading</h2>\n\n<ul>\n  <li><a href=\"http://www.sitepoint.com/sass-for-wordpress-developers/\">“Sass for WordPress Developers,” James Steinbach</a></li>\n  <li><a href=\"http://css-tricks.com/compass-compiling-and-wordpress-themes/\">“Compass Compiling and WordPress Themes,” Chris Coyier</a></li>\n  <li><a href=\"http://elegantthemes.com/blog/tips-tricks/how-to-use-sass-with-wordpress-a-step-by-step-guide\">“How to Use Sass with WordPress,” Andy Leverenz</a></li>\n  <li><a href=\"http://wordpress.tv/2014/11/11/tracy-rotton-getting-sassy-with-wordpress/\">“Getting Sassy with WordPress”, Tracy Rotton</a></li>\n  <li><a href=\"http://www.wpbeginner.com/wp-tutorials/introduction-to-sass-for-new-wordpress-theme-designers/\">“Introduction to Sass for New WordPress Theme Designers,” WPBeginner</a></li>\n  <li><a href=\"http://code.tutsplus.com/tutorials/a-wordpress-development-process-using-sass-and-compass--cms-21861\">“A WordPress Development Process Using Sass and Compass”, Yanko Dimitrov</a></li>\n  <li><a href=\"http://godbolt.me/blog/get-your-sass-in-line.html\">“Get Your Sass in Line,” Micah Godbolt</a></li>\n  <li><a href=\"http://sitepoint.com/architecture-sass-project/\">“Architecture for a Sass Project,” Hugo Giraudel</a></li>\n  <li><a href=\"https://medium.com/@timodwhit/sass-partials-and-the-problems-surrounding-them-1d9217aa6dee\">“Sass Partials and the Problems Surrounding Them”, Tim Whitney</a></li>\n  <li><a href=\"http://blog.evernote.com/tech/2014/12/17/evernote-handles-sass-architecture/\">“How Evernote handles their Sass Architecture”</a></li>\n</ul>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<ul>\n  <li><a title=\"Sass Documentation\" href=\"http://sass-lang.com/\" target=\"_blank\">Sass</a></li>\n  <li><a title=\"Compass Documentation\" href=\"http://compass-style.org/\" target=\"_blank\">Compass</a></li>\n  <li><a title=\"Bourbon Documentation\" href=\"http://bourbon.io/docs/\" target=\"_blank\">Bourbon</a></li>\n  <li><a title=\"Susy Documentation\" href=\"http://susydocs.oddbird.net/\" target=\"_blank\">Susy (grids)</a></li>\n  <li><a title=\"SassMeister App\" href=\"http://sassmeister.com/\" target=\"_blank\">SassMeister App</a></li>\n</ul>\n\n<h2 id=\"full-slides\">Full Slides</h2>\n\n<p><a href=\"/images/CSS-Sass-WP.pdf\" title=\"From CSS to Sass in WordPress Slides\">From CSS to Sass in WordPress Slides</a></p>\n\n",
      "url": "http://localhost:4000/css/css-sass-wordpress/",
      "summary": "<p>I gave the talk <em>From CSS to Sass in WordPress</em> at <a title=\"WP Summit 2014\" href=\"http://environmentsforhumans.com/2014/wp-summit/\" target=\"_blank\">WP Summit 2014</a>. This page contains additional resources and corrections to the slides. <a href=\"/images/CSS-Sass-WP.pdf\" title=\"From CSS to Sass in WordPress Slides\">Download the current slides here (PDF).</a></p>\n",
      "date_published": "2014-06-18 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/663399becca",
      "title": "#663399becca",
      "content_html": "<p>I’ve never experienced <a href=\"http://meyerweb.com/eric/thoughts/2014/06/09/in-memoriam-2/\" title=\"Eric Meyer - In Memoriam\">what Eric Meyer and his family have experienced in Rebecca’s death</a>. I can’t begin to imagine all the emotions and feelings and pressure and grief they’re in the middle of. <a href=\"http://www.zeldman.com/2014/06/10/the-color-purple/\" title=\"The Color Purple\">Colors</a> and hashtags seem like such a feeble way to show support, but I hope they find strength and encouragement in these small expressions.</p>\n\n<p>Eric’s transparency through the lengthy struggle with Rebecca’s cancer has been humbling, painful, encouraging, witty, and real. My respect for him as a father quickly eclipsed my respect for him as a developer. And to be completely honest, I wouldn’t be here today without his <em>CSS: The Definitive Guide</em>. His open expression of his family’s struggle drew me to tears, made me laugh, drove me to prayer, and caused me to care deeply about a sweet girl I’ve never met.</p>\n\n<p>The most heart-breaking tweets I read were ones that shared Rebecca’s simple, sweet, childlike responses to the horrible reality of her cancer. Cancer sucks all the time, but when it strikes a six-year-old it <em>really</em> sucks. No child should have to face the realities she faced, but she seemed so brave. Half the time I didn’t know whether to smile or cry (or both).</p>\n\n<p>Eric, you and your family are in my prayers now (as you’ve been for months) and I wish you all the support and strength in the world. I hope you find moments of joy in the midst of your grief.</p>\n\n<p><a title=\"Twitter - #663399becca\" href=\"https://twitter.com/hashtag/663399becca\" target=\"_blank\">#663399becca</a></p>\n\n",
      "url": "http://localhost:4000/css/663399becca/",
      "summary": "<p>I’ve never experienced <a href=\"http://meyerweb.com/eric/thoughts/2014/06/09/in-memoriam-2/\" title=\"Eric Meyer - In Memoriam\">what Eric Meyer and his family have experienced in Rebecca’s death</a>. I can’t begin to imagine all the emotions and feelings and pressure and grief they’re in the middle of. <a href=\"http://www.zeldman.com/2014/06/10/the-color-purple/\" title=\"The Color Purple\">Colors</a> and hashtags seem like such a feeble way to show support, but I hope they find strength and encouragement in these small expressions.</p>\n",
      "date_published": "2014-06-12 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/using-gradient-image-css-border-image",
      "title": "Using a Gradient as the Image in a CSS Border-Image",
      "content_html": "<p>The CSS <code class=\"highlighter-rouge\">border-image</code> property accepts any valid image format for its image value. That includes CSS gradients. I regularly get design comps that include border gradients (usually a solid line that fades to transparent at both ends). Combining gradients with border-images allows me to do that without needing an image / pseudo-element hack. Here’s a pen:</p>\n\n<p class=\"codepen\" data-height=\"170\" data-theme-id=\"0\" data-slug-hash=\"vifnp\" data-default-tab=\"result\" data-line-numbers=\"\" data-animations=\"run\">\n  See the Pen <a href=\"http://codepen.io/jdsteinbach/pen/vifnp/\">Using a gradient for a border</a> by James Steinbach (<a href=\"http://codepen.io/jdsteinbach\">@jdsteinbach</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</p>\n\n<p>I’m using Sass with Bourbon’s border-image @mixin to handle cross-browser prefixing. After the gradient syntax, I used <code class=\"highlighter-rouge\">1</code> for all the slice values – this tells the browser where to offset any slice in the image (which we’re not doing). The <code class=\"highlighter-rouge\">stretch</code> value sets the gradient to 100% width &amp; height of the border-box. After the border-image declaration, I fine-tuned the actual width with the <code class=\"highlighter-rouge\">border-width</code> property, including a <code class=\"highlighter-rouge\">:last-child</code> to remove the extra border from the final item. (You can read all the juicy details about the <a href=\"http://css-tricks.com/understanding-border-image/\">CSS border-image property</a> on CSS-Tricks.)</p>\n\n<p>Using CSS gradients for border-images gives us a lot more customizability than simple solid (dashed, double, whatever) borders. For example, you could use this on an <code class=\"highlighter-rouge\">&lt;hr /&gt;</code> element or the bottom of any element to get a fade-in-out line for a divider between vertically stacked elements. You could also use a radial gradient to create more interesting picture borders. Check this pen out:</p>\n\n<p class=\"codepen\" data-height=\"540\" data-theme-id=\"0\" data-slug-hash=\"dvmwu\" data-default-tab=\"result\" data-line-numbers=\"\" data-animations=\"run\">\n  See the Pen <a href=\"http://codepen.io/jdsteinbach/pen/dvmwu/\">Using a radial gradient for a border</a> by James Steinbach (<a href=\"http://codepen.io/jdsteinbach\">@jdsteinbach</a>) on <a href=\"http://codepen.io\">CodePen</a>.\n</p>\n\n<p>Of course, there’s a big IE catch: <a title=\"Can I Use data: border-image\" href=\"http://caniuse.com/border-image\" target=\"_blank\">border-image is only supported by IE11</a>. If this ornamentation is necessary, you’ll want to include a solid border-color fall-back for IE10 &amp; down.</p>\n\n<p>What uses do you see for using CSS gradients as the image in a CSS border-image property? Please share a <a title=\"CodePen\" href=\"http://codepen.io\" target=\"_blank\">CodePen</a>, <a title=\"JSFiddle\" href=\"http://jsfiddle.net/\" target=\"_blank\">JSFiddle</a>, <a title=\"Dabbblet\" href=\"http://dabblet.com/\" target=\"_blank\">Dabbblet</a>, <a title=\"SassMeister\" href=\"http://sassmeister.com/\" target=\"_blank\">SassMeister gist</a>, (or whatever sandbox you prefer!) in the comments below!</p>\n",
      "url": "http://localhost:4000/css/using-gradient-image-css-border-image/",
      "summary": "<p>The CSS <code class=\"highlighter-rouge\">border-image</code> property accepts any valid image format for its image value. That includes CSS gradients. I regularly get design comps that include border gradients (usually a solid line that fades to transparent at both ends). Combining gradients with border-images allows me to do that without needing an image / pseudo-element hack. Here’s a pen:</p>\n",
      "date_published": "2014-06-02 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass/creating-repeatable-style-pattern-sass-placeholders-vs-mixins",
      "title": "Creating a Repeatable Style Pattern with Sass: Placeholders vs. Mixins",
      "content_html": "<p>One the biggest benefits of Sass its ability to create reusable blocks of code. I often use <a title=\"Sass Placeholder Selector Documentation\" href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_\" target=\"_blank\"><code class=\"highlighter-rouge\">%placeholders</code></a> or <a title=\"Sass Mixin Documentation\" href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\" target=\"_blank\"><code class=\"highlighter-rouge\">@mixins</code></a> to create reusable code modules. (Here’s a great article on the <a title=\"Sass: Mixin or Placeholder? by Hugo Giraurdel\" href=\"http://www.sitepoint.com/sass-mixin-placeholder/\" target=\"_blank\">difference between placeholders and mixins</a>. My short version: use mixins when you need to pass variables and placeholders when you don’t.)</p>\n\n<p>I’m working on a site now that uses the same grid pattern in multiple pages: products, services, and industries all have the same archive layout. I don’t need any variable-controlled style, so my first thought was to use a placeholder. With Sass 3.3, you can create OOCSS/BEM selectors by referencing parent selectors with <code class=\"highlighter-rouge\">&amp;</code>. In previous versions, you could create nested selectors, now you can create new selectors:</p>\n\n<p class=\"sassmeister\" data-gist-id=\"11478684\" data-height=\"480\">\n  <a href=\"http://sassmeister.com/gist/11478684\">Play with this gist on SassMeister.</a>\n</p>\n\n<p>I wondered if I could do use a <code class=\"highlighter-rouge\">%placeholder</code> at the top of a <code class=\"highlighter-rouge\">&amp;</code>-nested set of styles, extend that top placeholder in the container selector, and let Sass generate all the new <code class=\"highlighter-rouge\">&amp;</code>-selectors I need. Turns out that doesn’t work with generated selector names. (It would work just fine if my nested selectors were parent/child selectors.) See what I mean:</p>\n\n<p class=\"sassmeister\" data-gist-id=\"11481882\" data-height=\"480\">\n  <a href=\"http://sassmeister.com/gist/11481882\">Play with this gist on SassMeister.</a>\n</p>\n\n<p>Now I could use a <code class=\"highlighter-rouge\">@mixin</code> to get what I want here. That would work, but it would duplicate code: each time I run the <code class=\"highlighter-rouge\">@mixin</code>, I’ll get the same style properties repeated in a new place in my stylesheet. I don’t want to repeat myself. I can avoid repeating myself if I comma-chain all my parent selectors and call the <code class=\"highlighter-rouge\">@mixin</code> just once:</p>\n\n<p class=\"sassmeister\" data-gist-id=\"11482335\" data-height=\"480\">\n  <a href=\"http://sassmeister.com/gist/11482335\">Play with this gist on SassMeister.</a>\n</p>\n\n<p>That’s almost the DRY-est way I know to do this. If you don’t need to keep your parent selectors in separate partials, you can declare them all together and run the <code class=\"highlighter-rouge\">@mixin</code> on them all at once. However, if you like advanced Sass and don’t mind working extra hard, keep reading for the bonus content!</p>\n\n<p>If you need to keep your parent/container selectors in separate partials, but still want to avoid repeating identical style properties, you could set an empty list variable early in your project, add parent classes to it on each individual partial where appropriate, then call the <code class=\"highlighter-rouge\">@mixin</code> on that list toward the end. This gist shows what I mean:</p>\n\n<p class=\"sassmeister\" data-gist-id=\"11483068\" data-height=\"480\">\n  <a href=\"http://sassmeister.com/gist/11483068\">Play with this gist on SassMeister.</a>\n</p>\n\n<p>The final <code class=\"highlighter-rouge\">@if</code> loop (1) makes sure <code class=\"highlighter-rouge\">$parent-classes</code> isn’t empty, (2) converts all its items into a comma-separated string, and (3) calls the <code class=\"highlighter-rouge\">@mixin</code> on the classes that the string contains. Now none of the <code class=\"highlighter-rouge\">@mixin</code> code is repeated, all the parent classes can “live” in their own partials, and all the OOCSS/BEM sub-item classes are generated correctly.</p>\n\n<p>Of course, this isn’t just for grid patterns: it applies to any nested styles you need repeated for elements with different class names. Leave a comment to let me know how else you might use this pattern. Or, if you see a better way to do this, share that too, thanks!</p>\n\n<p><strong>Update:</strong></p>\n\n<p>Thanks to Hugo &amp; Stuart – Hugo posted a <a href=\"http://jamessteinbach.com/css/sass/creating-repeatable-style-pattern-sass-placeholders-vs-mixins/#comment-63\" title=\"Read Hugo's comment\">comment</a> with a cleaner version that handles the parent class list in a stringier way and makes the final <code class=\"highlighter-rouge\">@if</code> loop unnecessary. Stuart <a href=\"http://jamessteinbach.com/css/sass/creating-repeatable-style-pattern-sass-placeholders-vs-mixins/#comment-67\" title=\"Read Stuart's comment\">recommended</a> including the <code class=\"highlighter-rouge\">comma</code> to keep the list of classes comma-separated in the output.</p>\n\n<p class=\"sassmeister\" data-gist-id=\"3e6b586921f9556856fd\" data-height=\"480\">\n  <a href=\"http://sassmeister.com/gist/3e6b586921f9556856fd\">Play with this gist on SassMeister.</a>\n</p>\n\n",
      "url": "http://localhost:4000/css/sass/creating-repeatable-style-pattern-sass-placeholders-vs-mixins/",
      "summary": "<p>One the biggest benefits of Sass its ability to create reusable blocks of code. I often use <a title=\"Sass Placeholder Selector Documentation\" href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#placeholder_selectors_\" target=\"_blank\"><code class=\"highlighter-rouge\">%placeholders</code></a> or <a title=\"Sass Mixin Documentation\" href=\"http://sass-lang.com/documentation/file.SASS_REFERENCE.html#mixins\" target=\"_blank\"><code class=\"highlighter-rouge\">@mixins</code></a> to create reusable code modules. (Here’s a great article on the <a title=\"Sass: Mixin or Placeholder? by Hugo Giraurdel\" href=\"http://www.sitepoint.com/sass-mixin-placeholder/\" target=\"_blank\">difference between placeholders and mixins</a>. My short version: use mixins when you need to pass variables and placeholders when you don’t.)</p>\n",
      "date_published": "2014-05-02 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/sass-maps-breakpoint-mixin",
      "title": "Sass Maps for Breakpoint Mixin (Update)",
      "content_html": "<p>When I started using Sass, I was using the following breakpoint mixin. It’s pretty simple and common, gets the job done, but could probably be improved.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$point</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">small</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">medium</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">720px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">large</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">960px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">wide</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">1200px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s1\">'Not a valid breakpoint name.'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>I wasn’t really crazy about having the pixel values for the widths in the mixin itself. That data ought to be saved as variables in my <code class=\"highlighter-rouge\">_variables.scss</code>, not tucked in <code class=\"highlighter-rouge\">_mixins.scss</code>. So I pulled those out and made them variables. This is a little better:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$smallBP</span><span class=\"p\">:</span> <span class=\"m\">480px</span><span class=\"p\">;</span>\n<span class=\"nv\">$mediumBP</span><span class=\"p\">:</span> <span class=\"m\">720px</span><span class=\"p\">;</span>\n<span class=\"nv\">$largeBP</span><span class=\"p\">:</span> <span class=\"m\">960px</span><span class=\"p\">;</span>\n<span class=\"nv\">$wideBP</span><span class=\"p\">:</span> <span class=\"m\">1200px</span><span class=\"p\">;</span>\n\n<span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$point</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">small</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$smallBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">medium</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$mediumBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">large</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$largeBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">wide</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$wideBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s1\">'Not a valid breakpoint name.'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>But what if I get bored with small, medium, large, &amp; wide? (<a href=\"http://css-tricks.com/media-queries-sass-3-2-and-codekit/\" title=\"Chris Coyier names his media queries after bears.\">Maybe I’d rather use bears instead…</a>) Or maybe I just want to abstract my breakpoint names to variables too. <a href=\"http://blog.sass-lang.com/posts/184094-sass-33-is-released\" title=\"Sass 3.3 Release\">Sass 3.3 added Sass maps</a>: a clean way to manage an array of variable data.</p>\n\n<p>Now I put all my names and sizes in <code class=\"highlighter-rouge\">$breakpoints</code> as a map: each value pair inside holds a breakpoint name and width. This moves all my breakpoint data to a single item in my variables partial.</p>\n\n<p>There’s another big benefit to storing all the breakpoint names and sizes in a map: I can repeat myself less in the mixin itself. In the breakpoint mixin code, I now write the basic structure just once, and let the $breakpoints map data control the previously repeated part.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoints</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"n\">small</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">720px</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span> <span class=\"m\">960px</span><span class=\"o\">,</span>\n  <span class=\"n\">wide</span><span class=\"o\">:</span> <span class=\"m\">1200px</span>\n<span class=\"p\">);</span>\n<span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@each</span> <span class=\"nv\">$label</span><span class=\"o\">,</span> <span class=\"nv\">$size</span> <span class=\"n\">in</span> <span class=\"nv\">$breakpoints</span> <span class=\"p\">{</span>\n    <span class=\"k\">@if</span> <span class=\"nv\">$name</span> <span class=\"o\">==</span> <span class=\"nv\">$label</span> <span class=\"p\">{</span>\n      <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">@content</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><em>Update</em>: One problem with the code above is that if fails silently. If you misspell your breakpoint name, nothing happens. No errors, no compiled styles. Just failure with no warning. I got some help from <a href=\"http://hugogiraudel.com/\" title=\"Hugo Giraudel - Sass Guru\">Hugo Giraudel</a> in a <a href=\"http://www.sitepoint.com/css-sass-styleguide/#comment-1288013797\" title=\"My Current CSS and Sass Styleguide\">comment thread</a>. Here’s his suggested rewrite handling errors correctly:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoints</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"n\">small</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">720px</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span> <span class=\"m\">960px</span><span class=\"o\">,</span>\n  <span class=\"n\">wide</span><span class=\"o\">:</span> <span class=\"m\">1200px</span>\n<span class=\"p\">);</span>\n<span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"ow\">not</span> <span class=\"nf\">map-has-key</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s2\">\"Warning: `</span><span class=\"si\">#{</span><span class=\"nv\">$name</span><span class=\"si\">}</span><span class=\"s2\">` is not a valid breakpoint name.\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nv\">$name</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"k\">@content</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>See the code in action:</p>\n\n<p class=\"sassmeister\" data-gist-id=\"c88f9357661530a02f9b\" data-height=\"480\" data-theme=\"tomorrow\"><a href=\"http://sassmeister.com/gist/c88f9357661530a02f9b\">Play with this gist on SassMeister.</a></p>\n\n",
      "url": "http://localhost:4000/css/sass-maps-breakpoint-mixin/",
      "summary": "<p>When I started using Sass, I was using the following breakpoint mixin. It’s pretty simple and common, gets the job done, but could probably be improved.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$point</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">small</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">medium</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">720px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">large</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">960px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">wide</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"m\">1200px</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s1\">'Not a valid breakpoint name.'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>I wasn’t really crazy about having the pixel values for the widths in the mixin itself. That data ought to be saved as variables in my <code class=\"highlighter-rouge\">_variables.scss</code>, not tucked in <code class=\"highlighter-rouge\">_mixins.scss</code>. So I pulled those out and made them variables. This is a little better:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$smallBP</span><span class=\"p\">:</span> <span class=\"m\">480px</span><span class=\"p\">;</span>\n<span class=\"nv\">$mediumBP</span><span class=\"p\">:</span> <span class=\"m\">720px</span><span class=\"p\">;</span>\n<span class=\"nv\">$largeBP</span><span class=\"p\">:</span> <span class=\"m\">960px</span><span class=\"p\">;</span>\n<span class=\"nv\">$wideBP</span><span class=\"p\">:</span> <span class=\"m\">1200px</span><span class=\"p\">;</span>\n\n<span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$point</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">small</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$smallBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">medium</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$mediumBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"nb\">large</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$largeBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"n\">if</span> <span class=\"nv\">$point</span> <span class=\"o\">==</span> <span class=\"n\">wide</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$wideBP</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">@content</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s1\">'Not a valid breakpoint name.'</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>But what if I get bored with small, medium, large, &amp; wide? (<a href=\"http://css-tricks.com/media-queries-sass-3-2-and-codekit/\" title=\"Chris Coyier names his media queries after bears.\">Maybe I’d rather use bears instead…</a>) Or maybe I just want to abstract my breakpoint names to variables too. <a href=\"http://blog.sass-lang.com/posts/184094-sass-33-is-released\" title=\"Sass 3.3 Release\">Sass 3.3 added Sass maps</a>: a clean way to manage an array of variable data.</p>\n\n<p>Now I put all my names and sizes in <code class=\"highlighter-rouge\">$breakpoints</code> as a map: each value pair inside holds a breakpoint name and width. This moves all my breakpoint data to a single item in my variables partial.</p>\n\n<p>There’s another big benefit to storing all the breakpoint names and sizes in a map: I can repeat myself less in the mixin itself. In the breakpoint mixin code, I now write the basic structure just once, and let the $breakpoints map data control the previously repeated part.</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoints</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"n\">small</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">720px</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span> <span class=\"m\">960px</span><span class=\"o\">,</span>\n  <span class=\"n\">wide</span><span class=\"o\">:</span> <span class=\"m\">1200px</span>\n<span class=\"p\">);</span>\n<span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@each</span> <span class=\"nv\">$label</span><span class=\"o\">,</span> <span class=\"nv\">$size</span> <span class=\"n\">in</span> <span class=\"nv\">$breakpoints</span> <span class=\"p\">{</span>\n    <span class=\"k\">@if</span> <span class=\"nv\">$name</span> <span class=\"o\">==</span> <span class=\"nv\">$label</span> <span class=\"p\">{</span>\n      <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nv\">$size</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">@content</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p><em>Update</em>: One problem with the code above is that if fails silently. If you misspell your breakpoint name, nothing happens. No errors, no compiled styles. Just failure with no warning. I got some help from <a href=\"http://hugogiraudel.com/\" title=\"Hugo Giraudel - Sass Guru\">Hugo Giraudel</a> in a <a href=\"http://www.sitepoint.com/css-sass-styleguide/#comment-1288013797\" title=\"My Current CSS and Sass Styleguide\">comment thread</a>. Here’s his suggested rewrite handling errors correctly:</p>\n\n<div class=\"language-scss highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nv\">$breakpoints</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n  <span class=\"n\">small</span><span class=\"o\">:</span> <span class=\"m\">480px</span><span class=\"o\">,</span>\n  <span class=\"nb\">medium</span><span class=\"o\">:</span> <span class=\"m\">720px</span><span class=\"o\">,</span>\n  <span class=\"nb\">large</span><span class=\"o\">:</span> <span class=\"m\">960px</span><span class=\"o\">,</span>\n  <span class=\"n\">wide</span><span class=\"o\">:</span> <span class=\"m\">1200px</span>\n<span class=\"p\">);</span>\n<span class=\"k\">@mixin</span> <span class=\"nf\">breakpoint</span><span class=\"p\">(</span><span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@if</span> <span class=\"ow\">not</span> <span class=\"nf\">map-has-key</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nv\">$name</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"k\">@warn</span> <span class=\"s2\">\"Warning: `</span><span class=\"si\">#{</span><span class=\"nv\">$name</span><span class=\"si\">}</span><span class=\"s2\">` is not a valid breakpoint name.\"</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span> <span class=\"k\">@else</span> <span class=\"p\">{</span>\n    <span class=\"k\">@media</span> <span class=\"p\">(</span><span class=\"n\">min-width</span><span class=\"o\">:</span> <span class=\"nf\">map-get</span><span class=\"p\">(</span><span class=\"nv\">$breakpoints</span><span class=\"o\">,</span> <span class=\"nv\">$name</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n      <span class=\"k\">@content</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>See the code in action:</p>\n\n<p class=\"sassmeister\" data-gist-id=\"c88f9357661530a02f9b\" data-height=\"480\" data-theme=\"tomorrow\"><a href=\"http://sassmeister.com/gist/c88f9357661530a02f9b\">Play with this gist on SassMeister.</a></p>\n",
      "date_published": "2014-03-14 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/targeting-a-specific-image-type-with-css",
      "title": "Targeting a Specific Image Type with CSS",
      "content_html": "<style>\n .image-box { padding: 2em; width: 600px; max-width: 100%; background: #888; margin-bottom: 3em; text-align: center; box-shadow: inset 0 0 1em #444; -webkit-box-shadow: inset 0 0 1em #444;}\n.image-box img { width: 240px; max-width: 100%; margin: 1em; display: inline-block; border: #fff 8px solid; box-shadow: 0 2px 4px #444; -webkit-box-shadow: 0 2px 4px #444; }\n.meh.image-box img { width: 240px; max-width: 100%; margin: 1em; display: inline-block; border: #fff 8px solid; box-shadow: 0 2px 4px #444; -webkit-box-shadow: 0 2px 4px #444; background: #fff; }\n.good.image-box img[src*='png'] { border: none; box-shadow: none; -webkit-box-shadow: none; background: transparent; }\n</style>\n\n<p>So I’m coding up a new site from our designer and he’s set some nice quasi-polaroid photo effects: white border, box-shadow, etc. This looks great on rectangular images, of course, but not so much on other images with transparency.</p>\n\n<div class=\"image-box\">\n  <img class=\"size-full wp-image-1128 alignnone\" alt=\"Normal rectangular photo image\" src=\"/images/stanley-sm.jpg\" width=\"400\" height=\"300\" />\n  <img class=\"size-full wp-image-1127 alignnone\" alt=\"Fake logo image with transparency\" src=\"/images/fake-logo.png\" width=\"400\" height=\"300\" />\n</div>\n\n<p>One quick fix is to set the background to the same color as the border. That fixes the lonely frame problem and puts the transparent image on “card” of sorts. It’s a step in the right direction:</p>\n\n<div class=\"meh image-box\">\n  <img class=\"size-full wp-image-1128 alignnone\" alt=\"Normal rectangular photo image\" src=\"/images/stanley-sm.jpg\" width=\"400\" height=\"300\" />\n  <img class=\"size-full wp-image-1127 alignnone\" alt=\"Fake logo image with transparency\" src=\"/images/fake-logo.png\" width=\"400\" height=\"300\" />\n</div>\n\n<p>My old workaround was to ask our content specialist to add the class “no-border” to any image that was transparent and thus shouldn’t have the border effect. That was less than ideal, however. WordPress doesn’t make it super-easy to add classes to images, so this would put extra work on him, require new training for anyone else who touches content, and provide an extra avenue for operator error. What I really needed was a way to target the transparent images via CSS without adding anything to them in the CMS.</p>\n\n<p>Today it hit me that I could use an attribute selector to find any PNG and remove the border, shadow, and background from it. <a title=\"Attribute Selectors on CSS-Tricks\" href=\"http://css-tricks.com/attribute-selectors/\" target=\"_blank\">Attribute selectors are good to go on IE 7+ and all real browsers.</a> It’s a pretty safe bet that the only image with transparency would be a PNG (if for some reason you’re still using GIFs, though, just modify this code to include them) and that the normal rectangular photo images would be JPGs. Here’s the code I use to target them (of course, choose your own border / box-shadow and do your own prefixing):</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nt\">img</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"n\">border</span><span class=\"p\">;</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"n\">border-color</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"n\">box-shadow</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"nt\">img</span><span class=\"o\">[</span><span class=\"nt\">src</span><span class=\"o\">*=</span><span class=\"s1\">\"png\"</span><span class=\"o\">]</span> <span class=\"p\">{</span>\n  <span class=\"nl\">border</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n  <span class=\"nl\">background</span><span class=\"p\">:</span> <span class=\"nb\">transparent</span><span class=\"p\">;</span>\n  <span class=\"nl\">box-shadow</span><span class=\"p\">:</span> <span class=\"nb\">none</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>Now, as you can see below, the JPG photo image has the correct border / box-shadow, while the PNG displays in all its transparent, frame-less glory.</p>\n\n<div class=\"good image-box\">\n  <img class=\"size-full wp-image-1128 alignnone\" alt=\"Normal rectangular photo image\" src=\"/images/stanley-sm.jpg\" width=\"400\" height=\"300\" />\n  <img class=\"size-full wp-image-1127 alignnone\" alt=\"Fake logo image with transparency\" src=\"/images/fake-logo.png\" width=\"400\" height=\"300\" />\n</div>\n\n<p>Of course, there is a possibility that someone might upload a rectangular photo formatted as PNG, but in my opinion, that’s a good opportunity to teach them about file formats. Other than education, any ideas on how to improve this snippet to cover non-transparent PNGs?</p>\n",
      "url": "http://localhost:4000/css/targeting-a-specific-image-type-with-css/",
      "summary": "<style>\n .image-box { padding: 2em; width: 600px; max-width: 100%; background: #888; margin-bottom: 3em; text-align: center; box-shadow: inset 0 0 1em #444; -webkit-box-shadow: inset 0 0 1em #444;}\n.image-box img { width: 240px; max-width: 100%; margin: 1em; display: inline-block; border: #fff 8px solid; box-shadow: 0 2px 4px #444; -webkit-box-shadow: 0 2px 4px #444; }\n.meh.image-box img { width: 240px; max-width: 100%; margin: 1em; display: inline-block; border: #fff 8px solid; box-shadow: 0 2px 4px #444; -webkit-box-shadow: 0 2px 4px #444; background: #fff; }\n.good.image-box img[src*='png'] { border: none; box-shadow: none; -webkit-box-shadow: none; background: transparent; }\n</style>\n\n",
      "date_published": "2013-10-30 00:00:00 -0600"
      
    },
  
    {
      "id": "/css/code-snippet-for-typekit-users",
      "title": "Code Snippet for Typekit Users",
      "content_html": "<p>If you’re using Typekit fonts on your website, you’ve probably got users seeing a FOUC (Flash of Unstyled Content) – they see the fallback fonts for your text, then they’ll see a flash, then the content in your custom fonts. To avoid this, just throw the following code into your stylesheet:</p>\n\n<div class=\"language-css highlighter-rouge\"><pre class=\"highlight\"><code><span class=\"nc\">.wf-loading</span> <span class=\"p\">{</span>\n  <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"nt\">html</span><span class=\"o\">[</span><span class=\"nt\">class</span><span class=\"o\">*=</span><span class=\"s1\">\"active\"</span><span class=\"o\">]</span><span class=\"p\">{</span>\n  <span class=\"nl\">opacity</span><span class=\"p\">:</span> <span class=\"m\">1</span><span class=\"p\">;</span>\n  <span class=\"nl\">transition</span><span class=\"p\">:</span> <span class=\"n\">opacity</span> <span class=\"m\">.4s</span> <span class=\"n\">ease-in</span><span class=\"p\">;</span>\n  <span class=\"c\">/* Add needed prefixes */</span>\n<span class=\"p\">}</span>\n</code></pre>\n</div>\n\n<p>This will hide the page content while the fonts are loading, then ease it in once they’ve loaded.</p>\n\n<p>Another helpful tip: put the Typekit javascript code in the head of your page (I know, best practices says put most JS in the footer, but Typekit fonts load earlier if you put the code in the header).</p>\n",
      "url": "http://localhost:4000/css/code-snippet-for-typekit-users/",
      "summary": "<p>If you’re using Typekit fonts on your website, you’ve probably got users seeing a FOUC (Flash of Unstyled Content) – they see the fallback fonts for your text, then they’ll see a flash, then the content in your custom fonts. To avoid this, just throw the following code into your stylesheet:</p>\n",
      "date_published": "2013-06-17 00:00:00 -0600"
      
    }
  
  ]
}